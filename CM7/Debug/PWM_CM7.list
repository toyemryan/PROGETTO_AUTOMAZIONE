
PWM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001920  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001bb8  08001bb8  00002bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bc8  08001bc8  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bc8  08001bc8  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bc8  08001bc8  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bc8  08001bc8  00002bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bcc  08001bcc  00002bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08001bd0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001be0  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001be0  00003030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e03  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013de  00000000  00000000  0000ae41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f8  00000000  00000000  0000c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f60  00000000  00000000  0000cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007855  00000000  00000000  00044d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176a20  00000000  00000000  0004c58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c2fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e8  00000000  00000000  001c2ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001c49d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001ba0 	.word	0x08001ba0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001ba0 	.word	0x08001ba0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ExitRun0Mode+0x30>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f023 0306 	bic.w	r3, r3, #6
 8000440:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <ExitRun0Mode+0x30>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <ExitRun0Mode+0x30>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800046e:	f000 f8b7 	bl	80005e0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/

#ifdef DEBUG
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 8000472:	bf00      	nop
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <main+0x7c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f9      	bne.n	8000474 <main+0xc>
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 f956 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f830 	bl	80004e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <main+0x7c>)
 800048a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800048e:	4a15      	ldr	r2, [pc, #84]	@ (80004e4 <main+0x7c>)
 8000490:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000498:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <main+0x7c>)
 800049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800049e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 fb3c 	bl	8000b24 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004ac:	2100      	movs	r1, #0
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fb52 	bl	8000b58 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004b8:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004ba:	bf00      	nop
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <main+0x7c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d104      	bne.n	80004d2 <main+0x6a>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	dcf4      	bgt.n	80004bc <main+0x54>
if ( timeout < 0 )
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	da02      	bge.n	80004de <main+0x76>
{
Error_Handler();
 80004d8:	f000 f8ae 	bl	8000638 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	e7fd      	b.n	80004de <main+0x76>
 80004e2:	bf00      	nop
 80004e4:	58024400 	.word	0x58024400

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	@ 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f2:	224c      	movs	r2, #76	@ 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fb26 	bl	8001b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fb20 	bl	8001b48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000508:	2002      	movs	r0, #2
 800050a:	f000 fb39 	bl	8000b80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a30      	ldr	r2, [pc, #192]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b2c      	ldr	r3, [pc, #176]	@ (80005dc <SystemClock_Config+0xf4>)
 800052a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052c:	4a2b      	ldr	r2, [pc, #172]	@ (80005dc <SystemClock_Config+0xf4>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000534:	4b29      	ldr	r3, [pc, #164]	@ (80005dc <SystemClock_Config+0xf4>)
 8000536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000540:	bf00      	nop
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <SystemClock_Config+0xf0>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d1f8      	bne.n	8000542 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000554:	2301      	movs	r3, #1
 8000556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000568:	233c      	movs	r3, #60	@ 0x3c
 800056a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056c:	2302      	movs	r3, #2
 800056e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000578:	230c      	movs	r3, #12
 800057a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057c:	2300      	movs	r3, #0
 800057e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fb53 	bl	8000c34 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000594:	f000 f850 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	233f      	movs	r3, #63	@ 0x3f
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a4:	2308      	movs	r3, #8
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a8:	2340      	movs	r3, #64	@ 0x40
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ac:	2340      	movs	r3, #64	@ 0x40
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b6:	2340      	movs	r3, #64	@ 0x40
 80005b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ff92 	bl	80014e8 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005ca:	f000 f835 	bl	8000638 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3770      	adds	r7, #112	@ 0x70
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	58024800 	.word	0x58024800
 80005dc:	58000400 	.word	0x58000400

080005e0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005f2:	f000 fa1f 	bl	8000a34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000602:	231f      	movs	r3, #31
 8000604:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000606:	2387      	movs	r3, #135	@ 0x87
 8000608:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800060a:	2300      	movs	r3, #0
 800060c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800060e:	2300      	movs	r3, #0
 8000610:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000612:	2301      	movs	r3, #1
 8000614:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000616:	2301      	movs	r3, #1
 8000618:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000622:	463b      	mov	r3, r7
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fa3d 	bl	8000aa4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800062a:	2004      	movs	r0, #4
 800062c:	f000 fa1a 	bl	8000a64 <HAL_MPU_Enable>

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_MspInit+0x30>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <HAL_MspInit+0x30>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_MspInit+0x30>)
 800065c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	58024400 	.word	0x58024400

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x4>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f8a1 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000714 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80006dc:	f7ff feaa 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f7ff fdfa 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f001 fa25 	bl	8001b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070e:	f7ff feab 	bl	8000468 <main>
  bx  lr
 8000712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000718:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800071c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000720:	08001bd0 	.word	0x08001bd0
  ldr r2, =_sbss
 8000724:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000728:	24000030 	.word	0x24000030

0800072c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC3_IRQHandler>
	...

08000730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000736:	2003      	movs	r0, #3
 8000738:	f000 f94a 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800073c:	f001 f88a 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8000740:	4602      	mov	r2, r0
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_Init+0x68>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	4913      	ldr	r1, [pc, #76]	@ (800079c <HAL_Init+0x6c>)
 800074e:	5ccb      	ldrb	r3, [r1, r3]
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	fa22 f303 	lsr.w	r3, r2, r3
 8000758:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_Init+0x68>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <HAL_Init+0x6c>)
 8000764:	5cd3      	ldrb	r3, [r2, r3]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	fa22 f303 	lsr.w	r3, r2, r3
 8000770:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <HAL_Init+0x70>)
 8000772:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <HAL_Init+0x74>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f814 	bl	80007a8 <HAL_InitTick>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e002      	b.n	8000790 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800078a:	f7ff ff5b 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58024400 	.word	0x58024400
 800079c:	08001bb8 	.word	0x08001bb8
 80007a0:	24000004 	.word	0x24000004
 80007a4:	24000000 	.word	0x24000000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_InitTick+0x60>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e021      	b.n	8000800 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007bc:	4b13      	ldr	r3, [pc, #76]	@ (800080c <HAL_InitTick+0x64>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_InitTick+0x60>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f921 	bl	8000a1a <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f8f9 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	@ (8000810 <HAL_InitTick+0x68>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2400000c 	.word	0x2400000c
 800080c:	24000000 	.word	0x24000000
 8000810:	24000008 	.word	0x24000008

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2400000c 	.word	0x2400000c
 8000838:	2400002c 	.word	0x2400002c

0800083c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2400002c 	.word	0x2400002c

08000854 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <HAL_GetREVID+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0c1b      	lsrs	r3, r3, #16
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	5c001000 	.word	0x5c001000

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <__NVIC_SetPriorityGrouping+0x40>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	4313      	orrs	r3, r2
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <__NVIC_SetPriorityGrouping+0x40>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	05fa0000 	.word	0x05fa0000

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	@ (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	@ (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	@ 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	@ 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff5e 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff90 	bl	8000924 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffb2 	bl	800098c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a38:	f3bf 8f5f 	dmb	sy
}
 8000a3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <HAL_MPU_Disable+0x28>)
 8000a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a42:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_MPU_Disable+0x28>)
 8000a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a48:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_MPU_Disable+0x2c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	e000ed90 	.word	0xe000ed90

08000a64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <HAL_MPU_Enable+0x38>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_MPU_Enable+0x3c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <HAL_MPU_Enable+0x3c>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a80:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000a82:	f3bf 8f4f 	dsb	sy
}
 8000a86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a88:	f3bf 8f6f 	isb	sy
}
 8000a8c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed90 	.word	0xe000ed90
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	785a      	ldrb	r2, [r3, #1]
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_MPU_ConfigRegion+0x7c>)
 8000ab2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_MPU_ConfigRegion+0x7c>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_MPU_ConfigRegion+0x7c>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ac0:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_MPU_ConfigRegion+0x7c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
 8000acc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7adb      	ldrb	r3, [r3, #11]
 8000ad2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ad4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7a9b      	ldrb	r3, [r3, #10]
 8000ada:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000adc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7b5b      	ldrb	r3, [r3, #13]
 8000ae2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ae4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7b9b      	ldrb	r3, [r3, #14]
 8000aea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000aec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7bdb      	ldrb	r3, [r3, #15]
 8000af2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a5b      	ldrb	r3, [r3, #9]
 8000afa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a1b      	ldrb	r3, [r3, #8]
 8000b02:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b04:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b0e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b10:	6113      	str	r3, [r2, #16]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed90 	.word	0xe000ed90

08000b24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000b2c:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_HSEM_FastTake+0x2c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3320      	adds	r3, #32
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_HSEM_FastTake+0x30>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	58026400 	.word	0x58026400
 8000b54:	80000300 	.word	0x80000300

08000b58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000b62:	4906      	ldr	r1, [pc, #24]	@ (8000b7c <HAL_HSEM_Release+0x24>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	58026400 	.word	0x58026400

08000b80 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000b88:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d00a      	beq.n	8000baa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000b94:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d001      	beq.n	8000ba6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e040      	b.n	8000c28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e03e      	b.n	8000c28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000bb2:	491f      	ldr	r1, [pc, #124]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000bba:	f7ff fe3f 	bl	800083c <HAL_GetTick>
 8000bbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bc0:	e009      	b.n	8000bd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000bc2:	f7ff fe3b 	bl	800083c <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bd0:	d901      	bls.n	8000bd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e028      	b.n	8000c28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be2:	d1ee      	bne.n	8000bc2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b1e      	cmp	r3, #30
 8000be8:	d008      	beq.n	8000bfc <HAL_PWREx_ConfigSupply+0x7c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bee:	d005      	beq.n	8000bfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b1d      	cmp	r3, #29
 8000bf4:	d002      	beq.n	8000bfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b2d      	cmp	r3, #45	@ 0x2d
 8000bfa:	d114      	bne.n	8000c26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000bfc:	f7ff fe1e 	bl	800083c <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000c02:	e009      	b.n	8000c18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000c04:	f7ff fe1a 	bl	800083c <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c12:	d901      	bls.n	8000c18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e007      	b.n	8000c28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c24:	d1ee      	bne.n	8000c04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024800 	.word	0x58024800

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	@ 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f000 bc48 	b.w	80014d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8088 	beq.w	8000d66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c56:	4b99      	ldr	r3, [pc, #612]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c60:	4b96      	ldr	r3, [pc, #600]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c68:	2b10      	cmp	r3, #16
 8000c6a:	d007      	beq.n	8000c7c <HAL_RCC_OscConfig+0x48>
 8000c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6e:	2b18      	cmp	r3, #24
 8000c70:	d111      	bne.n	8000c96 <HAL_RCC_OscConfig+0x62>
 8000c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d10c      	bne.n	8000c96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	4b8f      	ldr	r3, [pc, #572]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d06d      	beq.n	8000d64 <HAL_RCC_OscConfig+0x130>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d169      	bne.n	8000d64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f000 bc21 	b.w	80014d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x7a>
 8000ca0:	4b86      	ldr	r3, [pc, #536]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a85      	ldr	r2, [pc, #532]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e02e      	b.n	8000d0c <HAL_RCC_OscConfig+0xd8>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x9c>
 8000cb6:	4b81      	ldr	r3, [pc, #516]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a80      	ldr	r2, [pc, #512]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xd8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xc0>
 8000cda:	4b78      	ldr	r3, [pc, #480]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a77      	ldr	r2, [pc, #476]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b75      	ldr	r3, [pc, #468]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a74      	ldr	r2, [pc, #464]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xd8>
 8000cf4:	4b71      	ldr	r3, [pc, #452]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a70      	ldr	r2, [pc, #448]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a6d      	ldr	r2, [pc, #436]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d14:	f7ff fd92 	bl	800083c <HAL_GetTick>
 8000d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fd8e 	bl	800083c <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	@ 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e3d4      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d2e:	4b63      	ldr	r3, [pc, #396]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe8>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fd7e 	bl	800083c <HAL_GetTick>
 8000d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fd7a 	bl	800083c <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	@ 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e3c0      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d56:	4b59      	ldr	r3, [pc, #356]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x110>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80ca 	beq.w	8000f08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d74:	4b51      	ldr	r3, [pc, #324]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <HAL_RCC_OscConfig+0x166>
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	2b18      	cmp	r3, #24
 8000d8e:	d156      	bne.n	8000e3e <HAL_RCC_OscConfig+0x20a>
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d151      	bne.n	8000e3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d9a:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_RCC_OscConfig+0x17e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e392      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000db2:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0219 	bic.w	r2, r3, #25
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	493f      	ldr	r1, [pc, #252]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fd3a 	bl	800083c <HAL_GetTick>
 8000dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fd36 	bl	800083c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e37c      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dde:	4b37      	ldr	r3, [pc, #220]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	f7ff fd33 	bl	8000854 <HAL_GetREVID>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d817      	bhi.n	8000e28 <HAL_RCC_OscConfig+0x1f4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b40      	cmp	r3, #64	@ 0x40
 8000dfe:	d108      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1de>
 8000e00:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000e08:	4a2c      	ldr	r2, [pc, #176]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e10:	e07a      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	031b      	lsls	r3, r3, #12
 8000e20:	4926      	ldr	r1, [pc, #152]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e26:	e06f      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	061b      	lsls	r3, r3, #24
 8000e36:	4921      	ldr	r1, [pc, #132]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e3c:	e064      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d047      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 0219 	bic.w	r2, r3, #25
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	491a      	ldr	r1, [pc, #104]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fcf0 	bl	800083c <HAL_GetTick>
 8000e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff fcec 	bl	800083c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e332      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	f7ff fce9 	bl	8000854 <HAL_GetREVID>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d819      	bhi.n	8000ec0 <HAL_RCC_OscConfig+0x28c>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b40      	cmp	r3, #64	@ 0x40
 8000e92:	d108      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x272>
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea2:	6053      	str	r3, [r2, #4]
 8000ea4:	e030      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	031b      	lsls	r3, r3, #12
 8000eb4:	4901      	ldr	r1, [pc, #4]	@ (8000ebc <HAL_RCC_OscConfig+0x288>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	604b      	str	r3, [r1, #4]
 8000eba:	e025      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	4b9a      	ldr	r3, [pc, #616]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	4997      	ldr	r1, [pc, #604]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
 8000ed4:	e018      	b.n	8000f08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed6:	4b95      	ldr	r3, [pc, #596]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a94      	ldr	r2, [pc, #592]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fcab 	bl	800083c <HAL_GetTick>
 8000ee6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fca7 	bl	800083c <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e2ed      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000efc:	4b8b      	ldr	r3, [pc, #556]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a9 	beq.w	8001068 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f16:	4b85      	ldr	r3, [pc, #532]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000f1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f20:	4b82      	ldr	r3, [pc, #520]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d007      	beq.n	8000f3c <HAL_RCC_OscConfig+0x308>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b18      	cmp	r3, #24
 8000f30:	d13a      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x374>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d135      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_OscConfig+0x320>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b80      	cmp	r3, #128	@ 0x80
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e2c1      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f54:	f7ff fc7e 	bl	8000854 <HAL_GetREVID>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d817      	bhi.n	8000f92 <HAL_RCC_OscConfig+0x35e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d108      	bne.n	8000f7c <HAL_RCC_OscConfig+0x348>
 8000f6a:	4b70      	ldr	r3, [pc, #448]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8000f72:	4a6e      	ldr	r2, [pc, #440]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f7a:	e075      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	069b      	lsls	r3, r3, #26
 8000f8a:	4968      	ldr	r1, [pc, #416]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f90:	e06a      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f92:	4b66      	ldr	r3, [pc, #408]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	061b      	lsls	r3, r3, #24
 8000fa0:	4962      	ldr	r1, [pc, #392]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000fa6:	e05f      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d042      	beq.n	8001036 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc3e 	bl	800083c <HAL_GetTick>
 8000fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc3a 	bl	800083c <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e280      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fd6:	4b55      	ldr	r3, [pc, #340]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fe2:	f7ff fc37 	bl	8000854 <HAL_GetREVID>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d817      	bhi.n	8001020 <HAL_RCC_OscConfig+0x3ec>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	2b20      	cmp	r3, #32
 8000ff6:	d108      	bne.n	800100a <HAL_RCC_OscConfig+0x3d6>
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001000:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8001002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001006:	6053      	str	r3, [r2, #4]
 8001008:	e02e      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	069b      	lsls	r3, r3, #26
 8001018:	4944      	ldr	r1, [pc, #272]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
 800101e:	e023      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
 8001020:	4b42      	ldr	r3, [pc, #264]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	061b      	lsls	r3, r3, #24
 800102e:	493f      	ldr	r1, [pc, #252]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8001030:	4313      	orrs	r3, r2
 8001032:	60cb      	str	r3, [r1, #12]
 8001034:	e018      	b.n	8001068 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800103c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001042:	f7ff fbfb 	bl	800083c <HAL_GetTick>
 8001046:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800104a:	f7ff fbf7 	bl	800083c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e23d      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800105c:	4b33      	ldr	r3, [pc, #204]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d036      	beq.n	80010e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d019      	beq.n	80010b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800107c:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800107e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001080:	4a2a      	ldr	r2, [pc, #168]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001088:	f7ff fbd8 	bl	800083c <HAL_GetTick>
 800108c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fbd4 	bl	800083c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e21a      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x45c>
 80010ae:	e018      	b.n	80010e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010b4:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fbbe 	bl	800083c <HAL_GetTick>
 80010c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fbba 	bl	800083c <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e200      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d039      	beq.n	8001162 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01c      	beq.n	8001130 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 80010fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001102:	f7ff fb9b 	bl	800083c <HAL_GetTick>
 8001106:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800110a:	f7ff fb97 	bl	800083c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1dd      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_RCC_OscConfig+0x4f8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x4d6>
 8001128:	e01b      	b.n	8001162 <HAL_RCC_OscConfig+0x52e>
 800112a:	bf00      	nop
 800112c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001130:	4b9b      	ldr	r3, [pc, #620]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a9a      	ldr	r2, [pc, #616]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800113a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb7e 	bl	800083c <HAL_GetTick>
 8001140:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001144:	f7ff fb7a 	bl	800083c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1c0      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001156:	4b92      	ldr	r3, [pc, #584]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8081 	beq.w	8001272 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001170:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <HAL_RCC_OscConfig+0x770>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a8b      	ldr	r2, [pc, #556]	@ (80013a4 <HAL_RCC_OscConfig+0x770>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800117c:	f7ff fb5e 	bl	800083c <HAL_GetTick>
 8001180:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001184:	f7ff fb5a 	bl	800083c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1a0      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001196:	4b83      	ldr	r3, [pc, #524]	@ (80013a4 <HAL_RCC_OscConfig+0x770>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x584>
 80011aa:	4b7d      	ldr	r3, [pc, #500]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ae:	4a7c      	ldr	r2, [pc, #496]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011b6:	e02d      	b.n	8001214 <HAL_RCC_OscConfig+0x5e0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <HAL_RCC_OscConfig+0x5a6>
 80011c0:	4b77      	ldr	r3, [pc, #476]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c4:	4a76      	ldr	r2, [pc, #472]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80011cc:	4b74      	ldr	r3, [pc, #464]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d0:	4a73      	ldr	r2, [pc, #460]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x5e0>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c8>
 80011e2:	4b6f      	ldr	r3, [pc, #444]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a6e      	ldr	r2, [pc, #440]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ee:	4b6c      	ldr	r3, [pc, #432]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f2:	4a6b      	ldr	r2, [pc, #428]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x5e0>
 80011fc:	4b68      	ldr	r3, [pc, #416]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001200:	4a67      	ldr	r2, [pc, #412]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	@ 0x70
 8001208:	4b65      	ldr	r3, [pc, #404]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120c:	4a64      	ldr	r2, [pc, #400]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800120e:	f023 0304 	bic.w	r3, r3, #4
 8001212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d015      	beq.n	8001248 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121c:	f7ff fb0e 	bl	800083c <HAL_GetTick>
 8001220:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001224:	f7ff fb0a 	bl	800083c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e14e      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800123a:	4b59      	ldr	r3, [pc, #356]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0ee      	beq.n	8001224 <HAL_RCC_OscConfig+0x5f0>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001248:	f7ff faf8 	bl	800083c <HAL_GetTick>
 800124c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f7ff faf4 	bl	800083c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e138      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001266:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ee      	bne.n	8001250 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 812d 	beq.w	80014d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800127c:	4b48      	ldr	r3, [pc, #288]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001284:	2b18      	cmp	r3, #24
 8001286:	f000 80bd 	beq.w	8001404 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128e:	2b02      	cmp	r3, #2
 8001290:	f040 809e 	bne.w	80013d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b42      	ldr	r3, [pc, #264]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a41      	ldr	r2, [pc, #260]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800129a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800129e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff facc 	bl	800083c <HAL_GetTick>
 80012a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fac8 	bl	800083c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e10e      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80012c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012ca:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <HAL_RCC_OscConfig+0x774>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	430a      	orrs	r2, r1
 80012da:	4931      	ldr	r1, [pc, #196]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	628b      	str	r3, [r1, #40]	@ 0x28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	3b01      	subs	r3, #1
 80012e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ee:	3b01      	subs	r3, #1
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fa:	3b01      	subs	r3, #1
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001308:	3b01      	subs	r3, #1
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001310:	4923      	ldr	r1, [pc, #140]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001312:	4313      	orrs	r3, r2
 8001314:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131a:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800132e:	00d2      	lsls	r2, r2, #3
 8001330:	491b      	ldr	r1, [pc, #108]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001332:	4313      	orrs	r3, r2
 8001334:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	f023 020c 	bic.w	r2, r3, #12
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4917      	ldr	r1, [pc, #92]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800134a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134c:	f023 0202 	bic.w	r2, r3, #2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	4912      	ldr	r1, [pc, #72]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001356:	4313      	orrs	r3, r2
 8001358:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <HAL_RCC_OscConfig+0x76c>)
 8001390:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fa51 	bl	800083c <HAL_GetTick>
 800139a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x78e>
 800139e:	bf00      	nop
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58024800 	.word	0x58024800
 80013a8:	fffffc0c 	.word	0xfffffc0c
 80013ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fa44 	bl	800083c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e08a      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x77c>
 80013ce:	e082      	b.n	80014d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d0:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a42      	ldr	r2, [pc, #264]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80013d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fa2e 	bl	800083c <HAL_GetTick>
 80013e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fa2a 	bl	800083c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e070      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013f6:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x7b0>
 8001402:	e068      	b.n	80014d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001404:	4b36      	ldr	r3, [pc, #216]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	2b01      	cmp	r3, #1
 8001416:	d031      	beq.n	800147c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d12a      	bne.n	800147c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d122      	bne.n	800147c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	0a5b      	lsrs	r3, r3, #9
 800144a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001452:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d111      	bne.n	800147c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001464:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d108      	bne.n	800147c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0e1b      	lsrs	r3, r3, #24
 800146e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001476:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e02b      	b.n	80014d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 8001482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800148a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	429a      	cmp	r2, r3
 8001494:	d01f      	beq.n	80014d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014a2:	f7ff f9cb 	bl	800083c <HAL_GetTick>
 80014a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80014a8:	bf00      	nop
 80014aa:	f7ff f9c7 	bl	800083c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d0f9      	beq.n	80014aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80014b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_RCC_OscConfig+0x8b0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014c2:	00d2      	lsls	r2, r2, #3
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80014cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_RCC_OscConfig+0x8ac>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3730      	adds	r7, #48	@ 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	58024400 	.word	0x58024400
 80014e4:	ffff0007 	.word	0xffff0007

080014e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e19c      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b87      	ldr	r3, [pc, #540]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 020f 	bic.w	r2, r3, #15
 8001512:	4985      	ldr	r1, [pc, #532]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b83      	ldr	r3, [pc, #524]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e184      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001544:	429a      	cmp	r2, r3
 8001546:	d908      	bls.n	800155a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001548:	4b78      	ldr	r3, [pc, #480]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4975      	ldr	r1, [pc, #468]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001556:	4313      	orrs	r3, r2
 8001558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d010      	beq.n	8001588 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	4b70      	ldr	r3, [pc, #448]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001572:	429a      	cmp	r2, r3
 8001574:	d908      	bls.n	8001588 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001576:	4b6d      	ldr	r3, [pc, #436]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	496a      	ldr	r1, [pc, #424]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001584:	4313      	orrs	r3, r2
 8001586:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	d010      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d908      	bls.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015a4:	4b61      	ldr	r3, [pc, #388]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	495e      	ldr	r1, [pc, #376]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d010      	beq.n	80015e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	4b59      	ldr	r3, [pc, #356]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d908      	bls.n	80015e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80015d2:	4b56      	ldr	r3, [pc, #344]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4953      	ldr	r1, [pc, #332]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d010      	beq.n	8001612 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d908      	bls.n	8001612 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f023 020f 	bic.w	r2, r3, #15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4947      	ldr	r1, [pc, #284]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800160e:	4313      	orrs	r3, r2
 8001610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d055      	beq.n	80016ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4940      	ldr	r1, [pc, #256]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800162c:	4313      	orrs	r3, r2
 800162e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d121      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0f6      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001650:	4b36      	ldr	r3, [pc, #216]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d115      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0ea      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0de      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001678:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d6      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f023 0207 	bic.w	r2, r3, #7
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4925      	ldr	r1, [pc, #148]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 8001696:	4313      	orrs	r3, r2
 8001698:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169a:	f7ff f8cf 	bl	800083c <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f8cb 	bl	800083c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0be      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d1eb      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d208      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f023 020f 	bic.w	r2, r3, #15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	490e      	ldr	r1, [pc, #56]	@ (800172c <HAL_RCC_ClockConfig+0x244>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d214      	bcs.n	8001730 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 020f 	bic.w	r2, r3, #15
 800170e:	4906      	ldr	r1, [pc, #24]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <HAL_RCC_ClockConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e086      	b.n	8001836 <HAL_RCC_ClockConfig+0x34e>
 8001728:	52002000 	.word	0x52002000
 800172c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d010      	beq.n	800175e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001748:	429a      	cmp	r2, r3
 800174a:	d208      	bcs.n	800175e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800174c:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4939      	ldr	r1, [pc, #228]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 800175a:	4313      	orrs	r3, r2
 800175c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001776:	429a      	cmp	r2, r3
 8001778:	d208      	bcs.n	800178c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	492e      	ldr	r1, [pc, #184]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d010      	beq.n	80017ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d208      	bcs.n	80017ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4922      	ldr	r1, [pc, #136]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d208      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4917      	ldr	r1, [pc, #92]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e8:	f000 f834 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	4912      	ldr	r1, [pc, #72]	@ (8001844 <HAL_RCC_ClockConfig+0x35c>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_RCC_ClockConfig+0x358>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_RCC_ClockConfig+0x35c>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_RCC_ClockConfig+0x360>)
 800181e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001820:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <HAL_RCC_ClockConfig+0x364>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_RCC_ClockConfig+0x368>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe ffbc 	bl	80007a8 <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	58024400 	.word	0x58024400
 8001844:	08001bb8 	.word	0x08001bb8
 8001848:	24000004 	.word	0x24000004
 800184c:	24000000 	.word	0x24000000
 8001850:	24000008 	.word	0x24000008

08001854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185a:	4bb3      	ldr	r3, [pc, #716]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001862:	2b18      	cmp	r3, #24
 8001864:	f200 8155 	bhi.w	8001b12 <HAL_RCC_GetSysClockFreq+0x2be>
 8001868:	a201      	add	r2, pc, #4	@ (adr r2, 8001870 <HAL_RCC_GetSysClockFreq+0x1c>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	080018d5 	.word	0x080018d5
 8001874:	08001b13 	.word	0x08001b13
 8001878:	08001b13 	.word	0x08001b13
 800187c:	08001b13 	.word	0x08001b13
 8001880:	08001b13 	.word	0x08001b13
 8001884:	08001b13 	.word	0x08001b13
 8001888:	08001b13 	.word	0x08001b13
 800188c:	08001b13 	.word	0x08001b13
 8001890:	080018fb 	.word	0x080018fb
 8001894:	08001b13 	.word	0x08001b13
 8001898:	08001b13 	.word	0x08001b13
 800189c:	08001b13 	.word	0x08001b13
 80018a0:	08001b13 	.word	0x08001b13
 80018a4:	08001b13 	.word	0x08001b13
 80018a8:	08001b13 	.word	0x08001b13
 80018ac:	08001b13 	.word	0x08001b13
 80018b0:	08001901 	.word	0x08001901
 80018b4:	08001b13 	.word	0x08001b13
 80018b8:	08001b13 	.word	0x08001b13
 80018bc:	08001b13 	.word	0x08001b13
 80018c0:	08001b13 	.word	0x08001b13
 80018c4:	08001b13 	.word	0x08001b13
 80018c8:	08001b13 	.word	0x08001b13
 80018cc:	08001b13 	.word	0x08001b13
 80018d0:	08001907 	.word	0x08001907
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018d4:	4b94      	ldr	r3, [pc, #592]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80018e0:	4b91      	ldr	r3, [pc, #580]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	4a90      	ldr	r2, [pc, #576]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80018f2:	e111      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80018f4:	4b8d      	ldr	r3, [pc, #564]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018f6:	61bb      	str	r3, [r7, #24]
      break;
 80018f8:	e10e      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80018fa:	4b8d      	ldr	r3, [pc, #564]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80018fc:	61bb      	str	r3, [r7, #24]
      break;
 80018fe:	e10b      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001900:	4b8c      	ldr	r3, [pc, #560]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001902:	61bb      	str	r3, [r7, #24]
      break;
 8001904:	e108      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001906:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001910:	4b85      	ldr	r3, [pc, #532]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800191a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800191c:	4b82      	ldr	r3, [pc, #520]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001926:	4b80      	ldr	r3, [pc, #512]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80e1 	beq.w	8001b0c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	f000 8083 	beq.w	8001a58 <HAL_RCC_GetSysClockFreq+0x204>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b02      	cmp	r3, #2
 8001956:	f200 80a1 	bhi.w	8001a9c <HAL_RCC_GetSysClockFreq+0x248>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x114>
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d056      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001966:	e099      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001968:	4b6f      	ldr	r3, [pc, #444]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02d      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001974:	4b6c      	ldr	r3, [pc, #432]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	4a6b      	ldr	r2, [pc, #428]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800199e:	4b62      	ldr	r3, [pc, #392]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80019b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80019ce:	e087      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001b3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80019de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019e2:	4b51      	ldr	r3, [pc, #324]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80019f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a12:	e065      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a26:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a56:	e043      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001b44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a9a:	e021      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ac2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ade:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	0a5b      	lsrs	r3, r3, #9
 8001ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aea:	3301      	adds	r3, #1
 8001aec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b04:	ee17 3a90 	vmov	r3, s15
 8001b08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
      break;
 8001b10:	e002      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b14:	61bb      	str	r3, [r7, #24]
      break;
 8001b16:	bf00      	nop
  }

  return sysclockfreq;
 8001b18:	69bb      	ldr	r3, [r7, #24]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	03d09000 	.word	0x03d09000
 8001b30:	003d0900 	.word	0x003d0900
 8001b34:	017d7840 	.word	0x017d7840
 8001b38:	46000000 	.word	0x46000000
 8001b3c:	4c742400 	.word	0x4c742400
 8001b40:	4a742400 	.word	0x4a742400
 8001b44:	4bbebc20 	.word	0x4bbebc20

08001b48 <memset>:
 8001b48:	4402      	add	r2, r0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <memset+0xa>
 8001b50:	4770      	bx	lr
 8001b52:	f803 1b01 	strb.w	r1, [r3], #1
 8001b56:	e7f9      	b.n	8001b4c <memset+0x4>

08001b58 <__libc_init_array>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8001b90 <__libc_init_array+0x38>)
 8001b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8001b94 <__libc_init_array+0x3c>)
 8001b5e:	1b64      	subs	r4, r4, r5
 8001b60:	10a4      	asrs	r4, r4, #2
 8001b62:	2600      	movs	r6, #0
 8001b64:	42a6      	cmp	r6, r4
 8001b66:	d109      	bne.n	8001b7c <__libc_init_array+0x24>
 8001b68:	4d0b      	ldr	r5, [pc, #44]	@ (8001b98 <__libc_init_array+0x40>)
 8001b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8001b9c <__libc_init_array+0x44>)
 8001b6c:	f000 f818 	bl	8001ba0 <_init>
 8001b70:	1b64      	subs	r4, r4, r5
 8001b72:	10a4      	asrs	r4, r4, #2
 8001b74:	2600      	movs	r6, #0
 8001b76:	42a6      	cmp	r6, r4
 8001b78:	d105      	bne.n	8001b86 <__libc_init_array+0x2e>
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b80:	4798      	blx	r3
 8001b82:	3601      	adds	r6, #1
 8001b84:	e7ee      	b.n	8001b64 <__libc_init_array+0xc>
 8001b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b8a:	4798      	blx	r3
 8001b8c:	3601      	adds	r6, #1
 8001b8e:	e7f2      	b.n	8001b76 <__libc_init_array+0x1e>
 8001b90:	08001bc8 	.word	0x08001bc8
 8001b94:	08001bc8 	.word	0x08001bc8
 8001b98:	08001bc8 	.word	0x08001bc8
 8001b9c:	08001bcc 	.word	0x08001bcc

08001ba0 <_init>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr

08001bac <_fini>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr
