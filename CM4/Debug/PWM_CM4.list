
PWM_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b69c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0810b940  0810b940  0000c940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810bde4  0810bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810bdec  0810bdec  0000cdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810bdf0  0810bdf0  0000cdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  10000000  0810bdf4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000324  100001d8  0810bfcc  0000d1d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100004fc  0810bfcc  0000d4fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001589f  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002803  00000000  00000000  00022aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001198  00000000  00000000  000252b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000db7  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acb4  00000000  00000000  000271ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015cba  00000000  00000000  00061eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185693  00000000  00000000  00077b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fd200  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006038  00000000  00000000  001fd244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020327c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001d8 	.word	0x100001d8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b924 	.word	0x0810b924

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001dc 	.word	0x100001dc
 81002dc:	0810b924 	.word	0x0810b924

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9be 	b.w	810112c <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	468e      	mov	lr, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	4688      	mov	r8, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d962      	bls.n	8100f10 <__udivmoddi4+0xdc>
 8100e4a:	fab2 f682 	clz	r6, r2
 8100e4e:	b14e      	cbz	r6, 8100e64 <__udivmoddi4+0x30>
 8100e50:	f1c6 0320 	rsb	r3, r6, #32
 8100e54:	fa01 f806 	lsl.w	r8, r1, r6
 8100e58:	fa20 f303 	lsr.w	r3, r0, r3
 8100e5c:	40b7      	lsls	r7, r6
 8100e5e:	ea43 0808 	orr.w	r8, r3, r8
 8100e62:	40b4      	lsls	r4, r6
 8100e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e68:	fa1f fc87 	uxth.w	ip, r7
 8100e6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8100e70:	0c23      	lsrs	r3, r4, #16
 8100e72:	fb0e 8811 	mls	r8, lr, r1, r8
 8100e76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e7a:	fb01 f20c 	mul.w	r2, r1, ip
 8100e7e:	429a      	cmp	r2, r3
 8100e80:	d909      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e82:	18fb      	adds	r3, r7, r3
 8100e84:	f101 30ff 	add.w	r0, r1, #4294967295
 8100e88:	f080 80ea 	bcs.w	8101060 <__udivmoddi4+0x22c>
 8100e8c:	429a      	cmp	r2, r3
 8100e8e:	f240 80e7 	bls.w	8101060 <__udivmoddi4+0x22c>
 8100e92:	3902      	subs	r1, #2
 8100e94:	443b      	add	r3, r7
 8100e96:	1a9a      	subs	r2, r3, r2
 8100e98:	b2a3      	uxth	r3, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100ea6:	fb00 fc0c 	mul.w	ip, r0, ip
 8100eaa:	459c      	cmp	ip, r3
 8100eac:	d909      	bls.n	8100ec2 <__udivmoddi4+0x8e>
 8100eae:	18fb      	adds	r3, r7, r3
 8100eb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb4:	f080 80d6 	bcs.w	8101064 <__udivmoddi4+0x230>
 8100eb8:	459c      	cmp	ip, r3
 8100eba:	f240 80d3 	bls.w	8101064 <__udivmoddi4+0x230>
 8100ebe:	443b      	add	r3, r7
 8100ec0:	3802      	subs	r0, #2
 8100ec2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec6:	eba3 030c 	sub.w	r3, r3, ip
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11d      	cbz	r5, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40f3      	lsrs	r3, r6
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	e9c5 3200 	strd	r3, r2, [r5]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d905      	bls.n	8100eea <__udivmoddi4+0xb6>
 8100ede:	b10d      	cbz	r5, 8100ee4 <__udivmoddi4+0xb0>
 8100ee0:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	4608      	mov	r0, r1
 8100ee8:	e7f5      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100eea:	fab3 f183 	clz	r1, r3
 8100eee:	2900      	cmp	r1, #0
 8100ef0:	d146      	bne.n	8100f80 <__udivmoddi4+0x14c>
 8100ef2:	4573      	cmp	r3, lr
 8100ef4:	d302      	bcc.n	8100efc <__udivmoddi4+0xc8>
 8100ef6:	4282      	cmp	r2, r0
 8100ef8:	f200 8105 	bhi.w	8101106 <__udivmoddi4+0x2d2>
 8100efc:	1a84      	subs	r4, r0, r2
 8100efe:	eb6e 0203 	sbc.w	r2, lr, r3
 8100f02:	2001      	movs	r0, #1
 8100f04:	4690      	mov	r8, r2
 8100f06:	2d00      	cmp	r5, #0
 8100f08:	d0e5      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f0a:	e9c5 4800 	strd	r4, r8, [r5]
 8100f0e:	e7e2      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	2a00      	cmp	r2, #0
 8100f12:	f000 8090 	beq.w	8101036 <__udivmoddi4+0x202>
 8100f16:	fab2 f682 	clz	r6, r2
 8100f1a:	2e00      	cmp	r6, #0
 8100f1c:	f040 80a4 	bne.w	8101068 <__udivmoddi4+0x234>
 8100f20:	1a8a      	subs	r2, r1, r2
 8100f22:	0c03      	lsrs	r3, r0, #16
 8100f24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f28:	b280      	uxth	r0, r0
 8100f2a:	b2bc      	uxth	r4, r7
 8100f2c:	2101      	movs	r1, #1
 8100f2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8100f32:	fb0e 221c 	mls	r2, lr, ip, r2
 8100f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100f3a:	fb04 f20c 	mul.w	r2, r4, ip
 8100f3e:	429a      	cmp	r2, r3
 8100f40:	d907      	bls.n	8100f52 <__udivmoddi4+0x11e>
 8100f42:	18fb      	adds	r3, r7, r3
 8100f44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100f48:	d202      	bcs.n	8100f50 <__udivmoddi4+0x11c>
 8100f4a:	429a      	cmp	r2, r3
 8100f4c:	f200 80e0 	bhi.w	8101110 <__udivmoddi4+0x2dc>
 8100f50:	46c4      	mov	ip, r8
 8100f52:	1a9b      	subs	r3, r3, r2
 8100f54:	fbb3 f2fe 	udiv	r2, r3, lr
 8100f58:	fb0e 3312 	mls	r3, lr, r2, r3
 8100f5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100f60:	fb02 f404 	mul.w	r4, r2, r4
 8100f64:	429c      	cmp	r4, r3
 8100f66:	d907      	bls.n	8100f78 <__udivmoddi4+0x144>
 8100f68:	18fb      	adds	r3, r7, r3
 8100f6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8100f6e:	d202      	bcs.n	8100f76 <__udivmoddi4+0x142>
 8100f70:	429c      	cmp	r4, r3
 8100f72:	f200 80ca 	bhi.w	810110a <__udivmoddi4+0x2d6>
 8100f76:	4602      	mov	r2, r0
 8100f78:	1b1b      	subs	r3, r3, r4
 8100f7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100f7e:	e7a5      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f80:	f1c1 0620 	rsb	r6, r1, #32
 8100f84:	408b      	lsls	r3, r1
 8100f86:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8a:	431f      	orrs	r7, r3
 8100f8c:	fa0e f401 	lsl.w	r4, lr, r1
 8100f90:	fa20 f306 	lsr.w	r3, r0, r6
 8100f94:	fa2e fe06 	lsr.w	lr, lr, r6
 8100f98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100f9c:	4323      	orrs	r3, r4
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	fa1f fc87 	uxth.w	ip, r7
 8100fa6:	fbbe f0f9 	udiv	r0, lr, r9
 8100faa:	0c1c      	lsrs	r4, r3, #16
 8100fac:	fb09 ee10 	mls	lr, r9, r0, lr
 8100fb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100fb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8100fb8:	45a6      	cmp	lr, r4
 8100fba:	fa02 f201 	lsl.w	r2, r2, r1
 8100fbe:	d909      	bls.n	8100fd4 <__udivmoddi4+0x1a0>
 8100fc0:	193c      	adds	r4, r7, r4
 8100fc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8100fc6:	f080 809c 	bcs.w	8101102 <__udivmoddi4+0x2ce>
 8100fca:	45a6      	cmp	lr, r4
 8100fcc:	f240 8099 	bls.w	8101102 <__udivmoddi4+0x2ce>
 8100fd0:	3802      	subs	r0, #2
 8100fd2:	443c      	add	r4, r7
 8100fd4:	eba4 040e 	sub.w	r4, r4, lr
 8100fd8:	fa1f fe83 	uxth.w	lr, r3
 8100fdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fe0:	fb09 4413 	mls	r4, r9, r3, r4
 8100fe4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8100fe8:	fb03 fc0c 	mul.w	ip, r3, ip
 8100fec:	45a4      	cmp	ip, r4
 8100fee:	d908      	bls.n	8101002 <__udivmoddi4+0x1ce>
 8100ff0:	193c      	adds	r4, r7, r4
 8100ff2:	f103 3eff 	add.w	lr, r3, #4294967295
 8100ff6:	f080 8082 	bcs.w	81010fe <__udivmoddi4+0x2ca>
 8100ffa:	45a4      	cmp	ip, r4
 8100ffc:	d97f      	bls.n	81010fe <__udivmoddi4+0x2ca>
 8100ffe:	3b02      	subs	r3, #2
 8101000:	443c      	add	r4, r7
 8101002:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8101006:	eba4 040c 	sub.w	r4, r4, ip
 810100a:	fba0 ec02 	umull	lr, ip, r0, r2
 810100e:	4564      	cmp	r4, ip
 8101010:	4673      	mov	r3, lr
 8101012:	46e1      	mov	r9, ip
 8101014:	d362      	bcc.n	81010dc <__udivmoddi4+0x2a8>
 8101016:	d05f      	beq.n	81010d8 <__udivmoddi4+0x2a4>
 8101018:	b15d      	cbz	r5, 8101032 <__udivmoddi4+0x1fe>
 810101a:	ebb8 0203 	subs.w	r2, r8, r3
 810101e:	eb64 0409 	sbc.w	r4, r4, r9
 8101022:	fa04 f606 	lsl.w	r6, r4, r6
 8101026:	fa22 f301 	lsr.w	r3, r2, r1
 810102a:	431e      	orrs	r6, r3
 810102c:	40cc      	lsrs	r4, r1
 810102e:	e9c5 6400 	strd	r6, r4, [r5]
 8101032:	2100      	movs	r1, #0
 8101034:	e74f      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8101036:	fbb1 fcf2 	udiv	ip, r1, r2
 810103a:	0c01      	lsrs	r1, r0, #16
 810103c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8101040:	b280      	uxth	r0, r0
 8101042:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8101046:	463b      	mov	r3, r7
 8101048:	4638      	mov	r0, r7
 810104a:	463c      	mov	r4, r7
 810104c:	46b8      	mov	r8, r7
 810104e:	46be      	mov	lr, r7
 8101050:	2620      	movs	r6, #32
 8101052:	fbb1 f1f7 	udiv	r1, r1, r7
 8101056:	eba2 0208 	sub.w	r2, r2, r8
 810105a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810105e:	e766      	b.n	8100f2e <__udivmoddi4+0xfa>
 8101060:	4601      	mov	r1, r0
 8101062:	e718      	b.n	8100e96 <__udivmoddi4+0x62>
 8101064:	4610      	mov	r0, r2
 8101066:	e72c      	b.n	8100ec2 <__udivmoddi4+0x8e>
 8101068:	f1c6 0220 	rsb	r2, r6, #32
 810106c:	fa2e f302 	lsr.w	r3, lr, r2
 8101070:	40b7      	lsls	r7, r6
 8101072:	40b1      	lsls	r1, r6
 8101074:	fa20 f202 	lsr.w	r2, r0, r2
 8101078:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810107c:	430a      	orrs	r2, r1
 810107e:	fbb3 f8fe 	udiv	r8, r3, lr
 8101082:	b2bc      	uxth	r4, r7
 8101084:	fb0e 3318 	mls	r3, lr, r8, r3
 8101088:	0c11      	lsrs	r1, r2, #16
 810108a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810108e:	fb08 f904 	mul.w	r9, r8, r4
 8101092:	40b0      	lsls	r0, r6
 8101094:	4589      	cmp	r9, r1
 8101096:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810109a:	b280      	uxth	r0, r0
 810109c:	d93e      	bls.n	810111c <__udivmoddi4+0x2e8>
 810109e:	1879      	adds	r1, r7, r1
 81010a0:	f108 3cff 	add.w	ip, r8, #4294967295
 81010a4:	d201      	bcs.n	81010aa <__udivmoddi4+0x276>
 81010a6:	4589      	cmp	r9, r1
 81010a8:	d81f      	bhi.n	81010ea <__udivmoddi4+0x2b6>
 81010aa:	eba1 0109 	sub.w	r1, r1, r9
 81010ae:	fbb1 f9fe 	udiv	r9, r1, lr
 81010b2:	fb09 f804 	mul.w	r8, r9, r4
 81010b6:	fb0e 1119 	mls	r1, lr, r9, r1
 81010ba:	b292      	uxth	r2, r2
 81010bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81010c0:	4542      	cmp	r2, r8
 81010c2:	d229      	bcs.n	8101118 <__udivmoddi4+0x2e4>
 81010c4:	18ba      	adds	r2, r7, r2
 81010c6:	f109 31ff 	add.w	r1, r9, #4294967295
 81010ca:	d2c4      	bcs.n	8101056 <__udivmoddi4+0x222>
 81010cc:	4542      	cmp	r2, r8
 81010ce:	d2c2      	bcs.n	8101056 <__udivmoddi4+0x222>
 81010d0:	f1a9 0102 	sub.w	r1, r9, #2
 81010d4:	443a      	add	r2, r7
 81010d6:	e7be      	b.n	8101056 <__udivmoddi4+0x222>
 81010d8:	45f0      	cmp	r8, lr
 81010da:	d29d      	bcs.n	8101018 <__udivmoddi4+0x1e4>
 81010dc:	ebbe 0302 	subs.w	r3, lr, r2
 81010e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 81010e4:	3801      	subs	r0, #1
 81010e6:	46e1      	mov	r9, ip
 81010e8:	e796      	b.n	8101018 <__udivmoddi4+0x1e4>
 81010ea:	eba7 0909 	sub.w	r9, r7, r9
 81010ee:	4449      	add	r1, r9
 81010f0:	f1a8 0c02 	sub.w	ip, r8, #2
 81010f4:	fbb1 f9fe 	udiv	r9, r1, lr
 81010f8:	fb09 f804 	mul.w	r8, r9, r4
 81010fc:	e7db      	b.n	81010b6 <__udivmoddi4+0x282>
 81010fe:	4673      	mov	r3, lr
 8101100:	e77f      	b.n	8101002 <__udivmoddi4+0x1ce>
 8101102:	4650      	mov	r0, sl
 8101104:	e766      	b.n	8100fd4 <__udivmoddi4+0x1a0>
 8101106:	4608      	mov	r0, r1
 8101108:	e6fd      	b.n	8100f06 <__udivmoddi4+0xd2>
 810110a:	443b      	add	r3, r7
 810110c:	3a02      	subs	r2, #2
 810110e:	e733      	b.n	8100f78 <__udivmoddi4+0x144>
 8101110:	f1ac 0c02 	sub.w	ip, ip, #2
 8101114:	443b      	add	r3, r7
 8101116:	e71c      	b.n	8100f52 <__udivmoddi4+0x11e>
 8101118:	4649      	mov	r1, r9
 810111a:	e79c      	b.n	8101056 <__udivmoddi4+0x222>
 810111c:	eba1 0109 	sub.w	r1, r1, r9
 8101120:	46c4      	mov	ip, r8
 8101122:	fbb1 f9fe 	udiv	r9, r1, lr
 8101126:	fb09 f804 	mul.w	r8, r9, r4
 810112a:	e7c4      	b.n	81010b6 <__udivmoddi4+0x282>

0810112c <__aeabi_idiv0>:
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop

08101130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101130:	b480      	push	{r7}
 8101132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101134:	4b09      	ldr	r3, [pc, #36]	@ (810115c <SystemInit+0x2c>)
 8101136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810113a:	4a08      	ldr	r2, [pc, #32]	@ (810115c <SystemInit+0x2c>)
 810113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101144:	4b05      	ldr	r3, [pc, #20]	@ (810115c <SystemInit+0x2c>)
 8101146:	691b      	ldr	r3, [r3, #16]
 8101148:	4a04      	ldr	r2, [pc, #16]	@ (810115c <SystemInit+0x2c>)
 810114a:	f043 0310 	orr.w	r3, r3, #16
 810114e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101150:	bf00      	nop
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	e000ed00 	.word	0xe000ed00

08101160 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8101160:	b480      	push	{r7}
 8101162:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8101164:	4b0a      	ldr	r3, [pc, #40]	@ (8101190 <ExitRun0Mode+0x30>)
 8101166:	68db      	ldr	r3, [r3, #12]
 8101168:	f023 0306 	bic.w	r3, r3, #6
 810116c:	4a08      	ldr	r2, [pc, #32]	@ (8101190 <ExitRun0Mode+0x30>)
 810116e:	f043 0302 	orr.w	r3, r3, #2
 8101172:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8101174:	bf00      	nop
 8101176:	4b06      	ldr	r3, [pc, #24]	@ (8101190 <ExitRun0Mode+0x30>)
 8101178:	685b      	ldr	r3, [r3, #4]
 810117a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810117e:	2b00      	cmp	r3, #0
 8101180:	d0f9      	beq.n	8101176 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8101182:	bf00      	nop
 8101184:	bf00      	nop
 8101186:	46bd      	mov	sp, r7
 8101188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810118c:	4770      	bx	lr
 810118e:	bf00      	nop
 8101190:	58024800 	.word	0x58024800
 8101194:	00000000 	.word	0x00000000

08101198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810119c:	b086      	sub	sp, #24
 810119e:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81011a0:	4b43      	ldr	r3, [pc, #268]	@ (81012b0 <main+0x118>)
 81011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011a6:	4a42      	ldr	r2, [pc, #264]	@ (81012b0 <main+0x118>)
 81011a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011b0:	4b3f      	ldr	r3, [pc, #252]	@ (81012b0 <main+0x118>)
 81011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81011ba:	603b      	str	r3, [r7, #0]
 81011bc:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011be:	2001      	movs	r0, #1
 81011c0:	f001 fa1c 	bl	81025fc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81011c4:	f001 faa6 	bl	8102714 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81011c8:	2201      	movs	r2, #1
 81011ca:	2102      	movs	r1, #2
 81011cc:	2000      	movs	r0, #0
 81011ce:	f001 fa27 	bl	8102620 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011d2:	4b38      	ldr	r3, [pc, #224]	@ (81012b4 <main+0x11c>)
 81011d4:	681b      	ldr	r3, [r3, #0]
 81011d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81011da:	2b70      	cmp	r3, #112	@ 0x70
 81011dc:	d108      	bne.n	81011f0 <main+0x58>
 81011de:	4b36      	ldr	r3, [pc, #216]	@ (81012b8 <main+0x120>)
 81011e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81011e4:	4a34      	ldr	r2, [pc, #208]	@ (81012b8 <main+0x120>)
 81011e6:	f043 0301 	orr.w	r3, r3, #1
 81011ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81011ee:	e007      	b.n	8101200 <main+0x68>
 81011f0:	4b31      	ldr	r3, [pc, #196]	@ (81012b8 <main+0x120>)
 81011f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81011f6:	4a30      	ldr	r2, [pc, #192]	@ (81012b8 <main+0x120>)
 81011f8:	f043 0301 	orr.w	r3, r3, #1
 81011fc:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101200:	f000 fe04 	bl	8101e0c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101204:	f000 f9f2 	bl	81015ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8101208:	f000 f86a 	bl	81012e0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 810120c:	f000 f9a2 	bl	8101554 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8101210:	f000 f912 	bl	8101438 <MX_TIM4_Init>
  MX_TIM6_Init();
 8101214:	f000 f966 	bl	81014e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8101218:	4828      	ldr	r0, [pc, #160]	@ (81012bc <main+0x124>)
 810121a:	f003 fae5 	bl	81047e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 810121e:	2100      	movs	r1, #0
 8101220:	4827      	ldr	r0, [pc, #156]	@ (81012c0 <main+0x128>)
 8101222:	f003 fbbb 	bl	810499c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_4);
 8101226:	210c      	movs	r1, #12
 8101228:	4826      	ldr	r0, [pc, #152]	@ (81012c4 <main+0x12c>)
 810122a:	f003 fd6b 	bl	8104d04 <HAL_TIM_Encoder_Start>
  TIM1->CCR1 = 300;
 810122e:	4b26      	ldr	r3, [pc, #152]	@ (81012c8 <main+0x130>)
 8101230:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8101234:	635a      	str	r2, [r3, #52]	@ 0x34
  int i= TIM1->CCR1;
 8101236:	4b24      	ldr	r3, [pc, #144]	@ (81012c8 <main+0x130>)
 8101238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810123a:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* External Led Toggle */
	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 810123c:	2201      	movs	r2, #1
 810123e:	2101      	movs	r1, #1
 8101240:	4822      	ldr	r0, [pc, #136]	@ (81012cc <main+0x134>)
 8101242:	f001 f98d 	bl	8102560 <HAL_GPIO_WritePin>
	 	  HAL_Delay(100);
 8101246:	2064      	movs	r0, #100	@ 0x64
 8101248:	f000 fe94 	bl	8101f74 <HAL_Delay>
	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 810124c:	2200      	movs	r2, #0
 810124e:	2101      	movs	r1, #1
 8101250:	481e      	ldr	r0, [pc, #120]	@ (81012cc <main+0x134>)
 8101252:	f001 f985 	bl	8102560 <HAL_GPIO_WritePin>
	 	  HAL_Delay(100);
 8101256:	2064      	movs	r0, #100	@ 0x64
 8101258:	f000 fe8c 	bl	8101f74 <HAL_Delay>

		     printf("Angolo : %.2f° | Velocità : %.2f RPM | Duty cycle : %.2f%%\r\n", delta_angle, speed, (i / 999.0) * 100);
 810125c:	4b1c      	ldr	r3, [pc, #112]	@ (81012d0 <main+0x138>)
 810125e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8101262:	4b1c      	ldr	r3, [pc, #112]	@ (81012d4 <main+0x13c>)
 8101264:	e9d3 4500 	ldrd	r4, r5, [r3]
 8101268:	6878      	ldr	r0, [r7, #4]
 810126a:	f7ff f9e3 	bl	8100634 <__aeabi_i2d>
 810126e:	a30e      	add	r3, pc, #56	@ (adr r3, 81012a8 <main+0x110>)
 8101270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101274:	f7ff fb72 	bl	810095c <__aeabi_ddiv>
 8101278:	4602      	mov	r2, r0
 810127a:	460b      	mov	r3, r1
 810127c:	4610      	mov	r0, r2
 810127e:	4619      	mov	r1, r3
 8101280:	f04f 0200 	mov.w	r2, #0
 8101284:	4b14      	ldr	r3, [pc, #80]	@ (81012d8 <main+0x140>)
 8101286:	f7ff fa3f 	bl	8100708 <__aeabi_dmul>
 810128a:	4602      	mov	r2, r0
 810128c:	460b      	mov	r3, r1
 810128e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101292:	e9cd 4500 	strd	r4, r5, [sp]
 8101296:	4642      	mov	r2, r8
 8101298:	464b      	mov	r3, r9
 810129a:	4810      	ldr	r0, [pc, #64]	@ (81012dc <main+0x144>)
 810129c:	f006 feec 	bl	8108078 <iprintf>
	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 81012a0:	bf00      	nop
 81012a2:	e7cb      	b.n	810123c <main+0xa4>
 81012a4:	f3af 8000 	nop.w
 81012a8:	00000000 	.word	0x00000000
 81012ac:	408f3800 	.word	0x408f3800
 81012b0:	58024400 	.word	0x58024400
 81012b4:	e000ed00 	.word	0xe000ed00
 81012b8:	58026400 	.word	0x58026400
 81012bc:	1000028c 	.word	0x1000028c
 81012c0:	100001f4 	.word	0x100001f4
 81012c4:	10000240 	.word	0x10000240
 81012c8:	40010000 	.word	0x40010000
 81012cc:	58020400 	.word	0x58020400
 81012d0:	10000370 	.word	0x10000370
 81012d4:	10000380 	.word	0x10000380
 81012d8:	40590000 	.word	0x40590000
 81012dc:	0810b940 	.word	0x0810b940

081012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81012e0:	b580      	push	{r7, lr}
 81012e2:	b09a      	sub	sp, #104	@ 0x68
 81012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81012e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 81012ea:	2200      	movs	r2, #0
 81012ec:	601a      	str	r2, [r3, #0]
 81012ee:	605a      	str	r2, [r3, #4]
 81012f0:	609a      	str	r2, [r3, #8]
 81012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81012f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81012f8:	2200      	movs	r2, #0
 81012fa:	601a      	str	r2, [r3, #0]
 81012fc:	605a      	str	r2, [r3, #4]
 81012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101300:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101304:	2200      	movs	r2, #0
 8101306:	601a      	str	r2, [r3, #0]
 8101308:	605a      	str	r2, [r3, #4]
 810130a:	609a      	str	r2, [r3, #8]
 810130c:	60da      	str	r2, [r3, #12]
 810130e:	611a      	str	r2, [r3, #16]
 8101310:	615a      	str	r2, [r3, #20]
 8101312:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101314:	1d3b      	adds	r3, r7, #4
 8101316:	222c      	movs	r2, #44	@ 0x2c
 8101318:	2100      	movs	r1, #0
 810131a:	4618      	mov	r0, r3
 810131c:	f006 ff23 	bl	8108166 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101320:	4b43      	ldr	r3, [pc, #268]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101322:	4a44      	ldr	r2, [pc, #272]	@ (8101434 <MX_TIM1_Init+0x154>)
 8101324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8101326:	4b42      	ldr	r3, [pc, #264]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101328:	22ef      	movs	r2, #239	@ 0xef
 810132a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810132c:	4b40      	ldr	r3, [pc, #256]	@ (8101430 <MX_TIM1_Init+0x150>)
 810132e:	2200      	movs	r2, #0
 8101330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8101332:	4b3f      	ldr	r3, [pc, #252]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101334:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101338:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810133a:	4b3d      	ldr	r3, [pc, #244]	@ (8101430 <MX_TIM1_Init+0x150>)
 810133c:	2200      	movs	r2, #0
 810133e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101340:	4b3b      	ldr	r3, [pc, #236]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101342:	2200      	movs	r2, #0
 8101344:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101346:	4b3a      	ldr	r3, [pc, #232]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101348:	2200      	movs	r2, #0
 810134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810134c:	4838      	ldr	r0, [pc, #224]	@ (8101430 <MX_TIM1_Init+0x150>)
 810134e:	f003 f9f3 	bl	8104738 <HAL_TIM_Base_Init>
 8101352:	4603      	mov	r3, r0
 8101354:	2b00      	cmp	r3, #0
 8101356:	d001      	beq.n	810135c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101358:	f000 fad4 	bl	8101904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101360:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101362:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101366:	4619      	mov	r1, r3
 8101368:	4831      	ldr	r0, [pc, #196]	@ (8101430 <MX_TIM1_Init+0x150>)
 810136a:	f003 ff75 	bl	8105258 <HAL_TIM_ConfigClockSource>
 810136e:	4603      	mov	r3, r0
 8101370:	2b00      	cmp	r3, #0
 8101372:	d001      	beq.n	8101378 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101374:	f000 fac6 	bl	8101904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101378:	482d      	ldr	r0, [pc, #180]	@ (8101430 <MX_TIM1_Init+0x150>)
 810137a:	f003 faad 	bl	81048d8 <HAL_TIM_PWM_Init>
 810137e:	4603      	mov	r3, r0
 8101380:	2b00      	cmp	r3, #0
 8101382:	d001      	beq.n	8101388 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101384:	f000 fabe 	bl	8101904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101388:	2300      	movs	r3, #0
 810138a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810138c:	2300      	movs	r3, #0
 810138e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101390:	2300      	movs	r3, #0
 8101392:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101394:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8101398:	4619      	mov	r1, r3
 810139a:	4825      	ldr	r0, [pc, #148]	@ (8101430 <MX_TIM1_Init+0x150>)
 810139c:	f004 fcb4 	bl	8105d08 <HAL_TIMEx_MasterConfigSynchronization>
 81013a0:	4603      	mov	r3, r0
 81013a2:	2b00      	cmp	r3, #0
 81013a4:	d001      	beq.n	81013aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81013a6:	f000 faad 	bl	8101904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81013aa:	2360      	movs	r3, #96	@ 0x60
 81013ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 250;
 81013ae:	23fa      	movs	r3, #250	@ 0xfa
 81013b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81013b2:	2300      	movs	r3, #0
 81013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81013b6:	2300      	movs	r3, #0
 81013b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81013ba:	2300      	movs	r3, #0
 81013bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81013be:	2300      	movs	r3, #0
 81013c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81013c2:	2300      	movs	r3, #0
 81013c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81013c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81013ca:	2200      	movs	r2, #0
 81013cc:	4619      	mov	r1, r3
 81013ce:	4818      	ldr	r0, [pc, #96]	@ (8101430 <MX_TIM1_Init+0x150>)
 81013d0:	f003 fe2e 	bl	8105030 <HAL_TIM_PWM_ConfigChannel>
 81013d4:	4603      	mov	r3, r0
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d001      	beq.n	81013de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81013da:	f000 fa93 	bl	8101904 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81013de:	2300      	movs	r3, #0
 81013e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81013e2:	2300      	movs	r3, #0
 81013e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81013e6:	2300      	movs	r3, #0
 81013e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81013ea:	2300      	movs	r3, #0
 81013ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81013ee:	2300      	movs	r3, #0
 81013f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81013f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81013f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81013f8:	2300      	movs	r3, #0
 81013fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81013fc:	2300      	movs	r3, #0
 81013fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101404:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101406:	2300      	movs	r3, #0
 8101408:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810140a:	2300      	movs	r3, #0
 810140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810140e:	1d3b      	adds	r3, r7, #4
 8101410:	4619      	mov	r1, r3
 8101412:	4807      	ldr	r0, [pc, #28]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101414:	f004 fd06 	bl	8105e24 <HAL_TIMEx_ConfigBreakDeadTime>
 8101418:	4603      	mov	r3, r0
 810141a:	2b00      	cmp	r3, #0
 810141c:	d001      	beq.n	8101422 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 810141e:	f000 fa71 	bl	8101904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101422:	4803      	ldr	r0, [pc, #12]	@ (8101430 <MX_TIM1_Init+0x150>)
 8101424:	f000 fb18 	bl	8101a58 <HAL_TIM_MspPostInit>

}
 8101428:	bf00      	nop
 810142a:	3768      	adds	r7, #104	@ 0x68
 810142c:	46bd      	mov	sp, r7
 810142e:	bd80      	pop	{r7, pc}
 8101430:	100001f4 	.word	0x100001f4
 8101434:	40010000 	.word	0x40010000

08101438 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101438:	b580      	push	{r7, lr}
 810143a:	b08c      	sub	sp, #48	@ 0x30
 810143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810143e:	f107 030c 	add.w	r3, r7, #12
 8101442:	2224      	movs	r2, #36	@ 0x24
 8101444:	2100      	movs	r1, #0
 8101446:	4618      	mov	r0, r3
 8101448:	f006 fe8d 	bl	8108166 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810144c:	463b      	mov	r3, r7
 810144e:	2200      	movs	r2, #0
 8101450:	601a      	str	r2, [r3, #0]
 8101452:	605a      	str	r2, [r3, #4]
 8101454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101456:	4b21      	ldr	r3, [pc, #132]	@ (81014dc <MX_TIM4_Init+0xa4>)
 8101458:	4a21      	ldr	r2, [pc, #132]	@ (81014e0 <MX_TIM4_Init+0xa8>)
 810145a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 810145c:	4b1f      	ldr	r3, [pc, #124]	@ (81014dc <MX_TIM4_Init+0xa4>)
 810145e:	2200      	movs	r2, #0
 8101460:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101462:	4b1e      	ldr	r3, [pc, #120]	@ (81014dc <MX_TIM4_Init+0xa4>)
 8101464:	2200      	movs	r2, #0
 8101466:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2652-1;
 8101468:	4b1c      	ldr	r3, [pc, #112]	@ (81014dc <MX_TIM4_Init+0xa4>)
 810146a:	f640 225b 	movw	r2, #2651	@ 0xa5b
 810146e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101470:	4b1a      	ldr	r3, [pc, #104]	@ (81014dc <MX_TIM4_Init+0xa4>)
 8101472:	2200      	movs	r2, #0
 8101474:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101476:	4b19      	ldr	r3, [pc, #100]	@ (81014dc <MX_TIM4_Init+0xa4>)
 8101478:	2200      	movs	r2, #0
 810147a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810147c:	2303      	movs	r3, #3
 810147e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101480:	2300      	movs	r3, #0
 8101482:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101484:	2301      	movs	r3, #1
 8101486:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101488:	2300      	movs	r3, #0
 810148a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 810148c:	230a      	movs	r3, #10
 810148e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8101490:	2300      	movs	r3, #0
 8101492:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101494:	2301      	movs	r3, #1
 8101496:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101498:	2300      	movs	r3, #0
 810149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 810149c:	2300      	movs	r3, #0
 810149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 81014a0:	f107 030c 	add.w	r3, r7, #12
 81014a4:	4619      	mov	r1, r3
 81014a6:	480d      	ldr	r0, [pc, #52]	@ (81014dc <MX_TIM4_Init+0xa4>)
 81014a8:	f003 fb86 	bl	8104bb8 <HAL_TIM_Encoder_Init>
 81014ac:	4603      	mov	r3, r0
 81014ae:	2b00      	cmp	r3, #0
 81014b0:	d001      	beq.n	81014b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 81014b2:	f000 fa27 	bl	8101904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81014b6:	2300      	movs	r3, #0
 81014b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81014ba:	2300      	movs	r3, #0
 81014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81014be:	463b      	mov	r3, r7
 81014c0:	4619      	mov	r1, r3
 81014c2:	4806      	ldr	r0, [pc, #24]	@ (81014dc <MX_TIM4_Init+0xa4>)
 81014c4:	f004 fc20 	bl	8105d08 <HAL_TIMEx_MasterConfigSynchronization>
 81014c8:	4603      	mov	r3, r0
 81014ca:	2b00      	cmp	r3, #0
 81014cc:	d001      	beq.n	81014d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 81014ce:	f000 fa19 	bl	8101904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81014d2:	bf00      	nop
 81014d4:	3730      	adds	r7, #48	@ 0x30
 81014d6:	46bd      	mov	sp, r7
 81014d8:	bd80      	pop	{r7, pc}
 81014da:	bf00      	nop
 81014dc:	10000240 	.word	0x10000240
 81014e0:	40000800 	.word	0x40000800

081014e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 81014e4:	b580      	push	{r7, lr}
 81014e6:	b084      	sub	sp, #16
 81014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81014ea:	1d3b      	adds	r3, r7, #4
 81014ec:	2200      	movs	r2, #0
 81014ee:	601a      	str	r2, [r3, #0]
 81014f0:	605a      	str	r2, [r3, #4]
 81014f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 81014f4:	4b15      	ldr	r3, [pc, #84]	@ (810154c <MX_TIM6_Init+0x68>)
 81014f6:	4a16      	ldr	r2, [pc, #88]	@ (8101550 <MX_TIM6_Init+0x6c>)
 81014f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2400-1;
 81014fa:	4b14      	ldr	r3, [pc, #80]	@ (810154c <MX_TIM6_Init+0x68>)
 81014fc:	f640 125f 	movw	r2, #2399	@ 0x95f
 8101500:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101502:	4b12      	ldr	r3, [pc, #72]	@ (810154c <MX_TIM6_Init+0x68>)
 8101504:	2200      	movs	r2, #0
 8101506:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8101508:	4b10      	ldr	r3, [pc, #64]	@ (810154c <MX_TIM6_Init+0x68>)
 810150a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810150e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101510:	4b0e      	ldr	r3, [pc, #56]	@ (810154c <MX_TIM6_Init+0x68>)
 8101512:	2200      	movs	r2, #0
 8101514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8101516:	480d      	ldr	r0, [pc, #52]	@ (810154c <MX_TIM6_Init+0x68>)
 8101518:	f003 f90e 	bl	8104738 <HAL_TIM_Base_Init>
 810151c:	4603      	mov	r3, r0
 810151e:	2b00      	cmp	r3, #0
 8101520:	d001      	beq.n	8101526 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8101522:	f000 f9ef 	bl	8101904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101526:	2300      	movs	r3, #0
 8101528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810152a:	2300      	movs	r3, #0
 810152c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 810152e:	1d3b      	adds	r3, r7, #4
 8101530:	4619      	mov	r1, r3
 8101532:	4806      	ldr	r0, [pc, #24]	@ (810154c <MX_TIM6_Init+0x68>)
 8101534:	f004 fbe8 	bl	8105d08 <HAL_TIMEx_MasterConfigSynchronization>
 8101538:	4603      	mov	r3, r0
 810153a:	2b00      	cmp	r3, #0
 810153c:	d001      	beq.n	8101542 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 810153e:	f000 f9e1 	bl	8101904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8101542:	bf00      	nop
 8101544:	3710      	adds	r7, #16
 8101546:	46bd      	mov	sp, r7
 8101548:	bd80      	pop	{r7, pc}
 810154a:	bf00      	nop
 810154c:	1000028c 	.word	0x1000028c
 8101550:	40001000 	.word	0x40001000

08101554 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101554:	b580      	push	{r7, lr}
 8101556:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101558:	4b22      	ldr	r3, [pc, #136]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 810155a:	4a23      	ldr	r2, [pc, #140]	@ (81015e8 <MX_USART3_UART_Init+0x94>)
 810155c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810155e:	4b21      	ldr	r3, [pc, #132]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101564:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101566:	4b1f      	ldr	r3, [pc, #124]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101568:	2200      	movs	r2, #0
 810156a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810156c:	4b1d      	ldr	r3, [pc, #116]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 810156e:	2200      	movs	r2, #0
 8101570:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101572:	4b1c      	ldr	r3, [pc, #112]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101574:	2200      	movs	r2, #0
 8101576:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101578:	4b1a      	ldr	r3, [pc, #104]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 810157a:	220c      	movs	r2, #12
 810157c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810157e:	4b19      	ldr	r3, [pc, #100]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101580:	2200      	movs	r2, #0
 8101582:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101584:	4b17      	ldr	r3, [pc, #92]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101586:	2200      	movs	r2, #0
 8101588:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810158a:	4b16      	ldr	r3, [pc, #88]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 810158c:	2200      	movs	r2, #0
 810158e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101590:	4b14      	ldr	r3, [pc, #80]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101592:	2200      	movs	r2, #0
 8101594:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101596:	4b13      	ldr	r3, [pc, #76]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 8101598:	2200      	movs	r2, #0
 810159a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810159c:	4811      	ldr	r0, [pc, #68]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 810159e:	f004 fcdd 	bl	8105f5c <HAL_UART_Init>
 81015a2:	4603      	mov	r3, r0
 81015a4:	2b00      	cmp	r3, #0
 81015a6:	d001      	beq.n	81015ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81015a8:	f000 f9ac 	bl	8101904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81015ac:	2100      	movs	r1, #0
 81015ae:	480d      	ldr	r0, [pc, #52]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 81015b0:	f005 fd72 	bl	8107098 <HAL_UARTEx_SetTxFifoThreshold>
 81015b4:	4603      	mov	r3, r0
 81015b6:	2b00      	cmp	r3, #0
 81015b8:	d001      	beq.n	81015be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81015ba:	f000 f9a3 	bl	8101904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81015be:	2100      	movs	r1, #0
 81015c0:	4808      	ldr	r0, [pc, #32]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 81015c2:	f005 fda7 	bl	8107114 <HAL_UARTEx_SetRxFifoThreshold>
 81015c6:	4603      	mov	r3, r0
 81015c8:	2b00      	cmp	r3, #0
 81015ca:	d001      	beq.n	81015d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81015cc:	f000 f99a 	bl	8101904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81015d0:	4804      	ldr	r0, [pc, #16]	@ (81015e4 <MX_USART3_UART_Init+0x90>)
 81015d2:	f005 fd28 	bl	8107026 <HAL_UARTEx_DisableFifoMode>
 81015d6:	4603      	mov	r3, r0
 81015d8:	2b00      	cmp	r3, #0
 81015da:	d001      	beq.n	81015e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81015dc:	f000 f992 	bl	8101904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81015e0:	bf00      	nop
 81015e2:	bd80      	pop	{r7, pc}
 81015e4:	100002d8 	.word	0x100002d8
 81015e8:	40004800 	.word	0x40004800

081015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81015ec:	b580      	push	{r7, lr}
 81015ee:	b08a      	sub	sp, #40	@ 0x28
 81015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015f2:	f107 0314 	add.w	r3, r7, #20
 81015f6:	2200      	movs	r2, #0
 81015f8:	601a      	str	r2, [r3, #0]
 81015fa:	605a      	str	r2, [r3, #4]
 81015fc:	609a      	str	r2, [r3, #8]
 81015fe:	60da      	str	r2, [r3, #12]
 8101600:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101602:	4b45      	ldr	r3, [pc, #276]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101608:	4a43      	ldr	r2, [pc, #268]	@ (8101718 <MX_GPIO_Init+0x12c>)
 810160a:	f043 0304 	orr.w	r3, r3, #4
 810160e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101612:	4b41      	ldr	r3, [pc, #260]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101618:	f003 0304 	and.w	r3, r3, #4
 810161c:	613b      	str	r3, [r7, #16]
 810161e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101620:	4b3d      	ldr	r3, [pc, #244]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101626:	4a3c      	ldr	r2, [pc, #240]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101628:	f043 0301 	orr.w	r3, r3, #1
 810162c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101630:	4b39      	ldr	r3, [pc, #228]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101636:	f003 0301 	and.w	r3, r3, #1
 810163a:	60fb      	str	r3, [r7, #12]
 810163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810163e:	4b36      	ldr	r3, [pc, #216]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101644:	4a34      	ldr	r2, [pc, #208]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101646:	f043 0302 	orr.w	r3, r3, #2
 810164a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810164e:	4b32      	ldr	r3, [pc, #200]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101654:	f003 0302 	and.w	r3, r3, #2
 8101658:	60bb      	str	r3, [r7, #8]
 810165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810165c:	4b2e      	ldr	r3, [pc, #184]	@ (8101718 <MX_GPIO_Init+0x12c>)
 810165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101662:	4a2d      	ldr	r2, [pc, #180]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101664:	f043 0310 	orr.w	r3, r3, #16
 8101668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810166c:	4b2a      	ldr	r3, [pc, #168]	@ (8101718 <MX_GPIO_Init+0x12c>)
 810166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101672:	f003 0310 	and.w	r3, r3, #16
 8101676:	607b      	str	r3, [r7, #4]
 8101678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810167a:	4b27      	ldr	r3, [pc, #156]	@ (8101718 <MX_GPIO_Init+0x12c>)
 810167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101680:	4a25      	ldr	r2, [pc, #148]	@ (8101718 <MX_GPIO_Init+0x12c>)
 8101682:	f043 0308 	orr.w	r3, r3, #8
 8101686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810168a:	4b23      	ldr	r3, [pc, #140]	@ (8101718 <MX_GPIO_Init+0x12c>)
 810168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101690:	f003 0308 	and.w	r3, r3, #8
 8101694:	603b      	str	r3, [r7, #0]
 8101696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101698:	2200      	movs	r2, #0
 810169a:	2110      	movs	r1, #16
 810169c:	481f      	ldr	r0, [pc, #124]	@ (810171c <MX_GPIO_Init+0x130>)
 810169e:	f000 ff5f 	bl	8102560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81016a2:	2200      	movs	r2, #0
 81016a4:	2101      	movs	r1, #1
 81016a6:	481e      	ldr	r0, [pc, #120]	@ (8101720 <MX_GPIO_Init+0x134>)
 81016a8:	f000 ff5a 	bl	8102560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 81016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81016b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 81016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016b8:	2300      	movs	r3, #0
 81016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81016bc:	f107 0314 	add.w	r3, r7, #20
 81016c0:	4619      	mov	r1, r3
 81016c2:	4818      	ldr	r0, [pc, #96]	@ (8101724 <MX_GPIO_Init+0x138>)
 81016c4:	f000 fd9c 	bl	8102200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 81016c8:	2310      	movs	r3, #16
 81016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81016cc:	2301      	movs	r3, #1
 81016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016d0:	2300      	movs	r3, #0
 81016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016d4:	2300      	movs	r3, #0
 81016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81016d8:	f107 0314 	add.w	r3, r7, #20
 81016dc:	4619      	mov	r1, r3
 81016de:	480f      	ldr	r0, [pc, #60]	@ (810171c <MX_GPIO_Init+0x130>)
 81016e0:	f000 fd8e 	bl	8102200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81016e4:	2301      	movs	r3, #1
 81016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81016e8:	2301      	movs	r3, #1
 81016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016ec:	2300      	movs	r3, #0
 81016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f0:	2300      	movs	r3, #0
 81016f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81016f4:	f107 0314 	add.w	r3, r7, #20
 81016f8:	4619      	mov	r1, r3
 81016fa:	4809      	ldr	r0, [pc, #36]	@ (8101720 <MX_GPIO_Init+0x134>)
 81016fc:	f000 fd80 	bl	8102200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8101700:	2200      	movs	r2, #0
 8101702:	2101      	movs	r1, #1
 8101704:	2028      	movs	r0, #40	@ 0x28
 8101706:	f000 fd34 	bl	8102172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 810170a:	2028      	movs	r0, #40	@ 0x28
 810170c:	f000 fd4b 	bl	81021a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8101710:	bf00      	nop
 8101712:	3728      	adds	r7, #40	@ 0x28
 8101714:	46bd      	mov	sp, r7
 8101716:	bd80      	pop	{r7, pc}
 8101718:	58024400 	.word	0x58024400
 810171c:	58020000 	.word	0x58020000
 8101720:	58020400 	.word	0x58020400
 8101724:	58020800 	.word	0x58020800

08101728 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8101728:	b580      	push	{r7, lr}
 810172a:	b082      	sub	sp, #8
 810172c:	af00      	add	r7, sp, #0
 810172e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8101730:	1d39      	adds	r1, r7, #4
 8101732:	f04f 33ff 	mov.w	r3, #4294967295
 8101736:	2201      	movs	r2, #1
 8101738:	4803      	ldr	r0, [pc, #12]	@ (8101748 <__io_putchar+0x20>)
 810173a:	f004 fc5f 	bl	8105ffc <HAL_UART_Transmit>
    return ch;
 810173e:	687b      	ldr	r3, [r7, #4]
}
 8101740:	4618      	mov	r0, r3
 8101742:	3708      	adds	r7, #8
 8101744:	46bd      	mov	sp, r7
 8101746:	bd80      	pop	{r7, pc}
 8101748:	100002d8 	.word	0x100002d8

0810174c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 810174c:	b580      	push	{r7, lr}
 810174e:	b082      	sub	sp, #8
 8101750:	af00      	add	r7, sp, #0
 8101752:	4603      	mov	r3, r0
 8101754:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == GPIO_PIN_13)
 8101756:	88fb      	ldrh	r3, [r7, #6]
 8101758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810175c:	d103      	bne.n	8101766 <HAL_GPIO_EXTI_Callback+0x1a>
HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4); // cambia motion direzione
 810175e:	2110      	movs	r1, #16
 8101760:	4803      	ldr	r0, [pc, #12]	@ (8101770 <HAL_GPIO_EXTI_Callback+0x24>)
 8101762:	f000 ff16 	bl	8102592 <HAL_GPIO_TogglePin>
}
 8101766:	bf00      	nop
 8101768:	3708      	adds	r7, #8
 810176a:	46bd      	mov	sp, r7
 810176c:	bd80      	pop	{r7, pc}
 810176e:	bf00      	nop
 8101770:	58020000 	.word	0x58020000
 8101774:	00000000 	.word	0x00000000

08101778 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8101778:	b580      	push	{r7, lr}
 810177a:	b082      	sub	sp, #8
 810177c:	af00      	add	r7, sp, #0
 810177e:	6078      	str	r0, [r7, #4]

	// la callback è stato configurato per generare l'interrupt ogni 10ms
 if (htim == &htim6)
 8101780:	687b      	ldr	r3, [r7, #4]
 8101782:	4a53      	ldr	r2, [pc, #332]	@ (81018d0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8101784:	4293      	cmp	r3, r2
 8101786:	f040 8095 	bne.w	81018b4 <HAL_TIM_PeriodElapsedCallback+0x13c>
  {

  dt = 0.01;
 810178a:	4952      	ldr	r1, [pc, #328]	@ (81018d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 810178c:	a34c      	add	r3, pc, #304	@ (adr r3, 81018c0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 810178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101792:	e9c1 2300 	strd	r2, r3, [r1]
	     /* counts è il valore dell'encoder, che varia in base alla velocità del motore
	      * 2652 è il valore massimo ottenuto con il calcolo
	      * counter period = ppr x gear ratio x encoder resolution
	      * dunque il gioco sara di trovare in base a count l'angolo equivalente*/

        counts = TIM4 -> CNT;
 8101796:	4b50      	ldr	r3, [pc, #320]	@ (81018d8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8101798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810179a:	461a      	mov	r2, r3
 810179c:	4b4f      	ldr	r3, [pc, #316]	@ (81018dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 810179e:	601a      	str	r2, [r3, #0]
	    delta_angle = (double) counts *360/ 2652;
 81017a0:	4b4e      	ldr	r3, [pc, #312]	@ (81018dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 81017a2:	681b      	ldr	r3, [r3, #0]
 81017a4:	4618      	mov	r0, r3
 81017a6:	f7fe ff45 	bl	8100634 <__aeabi_i2d>
 81017aa:	f04f 0200 	mov.w	r2, #0
 81017ae:	4b4c      	ldr	r3, [pc, #304]	@ (81018e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 81017b0:	f7fe ffaa 	bl	8100708 <__aeabi_dmul>
 81017b4:	4602      	mov	r2, r0
 81017b6:	460b      	mov	r3, r1
 81017b8:	4610      	mov	r0, r2
 81017ba:	4619      	mov	r1, r3
 81017bc:	a342      	add	r3, pc, #264	@ (adr r3, 81018c8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 81017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017c2:	f7ff f8cb 	bl	810095c <__aeabi_ddiv>
 81017c6:	4602      	mov	r2, r0
 81017c8:	460b      	mov	r3, r1
 81017ca:	4946      	ldr	r1, [pc, #280]	@ (81018e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 81017cc:	e9c1 2300 	strd	r2, r3, [r1]

	     // calcolo della differenza d'angolo
	     diff_angle = delta_angle - old_delta_angle;
 81017d0:	4b44      	ldr	r3, [pc, #272]	@ (81018e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 81017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 81017d6:	4b44      	ldr	r3, [pc, #272]	@ (81018e8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 81017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017dc:	f7fe fddc 	bl	8100398 <__aeabi_dsub>
 81017e0:	4602      	mov	r2, r0
 81017e2:	460b      	mov	r3, r1
 81017e4:	4941      	ldr	r1, [pc, #260]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 81017e6:	e9c1 2300 	strd	r2, r3, [r1]

	      /*Correzione della differenza d'angolo in funzione della direzione
	      * ---> Stessa direzione: nessuna correzione necessaria*/
	     if (dir == old_dir) {
 81017ea:	4b41      	ldr	r3, [pc, #260]	@ (81018f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 81017ec:	681a      	ldr	r2, [r3, #0]
 81017ee:	4b41      	ldr	r3, [pc, #260]	@ (81018f4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	429a      	cmp	r2, r3
 81017f4:	d03a      	beq.n	810186c <HAL_TIM_PeriodElapsedCallback+0xf4>

	    	 //Cambio di direzione: correzione per evitare salti
	     } else if (dir == 1 && diff_angle > 0) {
 81017f6:	4b3e      	ldr	r3, [pc, #248]	@ (81018f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 81017f8:	681b      	ldr	r3, [r3, #0]
 81017fa:	2b01      	cmp	r3, #1
 81017fc:	d119      	bne.n	8101832 <HAL_TIM_PeriodElapsedCallback+0xba>
 81017fe:	4b3b      	ldr	r3, [pc, #236]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8101800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101804:	f04f 0200 	mov.w	r2, #0
 8101808:	f04f 0300 	mov.w	r3, #0
 810180c:	f7ff fa0c 	bl	8100c28 <__aeabi_dcmpgt>
 8101810:	4603      	mov	r3, r0
 8101812:	2b00      	cmp	r3, #0
 8101814:	d00d      	beq.n	8101832 <HAL_TIM_PeriodElapsedCallback+0xba>

	         diff_angle -= 360.0;
 8101816:	4b35      	ldr	r3, [pc, #212]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8101818:	e9d3 0100 	ldrd	r0, r1, [r3]
 810181c:	f04f 0200 	mov.w	r2, #0
 8101820:	4b2f      	ldr	r3, [pc, #188]	@ (81018e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8101822:	f7fe fdb9 	bl	8100398 <__aeabi_dsub>
 8101826:	4602      	mov	r2, r0
 8101828:	460b      	mov	r3, r1
 810182a:	4930      	ldr	r1, [pc, #192]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 810182c:	e9c1 2300 	strd	r2, r3, [r1]
 8101830:	e01c      	b.n	810186c <HAL_TIM_PeriodElapsedCallback+0xf4>

	        //Cambio di direzione: correzione per evitare salti
	     } else if (dir == 0 && diff_angle < 0) {
 8101832:	4b2f      	ldr	r3, [pc, #188]	@ (81018f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	2b00      	cmp	r3, #0
 8101838:	d118      	bne.n	810186c <HAL_TIM_PeriodElapsedCallback+0xf4>
 810183a:	4b2c      	ldr	r3, [pc, #176]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 810183c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101840:	f04f 0200 	mov.w	r2, #0
 8101844:	f04f 0300 	mov.w	r3, #0
 8101848:	f7ff f9d0 	bl	8100bec <__aeabi_dcmplt>
 810184c:	4603      	mov	r3, r0
 810184e:	2b00      	cmp	r3, #0
 8101850:	d00c      	beq.n	810186c <HAL_TIM_PeriodElapsedCallback+0xf4>

	         diff_angle += 360.0;
 8101852:	4b26      	ldr	r3, [pc, #152]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8101854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101858:	f04f 0200 	mov.w	r2, #0
 810185c:	4b20      	ldr	r3, [pc, #128]	@ (81018e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 810185e:	f7fe fd9d 	bl	810039c <__adddf3>
 8101862:	4602      	mov	r2, r0
 8101864:	460b      	mov	r3, r1
 8101866:	4921      	ldr	r1, [pc, #132]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8101868:	e9c1 2300 	strd	r2, r3, [r1]

	     }

	     // Calcolo della velocità in gradi al secondo
	     speed_degsec = diff_angle / dt;
 810186c:	4b1f      	ldr	r3, [pc, #124]	@ (81018ec <HAL_TIM_PeriodElapsedCallback+0x174>)
 810186e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101872:	4b18      	ldr	r3, [pc, #96]	@ (81018d4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8101874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101878:	f7ff f870 	bl	810095c <__aeabi_ddiv>
 810187c:	4602      	mov	r2, r0
 810187e:	460b      	mov	r3, r1
 8101880:	491d      	ldr	r1, [pc, #116]	@ (81018f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8101882:	e9c1 2300 	strd	r2, r3, [r1]

	     // Conversione diretta in rotazione per minuto (RPM)
	     speed = speed_degsec / 6.0;
 8101886:	4b1c      	ldr	r3, [pc, #112]	@ (81018f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8101888:	e9d3 0100 	ldrd	r0, r1, [r3]
 810188c:	f04f 0200 	mov.w	r2, #0
 8101890:	4b1a      	ldr	r3, [pc, #104]	@ (81018fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8101892:	f7ff f863 	bl	810095c <__aeabi_ddiv>
 8101896:	4602      	mov	r2, r0
 8101898:	460b      	mov	r3, r1
 810189a:	4919      	ldr	r1, [pc, #100]	@ (8101900 <HAL_TIM_PeriodElapsedCallback+0x188>)
 810189c:	e9c1 2300 	strd	r2, r3, [r1]

	     // Aggiornamento dei valori precedenti.
	     old_delta_angle = delta_angle;
 81018a0:	4b10      	ldr	r3, [pc, #64]	@ (81018e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 81018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018a6:	4910      	ldr	r1, [pc, #64]	@ (81018e8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 81018a8:	e9c1 2300 	strd	r2, r3, [r1]
	     old_dir = dir;
 81018ac:	4b10      	ldr	r3, [pc, #64]	@ (81018f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4a10      	ldr	r2, [pc, #64]	@ (81018f4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 81018b2:	6013      	str	r3, [r2, #0]

  }

 }
 81018b4:	bf00      	nop
 81018b6:	3708      	adds	r7, #8
 81018b8:	46bd      	mov	sp, r7
 81018ba:	bd80      	pop	{r7, pc}
 81018bc:	f3af 8000 	nop.w
 81018c0:	47ae147b 	.word	0x47ae147b
 81018c4:	3f847ae1 	.word	0x3f847ae1
 81018c8:	00000000 	.word	0x00000000
 81018cc:	40a4b800 	.word	0x40a4b800
 81018d0:	1000028c 	.word	0x1000028c
 81018d4:	10000398 	.word	0x10000398
 81018d8:	40000800 	.word	0x40000800
 81018dc:	1000036c 	.word	0x1000036c
 81018e0:	40768000 	.word	0x40768000
 81018e4:	10000370 	.word	0x10000370
 81018e8:	10000390 	.word	0x10000390
 81018ec:	10000378 	.word	0x10000378
 81018f0:	10000388 	.word	0x10000388
 81018f4:	1000038c 	.word	0x1000038c
 81018f8:	100003a0 	.word	0x100003a0
 81018fc:	40180000 	.word	0x40180000
 8101900:	10000380 	.word	0x10000380

08101904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101904:	b480      	push	{r7}
 8101906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101908:	b672      	cpsid	i
}
 810190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810190c:	bf00      	nop
 810190e:	e7fd      	b.n	810190c <Error_Handler+0x8>

08101910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101910:	b480      	push	{r7}
 8101912:	b083      	sub	sp, #12
 8101914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101916:	4b0a      	ldr	r3, [pc, #40]	@ (8101940 <HAL_MspInit+0x30>)
 8101918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810191c:	4a08      	ldr	r2, [pc, #32]	@ (8101940 <HAL_MspInit+0x30>)
 810191e:	f043 0302 	orr.w	r3, r3, #2
 8101922:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101926:	4b06      	ldr	r3, [pc, #24]	@ (8101940 <HAL_MspInit+0x30>)
 8101928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810192c:	f003 0302 	and.w	r3, r3, #2
 8101930:	607b      	str	r3, [r7, #4]
 8101932:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101934:	bf00      	nop
 8101936:	370c      	adds	r7, #12
 8101938:	46bd      	mov	sp, r7
 810193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810193e:	4770      	bx	lr
 8101940:	58024400 	.word	0x58024400

08101944 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101944:	b580      	push	{r7, lr}
 8101946:	b084      	sub	sp, #16
 8101948:	af00      	add	r7, sp, #0
 810194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	4a19      	ldr	r2, [pc, #100]	@ (81019b8 <HAL_TIM_Base_MspInit+0x74>)
 8101952:	4293      	cmp	r3, r2
 8101954:	d10f      	bne.n	8101976 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101956:	4b19      	ldr	r3, [pc, #100]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 8101958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810195c:	4a17      	ldr	r2, [pc, #92]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 810195e:	f043 0301 	orr.w	r3, r3, #1
 8101962:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101966:	4b15      	ldr	r3, [pc, #84]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 8101968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810196c:	f003 0301 	and.w	r3, r3, #1
 8101970:	60fb      	str	r3, [r7, #12]
 8101972:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8101974:	e01b      	b.n	81019ae <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	4a11      	ldr	r2, [pc, #68]	@ (81019c0 <HAL_TIM_Base_MspInit+0x7c>)
 810197c:	4293      	cmp	r3, r2
 810197e:	d116      	bne.n	81019ae <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8101980:	4b0e      	ldr	r3, [pc, #56]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 8101982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101986:	4a0d      	ldr	r2, [pc, #52]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 8101988:	f043 0310 	orr.w	r3, r3, #16
 810198c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101990:	4b0a      	ldr	r3, [pc, #40]	@ (81019bc <HAL_TIM_Base_MspInit+0x78>)
 8101992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101996:	f003 0310 	and.w	r3, r3, #16
 810199a:	60bb      	str	r3, [r7, #8]
 810199c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 810199e:	2200      	movs	r2, #0
 81019a0:	2100      	movs	r1, #0
 81019a2:	2036      	movs	r0, #54	@ 0x36
 81019a4:	f000 fbe5 	bl	8102172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81019a8:	2036      	movs	r0, #54	@ 0x36
 81019aa:	f000 fbfc 	bl	81021a6 <HAL_NVIC_EnableIRQ>
}
 81019ae:	bf00      	nop
 81019b0:	3710      	adds	r7, #16
 81019b2:	46bd      	mov	sp, r7
 81019b4:	bd80      	pop	{r7, pc}
 81019b6:	bf00      	nop
 81019b8:	40010000 	.word	0x40010000
 81019bc:	58024400 	.word	0x58024400
 81019c0:	40001000 	.word	0x40001000

081019c4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 81019c4:	b580      	push	{r7, lr}
 81019c6:	b08a      	sub	sp, #40	@ 0x28
 81019c8:	af00      	add	r7, sp, #0
 81019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019cc:	f107 0314 	add.w	r3, r7, #20
 81019d0:	2200      	movs	r2, #0
 81019d2:	601a      	str	r2, [r3, #0]
 81019d4:	605a      	str	r2, [r3, #4]
 81019d6:	609a      	str	r2, [r3, #8]
 81019d8:	60da      	str	r2, [r3, #12]
 81019da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	4a1a      	ldr	r2, [pc, #104]	@ (8101a4c <HAL_TIM_Encoder_MspInit+0x88>)
 81019e2:	4293      	cmp	r3, r2
 81019e4:	d12e      	bne.n	8101a44 <HAL_TIM_Encoder_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 81019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 81019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019ec:	4a18      	ldr	r2, [pc, #96]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 81019ee:	f043 0304 	orr.w	r3, r3, #4
 81019f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81019f6:	4b16      	ldr	r3, [pc, #88]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 81019f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019fc:	f003 0304 	and.w	r3, r3, #4
 8101a00:	613b      	str	r3, [r7, #16]
 8101a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a04:	4b12      	ldr	r3, [pc, #72]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a0a:	4a11      	ldr	r2, [pc, #68]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101a0c:	f043 0308 	orr.w	r3, r3, #8
 8101a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a14:	4b0e      	ldr	r3, [pc, #56]	@ (8101a50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a1a:	f003 0308 	and.w	r3, r3, #8
 8101a1e:	60fb      	str	r3, [r7, #12]
 8101a20:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8101a22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8101a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a28:	2302      	movs	r3, #2
 8101a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a2c:	2300      	movs	r3, #0
 8101a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a30:	2300      	movs	r3, #0
 8101a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101a34:	2302      	movs	r3, #2
 8101a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a38:	f107 0314 	add.w	r3, r7, #20
 8101a3c:	4619      	mov	r1, r3
 8101a3e:	4805      	ldr	r0, [pc, #20]	@ (8101a54 <HAL_TIM_Encoder_MspInit+0x90>)
 8101a40:	f000 fbde 	bl	8102200 <HAL_GPIO_Init>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8101a44:	bf00      	nop
 8101a46:	3728      	adds	r7, #40	@ 0x28
 8101a48:	46bd      	mov	sp, r7
 8101a4a:	bd80      	pop	{r7, pc}
 8101a4c:	40000800 	.word	0x40000800
 8101a50:	58024400 	.word	0x58024400
 8101a54:	58020c00 	.word	0x58020c00

08101a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101a58:	b580      	push	{r7, lr}
 8101a5a:	b088      	sub	sp, #32
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a60:	f107 030c 	add.w	r3, r7, #12
 8101a64:	2200      	movs	r2, #0
 8101a66:	601a      	str	r2, [r3, #0]
 8101a68:	605a      	str	r2, [r3, #4]
 8101a6a:	609a      	str	r2, [r3, #8]
 8101a6c:	60da      	str	r2, [r3, #12]
 8101a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	4a13      	ldr	r2, [pc, #76]	@ (8101ac4 <HAL_TIM_MspPostInit+0x6c>)
 8101a76:	4293      	cmp	r3, r2
 8101a78:	d11f      	bne.n	8101aba <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101a7a:	4b13      	ldr	r3, [pc, #76]	@ (8101ac8 <HAL_TIM_MspPostInit+0x70>)
 8101a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a80:	4a11      	ldr	r2, [pc, #68]	@ (8101ac8 <HAL_TIM_MspPostInit+0x70>)
 8101a82:	f043 0310 	orr.w	r3, r3, #16
 8101a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8101ac8 <HAL_TIM_MspPostInit+0x70>)
 8101a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a90:	f003 0310 	and.w	r3, r3, #16
 8101a94:	60bb      	str	r3, [r7, #8]
 8101a96:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a9e:	2302      	movs	r3, #2
 8101aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aa2:	2300      	movs	r3, #0
 8101aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101aa6:	2300      	movs	r3, #0
 8101aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101aaa:	2301      	movs	r3, #1
 8101aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101aae:	f107 030c 	add.w	r3, r7, #12
 8101ab2:	4619      	mov	r1, r3
 8101ab4:	4805      	ldr	r0, [pc, #20]	@ (8101acc <HAL_TIM_MspPostInit+0x74>)
 8101ab6:	f000 fba3 	bl	8102200 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101aba:	bf00      	nop
 8101abc:	3720      	adds	r7, #32
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	bd80      	pop	{r7, pc}
 8101ac2:	bf00      	nop
 8101ac4:	40010000 	.word	0x40010000
 8101ac8:	58024400 	.word	0x58024400
 8101acc:	58021000 	.word	0x58021000

08101ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101ad0:	b580      	push	{r7, lr}
 8101ad2:	b0ba      	sub	sp, #232	@ 0xe8
 8101ad4:	af00      	add	r7, sp, #0
 8101ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ad8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101adc:	2200      	movs	r2, #0
 8101ade:	601a      	str	r2, [r3, #0]
 8101ae0:	605a      	str	r2, [r3, #4]
 8101ae2:	609a      	str	r2, [r3, #8]
 8101ae4:	60da      	str	r2, [r3, #12]
 8101ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ae8:	f107 0310 	add.w	r3, r7, #16
 8101aec:	22c0      	movs	r2, #192	@ 0xc0
 8101aee:	2100      	movs	r1, #0
 8101af0:	4618      	mov	r0, r3
 8101af2:	f006 fb38 	bl	8108166 <memset>
  if(huart->Instance==USART3)
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	681b      	ldr	r3, [r3, #0]
 8101afa:	4a27      	ldr	r2, [pc, #156]	@ (8101b98 <HAL_UART_MspInit+0xc8>)
 8101afc:	4293      	cmp	r3, r2
 8101afe:	d146      	bne.n	8101b8e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101b00:	f04f 0202 	mov.w	r2, #2
 8101b04:	f04f 0300 	mov.w	r3, #0
 8101b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101b0c:	2300      	movs	r3, #0
 8101b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b12:	f107 0310 	add.w	r3, r7, #16
 8101b16:	4618      	mov	r0, r3
 8101b18:	f000 ffe2 	bl	8102ae0 <HAL_RCCEx_PeriphCLKConfig>
 8101b1c:	4603      	mov	r3, r0
 8101b1e:	2b00      	cmp	r3, #0
 8101b20:	d001      	beq.n	8101b26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101b22:	f7ff feef 	bl	8101904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101b26:	4b1d      	ldr	r3, [pc, #116]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8101b32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b36:	4b19      	ldr	r3, [pc, #100]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101b40:	60fb      	str	r3, [r7, #12]
 8101b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b44:	4b15      	ldr	r3, [pc, #84]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b4a:	4a14      	ldr	r2, [pc, #80]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b4c:	f043 0308 	orr.w	r3, r3, #8
 8101b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b54:	4b11      	ldr	r3, [pc, #68]	@ (8101b9c <HAL_UART_MspInit+0xcc>)
 8101b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b5a:	f003 0308 	and.w	r3, r3, #8
 8101b5e:	60bb      	str	r3, [r7, #8]
 8101b60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101b62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8101b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6a:	2302      	movs	r3, #2
 8101b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b70:	2300      	movs	r3, #0
 8101b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b76:	2300      	movs	r3, #0
 8101b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101b7c:	2307      	movs	r3, #7
 8101b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101b82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101b86:	4619      	mov	r1, r3
 8101b88:	4805      	ldr	r0, [pc, #20]	@ (8101ba0 <HAL_UART_MspInit+0xd0>)
 8101b8a:	f000 fb39 	bl	8102200 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8101b8e:	bf00      	nop
 8101b90:	37e8      	adds	r7, #232	@ 0xe8
 8101b92:	46bd      	mov	sp, r7
 8101b94:	bd80      	pop	{r7, pc}
 8101b96:	bf00      	nop
 8101b98:	40004800 	.word	0x40004800
 8101b9c:	58024400 	.word	0x58024400
 8101ba0:	58020c00 	.word	0x58020c00

08101ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ba4:	b480      	push	{r7}
 8101ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101ba8:	bf00      	nop
 8101baa:	e7fd      	b.n	8101ba8 <NMI_Handler+0x4>

08101bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101bac:	b480      	push	{r7}
 8101bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101bb0:	bf00      	nop
 8101bb2:	e7fd      	b.n	8101bb0 <HardFault_Handler+0x4>

08101bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101bb4:	b480      	push	{r7}
 8101bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101bb8:	bf00      	nop
 8101bba:	e7fd      	b.n	8101bb8 <MemManage_Handler+0x4>

08101bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101bbc:	b480      	push	{r7}
 8101bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101bc0:	bf00      	nop
 8101bc2:	e7fd      	b.n	8101bc0 <BusFault_Handler+0x4>

08101bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101bc4:	b480      	push	{r7}
 8101bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101bc8:	bf00      	nop
 8101bca:	e7fd      	b.n	8101bc8 <UsageFault_Handler+0x4>

08101bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101bcc:	b480      	push	{r7}
 8101bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101bd0:	bf00      	nop
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd8:	4770      	bx	lr

08101bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101bda:	b480      	push	{r7}
 8101bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101bde:	bf00      	nop
 8101be0:	46bd      	mov	sp, r7
 8101be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be6:	4770      	bx	lr

08101be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101be8:	b480      	push	{r7}
 8101bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101bec:	bf00      	nop
 8101bee:	46bd      	mov	sp, r7
 8101bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bf4:	4770      	bx	lr

08101bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101bf6:	b580      	push	{r7, lr}
 8101bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101bfa:	f000 f99b 	bl	8101f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101bfe:	bf00      	nop
 8101c00:	bd80      	pop	{r7, pc}

08101c02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101c02:	b580      	push	{r7, lr}
 8101c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101c06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8101c0a:	f000 fcdc 	bl	81025c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101c0e:	bf00      	nop
 8101c10:	bd80      	pop	{r7, pc}
	...

08101c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8101c14:	b580      	push	{r7, lr}
 8101c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8101c18:	4802      	ldr	r0, [pc, #8]	@ (8101c24 <TIM6_DAC_IRQHandler+0x10>)
 8101c1a:	f003 f901 	bl	8104e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8101c1e:	bf00      	nop
 8101c20:	bd80      	pop	{r7, pc}
 8101c22:	bf00      	nop
 8101c24:	1000028c 	.word	0x1000028c

08101c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101c28:	b480      	push	{r7}
 8101c2a:	af00      	add	r7, sp, #0
  return 1;
 8101c2c:	2301      	movs	r3, #1
}
 8101c2e:	4618      	mov	r0, r3
 8101c30:	46bd      	mov	sp, r7
 8101c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c36:	4770      	bx	lr

08101c38 <_kill>:

int _kill(int pid, int sig)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
 8101c3e:	6078      	str	r0, [r7, #4]
 8101c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101c42:	f006 fae3 	bl	810820c <__errno>
 8101c46:	4603      	mov	r3, r0
 8101c48:	2216      	movs	r2, #22
 8101c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8101c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101c50:	4618      	mov	r0, r3
 8101c52:	3708      	adds	r7, #8
 8101c54:	46bd      	mov	sp, r7
 8101c56:	bd80      	pop	{r7, pc}

08101c58 <_exit>:

void _exit (int status)
{
 8101c58:	b580      	push	{r7, lr}
 8101c5a:	b082      	sub	sp, #8
 8101c5c:	af00      	add	r7, sp, #0
 8101c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101c60:	f04f 31ff 	mov.w	r1, #4294967295
 8101c64:	6878      	ldr	r0, [r7, #4]
 8101c66:	f7ff ffe7 	bl	8101c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101c6a:	bf00      	nop
 8101c6c:	e7fd      	b.n	8101c6a <_exit+0x12>

08101c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101c6e:	b580      	push	{r7, lr}
 8101c70:	b086      	sub	sp, #24
 8101c72:	af00      	add	r7, sp, #0
 8101c74:	60f8      	str	r0, [r7, #12]
 8101c76:	60b9      	str	r1, [r7, #8]
 8101c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c7a:	2300      	movs	r3, #0
 8101c7c:	617b      	str	r3, [r7, #20]
 8101c7e:	e00a      	b.n	8101c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101c80:	f3af 8000 	nop.w
 8101c84:	4601      	mov	r1, r0
 8101c86:	68bb      	ldr	r3, [r7, #8]
 8101c88:	1c5a      	adds	r2, r3, #1
 8101c8a:	60ba      	str	r2, [r7, #8]
 8101c8c:	b2ca      	uxtb	r2, r1
 8101c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c90:	697b      	ldr	r3, [r7, #20]
 8101c92:	3301      	adds	r3, #1
 8101c94:	617b      	str	r3, [r7, #20]
 8101c96:	697a      	ldr	r2, [r7, #20]
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	429a      	cmp	r2, r3
 8101c9c:	dbf0      	blt.n	8101c80 <_read+0x12>
  }

  return len;
 8101c9e:	687b      	ldr	r3, [r7, #4]
}
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	3718      	adds	r7, #24
 8101ca4:	46bd      	mov	sp, r7
 8101ca6:	bd80      	pop	{r7, pc}

08101ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101ca8:	b580      	push	{r7, lr}
 8101caa:	b086      	sub	sp, #24
 8101cac:	af00      	add	r7, sp, #0
 8101cae:	60f8      	str	r0, [r7, #12]
 8101cb0:	60b9      	str	r1, [r7, #8]
 8101cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cb4:	2300      	movs	r3, #0
 8101cb6:	617b      	str	r3, [r7, #20]
 8101cb8:	e009      	b.n	8101cce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101cba:	68bb      	ldr	r3, [r7, #8]
 8101cbc:	1c5a      	adds	r2, r3, #1
 8101cbe:	60ba      	str	r2, [r7, #8]
 8101cc0:	781b      	ldrb	r3, [r3, #0]
 8101cc2:	4618      	mov	r0, r3
 8101cc4:	f7ff fd30 	bl	8101728 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cc8:	697b      	ldr	r3, [r7, #20]
 8101cca:	3301      	adds	r3, #1
 8101ccc:	617b      	str	r3, [r7, #20]
 8101cce:	697a      	ldr	r2, [r7, #20]
 8101cd0:	687b      	ldr	r3, [r7, #4]
 8101cd2:	429a      	cmp	r2, r3
 8101cd4:	dbf1      	blt.n	8101cba <_write+0x12>
  }
  return len;
 8101cd6:	687b      	ldr	r3, [r7, #4]
}
 8101cd8:	4618      	mov	r0, r3
 8101cda:	3718      	adds	r7, #24
 8101cdc:	46bd      	mov	sp, r7
 8101cde:	bd80      	pop	{r7, pc}

08101ce0 <_close>:

int _close(int file)
{
 8101ce0:	b480      	push	{r7}
 8101ce2:	b083      	sub	sp, #12
 8101ce4:	af00      	add	r7, sp, #0
 8101ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101cec:	4618      	mov	r0, r3
 8101cee:	370c      	adds	r7, #12
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf6:	4770      	bx	lr

08101cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101cf8:	b480      	push	{r7}
 8101cfa:	b083      	sub	sp, #12
 8101cfc:	af00      	add	r7, sp, #0
 8101cfe:	6078      	str	r0, [r7, #4]
 8101d00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101d02:	683b      	ldr	r3, [r7, #0]
 8101d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101d08:	605a      	str	r2, [r3, #4]
  return 0;
 8101d0a:	2300      	movs	r3, #0
}
 8101d0c:	4618      	mov	r0, r3
 8101d0e:	370c      	adds	r7, #12
 8101d10:	46bd      	mov	sp, r7
 8101d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d16:	4770      	bx	lr

08101d18 <_isatty>:

int _isatty(int file)
{
 8101d18:	b480      	push	{r7}
 8101d1a:	b083      	sub	sp, #12
 8101d1c:	af00      	add	r7, sp, #0
 8101d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101d20:	2301      	movs	r3, #1
}
 8101d22:	4618      	mov	r0, r3
 8101d24:	370c      	adds	r7, #12
 8101d26:	46bd      	mov	sp, r7
 8101d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2c:	4770      	bx	lr

08101d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101d2e:	b480      	push	{r7}
 8101d30:	b085      	sub	sp, #20
 8101d32:	af00      	add	r7, sp, #0
 8101d34:	60f8      	str	r0, [r7, #12]
 8101d36:	60b9      	str	r1, [r7, #8]
 8101d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101d3a:	2300      	movs	r3, #0
}
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	3714      	adds	r7, #20
 8101d40:	46bd      	mov	sp, r7
 8101d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d46:	4770      	bx	lr

08101d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101d48:	b580      	push	{r7, lr}
 8101d4a:	b086      	sub	sp, #24
 8101d4c:	af00      	add	r7, sp, #0
 8101d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101d50:	4a14      	ldr	r2, [pc, #80]	@ (8101da4 <_sbrk+0x5c>)
 8101d52:	4b15      	ldr	r3, [pc, #84]	@ (8101da8 <_sbrk+0x60>)
 8101d54:	1ad3      	subs	r3, r2, r3
 8101d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101d58:	697b      	ldr	r3, [r7, #20]
 8101d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101d5c:	4b13      	ldr	r3, [pc, #76]	@ (8101dac <_sbrk+0x64>)
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	2b00      	cmp	r3, #0
 8101d62:	d102      	bne.n	8101d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101d64:	4b11      	ldr	r3, [pc, #68]	@ (8101dac <_sbrk+0x64>)
 8101d66:	4a12      	ldr	r2, [pc, #72]	@ (8101db0 <_sbrk+0x68>)
 8101d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101d6a:	4b10      	ldr	r3, [pc, #64]	@ (8101dac <_sbrk+0x64>)
 8101d6c:	681a      	ldr	r2, [r3, #0]
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	4413      	add	r3, r2
 8101d72:	693a      	ldr	r2, [r7, #16]
 8101d74:	429a      	cmp	r2, r3
 8101d76:	d207      	bcs.n	8101d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101d78:	f006 fa48 	bl	810820c <__errno>
 8101d7c:	4603      	mov	r3, r0
 8101d7e:	220c      	movs	r2, #12
 8101d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101d82:	f04f 33ff 	mov.w	r3, #4294967295
 8101d86:	e009      	b.n	8101d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101d88:	4b08      	ldr	r3, [pc, #32]	@ (8101dac <_sbrk+0x64>)
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101d8e:	4b07      	ldr	r3, [pc, #28]	@ (8101dac <_sbrk+0x64>)
 8101d90:	681a      	ldr	r2, [r3, #0]
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	4413      	add	r3, r2
 8101d96:	4a05      	ldr	r2, [pc, #20]	@ (8101dac <_sbrk+0x64>)
 8101d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101d9a:	68fb      	ldr	r3, [r7, #12]
}
 8101d9c:	4618      	mov	r0, r3
 8101d9e:	3718      	adds	r7, #24
 8101da0:	46bd      	mov	sp, r7
 8101da2:	bd80      	pop	{r7, pc}
 8101da4:	10048000 	.word	0x10048000
 8101da8:	00000400 	.word	0x00000400
 8101dac:	100003a8 	.word	0x100003a8
 8101db0:	10000500 	.word	0x10000500

08101db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101db4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101df0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101db8:	f7ff f9d2 	bl	8101160 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101dbc:	f7ff f9b8 	bl	8101130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101dc0:	480c      	ldr	r0, [pc, #48]	@ (8101df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101dc2:	490d      	ldr	r1, [pc, #52]	@ (8101df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8101dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101dc8:	e002      	b.n	8101dd0 <LoopCopyDataInit>

08101dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101dce:	3304      	adds	r3, #4

08101dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101dd4:	d3f9      	bcc.n	8101dca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8101e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8101e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ddc:	e001      	b.n	8101de2 <LoopFillZerobss>

08101dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101de0:	3204      	adds	r2, #4

08101de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101de4:	d3fb      	bcc.n	8101dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101de6:	f006 fa17 	bl	8108218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101dea:	f7ff f9d5 	bl	8101198 <main>
  bx  lr
 8101dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101df0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101df4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101df8:	100001d8 	.word	0x100001d8
  ldr r2, =_sidata
 8101dfc:	0810bdf4 	.word	0x0810bdf4
  ldr r2, =_sbss
 8101e00:	100001d8 	.word	0x100001d8
  ldr r4, =_ebss
 8101e04:	100004fc 	.word	0x100004fc

08101e08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101e08:	e7fe      	b.n	8101e08 <ADC3_IRQHandler>
	...

08101e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b082      	sub	sp, #8
 8101e10:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101e12:	4b28      	ldr	r3, [pc, #160]	@ (8101eb4 <HAL_Init+0xa8>)
 8101e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e18:	4a26      	ldr	r2, [pc, #152]	@ (8101eb4 <HAL_Init+0xa8>)
 8101e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101e1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e22:	4b24      	ldr	r3, [pc, #144]	@ (8101eb4 <HAL_Init+0xa8>)
 8101e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101e2c:	603b      	str	r3, [r7, #0]
 8101e2e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101e30:	4b21      	ldr	r3, [pc, #132]	@ (8101eb8 <HAL_Init+0xac>)
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101e38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8101eb8 <HAL_Init+0xac>)
 8101e3e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101e42:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101e44:	4b1c      	ldr	r3, [pc, #112]	@ (8101eb8 <HAL_Init+0xac>)
 8101e46:	681b      	ldr	r3, [r3, #0]
 8101e48:	4a1b      	ldr	r2, [pc, #108]	@ (8101eb8 <HAL_Init+0xac>)
 8101e4a:	f043 0301 	orr.w	r3, r3, #1
 8101e4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101e50:	2003      	movs	r0, #3
 8101e52:	f000 f983 	bl	810215c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101e56:	f000 fc6b 	bl	8102730 <HAL_RCC_GetSysClockFreq>
 8101e5a:	4602      	mov	r2, r0
 8101e5c:	4b15      	ldr	r3, [pc, #84]	@ (8101eb4 <HAL_Init+0xa8>)
 8101e5e:	699b      	ldr	r3, [r3, #24]
 8101e60:	0a1b      	lsrs	r3, r3, #8
 8101e62:	f003 030f 	and.w	r3, r3, #15
 8101e66:	4915      	ldr	r1, [pc, #84]	@ (8101ebc <HAL_Init+0xb0>)
 8101e68:	5ccb      	ldrb	r3, [r1, r3]
 8101e6a:	f003 031f 	and.w	r3, r3, #31
 8101e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8101e72:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101e74:	4b0f      	ldr	r3, [pc, #60]	@ (8101eb4 <HAL_Init+0xa8>)
 8101e76:	699b      	ldr	r3, [r3, #24]
 8101e78:	f003 030f 	and.w	r3, r3, #15
 8101e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8101ebc <HAL_Init+0xb0>)
 8101e7e:	5cd3      	ldrb	r3, [r2, r3]
 8101e80:	f003 031f 	and.w	r3, r3, #31
 8101e84:	687a      	ldr	r2, [r7, #4]
 8101e86:	fa22 f303 	lsr.w	r3, r2, r3
 8101e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8101ec0 <HAL_Init+0xb4>)
 8101e8c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8101ec0 <HAL_Init+0xb4>)
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a0c      	ldr	r2, [pc, #48]	@ (8101ec4 <HAL_Init+0xb8>)
 8101e94:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101e96:	2000      	movs	r0, #0
 8101e98:	f000 f816 	bl	8101ec8 <HAL_InitTick>
 8101e9c:	4603      	mov	r3, r0
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d001      	beq.n	8101ea6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101ea2:	2301      	movs	r3, #1
 8101ea4:	e002      	b.n	8101eac <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101ea6:	f7ff fd33 	bl	8101910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101eaa:	2300      	movs	r3, #0
}
 8101eac:	4618      	mov	r0, r3
 8101eae:	3708      	adds	r7, #8
 8101eb0:	46bd      	mov	sp, r7
 8101eb2:	bd80      	pop	{r7, pc}
 8101eb4:	58024400 	.word	0x58024400
 8101eb8:	40024400 	.word	0x40024400
 8101ebc:	0810b980 	.word	0x0810b980
 8101ec0:	10000004 	.word	0x10000004
 8101ec4:	10000000 	.word	0x10000000

08101ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101ec8:	b580      	push	{r7, lr}
 8101eca:	b082      	sub	sp, #8
 8101ecc:	af00      	add	r7, sp, #0
 8101ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101ed0:	4b15      	ldr	r3, [pc, #84]	@ (8101f28 <HAL_InitTick+0x60>)
 8101ed2:	781b      	ldrb	r3, [r3, #0]
 8101ed4:	2b00      	cmp	r3, #0
 8101ed6:	d101      	bne.n	8101edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101ed8:	2301      	movs	r3, #1
 8101eda:	e021      	b.n	8101f20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101edc:	4b13      	ldr	r3, [pc, #76]	@ (8101f2c <HAL_InitTick+0x64>)
 8101ede:	681a      	ldr	r2, [r3, #0]
 8101ee0:	4b11      	ldr	r3, [pc, #68]	@ (8101f28 <HAL_InitTick+0x60>)
 8101ee2:	781b      	ldrb	r3, [r3, #0]
 8101ee4:	4619      	mov	r1, r3
 8101ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8101eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8101ef2:	4618      	mov	r0, r3
 8101ef4:	f000 f965 	bl	81021c2 <HAL_SYSTICK_Config>
 8101ef8:	4603      	mov	r3, r0
 8101efa:	2b00      	cmp	r3, #0
 8101efc:	d001      	beq.n	8101f02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101efe:	2301      	movs	r3, #1
 8101f00:	e00e      	b.n	8101f20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	2b0f      	cmp	r3, #15
 8101f06:	d80a      	bhi.n	8101f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101f08:	2200      	movs	r2, #0
 8101f0a:	6879      	ldr	r1, [r7, #4]
 8101f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8101f10:	f000 f92f 	bl	8102172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101f14:	4a06      	ldr	r2, [pc, #24]	@ (8101f30 <HAL_InitTick+0x68>)
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101f1a:	2300      	movs	r3, #0
 8101f1c:	e000      	b.n	8101f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101f1e:	2301      	movs	r3, #1
}
 8101f20:	4618      	mov	r0, r3
 8101f22:	3708      	adds	r7, #8
 8101f24:	46bd      	mov	sp, r7
 8101f26:	bd80      	pop	{r7, pc}
 8101f28:	1000000c 	.word	0x1000000c
 8101f2c:	10000000 	.word	0x10000000
 8101f30:	10000008 	.word	0x10000008

08101f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101f34:	b480      	push	{r7}
 8101f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101f38:	4b06      	ldr	r3, [pc, #24]	@ (8101f54 <HAL_IncTick+0x20>)
 8101f3a:	781b      	ldrb	r3, [r3, #0]
 8101f3c:	461a      	mov	r2, r3
 8101f3e:	4b06      	ldr	r3, [pc, #24]	@ (8101f58 <HAL_IncTick+0x24>)
 8101f40:	681b      	ldr	r3, [r3, #0]
 8101f42:	4413      	add	r3, r2
 8101f44:	4a04      	ldr	r2, [pc, #16]	@ (8101f58 <HAL_IncTick+0x24>)
 8101f46:	6013      	str	r3, [r2, #0]
}
 8101f48:	bf00      	nop
 8101f4a:	46bd      	mov	sp, r7
 8101f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f50:	4770      	bx	lr
 8101f52:	bf00      	nop
 8101f54:	1000000c 	.word	0x1000000c
 8101f58:	100003ac 	.word	0x100003ac

08101f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101f5c:	b480      	push	{r7}
 8101f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8101f60:	4b03      	ldr	r3, [pc, #12]	@ (8101f70 <HAL_GetTick+0x14>)
 8101f62:	681b      	ldr	r3, [r3, #0]
}
 8101f64:	4618      	mov	r0, r3
 8101f66:	46bd      	mov	sp, r7
 8101f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6c:	4770      	bx	lr
 8101f6e:	bf00      	nop
 8101f70:	100003ac 	.word	0x100003ac

08101f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101f74:	b580      	push	{r7, lr}
 8101f76:	b084      	sub	sp, #16
 8101f78:	af00      	add	r7, sp, #0
 8101f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101f7c:	f7ff ffee 	bl	8101f5c <HAL_GetTick>
 8101f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101f86:	68fb      	ldr	r3, [r7, #12]
 8101f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f8c:	d005      	beq.n	8101f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8101fb8 <HAL_Delay+0x44>)
 8101f90:	781b      	ldrb	r3, [r3, #0]
 8101f92:	461a      	mov	r2, r3
 8101f94:	68fb      	ldr	r3, [r7, #12]
 8101f96:	4413      	add	r3, r2
 8101f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101f9a:	bf00      	nop
 8101f9c:	f7ff ffde 	bl	8101f5c <HAL_GetTick>
 8101fa0:	4602      	mov	r2, r0
 8101fa2:	68bb      	ldr	r3, [r7, #8]
 8101fa4:	1ad3      	subs	r3, r2, r3
 8101fa6:	68fa      	ldr	r2, [r7, #12]
 8101fa8:	429a      	cmp	r2, r3
 8101faa:	d8f7      	bhi.n	8101f9c <HAL_Delay+0x28>
  {
  }
}
 8101fac:	bf00      	nop
 8101fae:	bf00      	nop
 8101fb0:	3710      	adds	r7, #16
 8101fb2:	46bd      	mov	sp, r7
 8101fb4:	bd80      	pop	{r7, pc}
 8101fb6:	bf00      	nop
 8101fb8:	1000000c 	.word	0x1000000c

08101fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101fbc:	b480      	push	{r7}
 8101fbe:	b085      	sub	sp, #20
 8101fc0:	af00      	add	r7, sp, #0
 8101fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	f003 0307 	and.w	r3, r3, #7
 8101fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8102000 <__NVIC_SetPriorityGrouping+0x44>)
 8101fce:	68db      	ldr	r3, [r3, #12]
 8101fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101fd2:	68ba      	ldr	r2, [r7, #8]
 8101fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101fd8:	4013      	ands	r3, r2
 8101fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101fdc:	68fb      	ldr	r3, [r7, #12]
 8101fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101fe0:	68bb      	ldr	r3, [r7, #8]
 8101fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101fee:	4a04      	ldr	r2, [pc, #16]	@ (8102000 <__NVIC_SetPriorityGrouping+0x44>)
 8101ff0:	68bb      	ldr	r3, [r7, #8]
 8101ff2:	60d3      	str	r3, [r2, #12]
}
 8101ff4:	bf00      	nop
 8101ff6:	3714      	adds	r7, #20
 8101ff8:	46bd      	mov	sp, r7
 8101ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ffe:	4770      	bx	lr
 8102000:	e000ed00 	.word	0xe000ed00

08102004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102004:	b480      	push	{r7}
 8102006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102008:	4b04      	ldr	r3, [pc, #16]	@ (810201c <__NVIC_GetPriorityGrouping+0x18>)
 810200a:	68db      	ldr	r3, [r3, #12]
 810200c:	0a1b      	lsrs	r3, r3, #8
 810200e:	f003 0307 	and.w	r3, r3, #7
}
 8102012:	4618      	mov	r0, r3
 8102014:	46bd      	mov	sp, r7
 8102016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810201a:	4770      	bx	lr
 810201c:	e000ed00 	.word	0xe000ed00

08102020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102020:	b480      	push	{r7}
 8102022:	b083      	sub	sp, #12
 8102024:	af00      	add	r7, sp, #0
 8102026:	4603      	mov	r3, r0
 8102028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810202e:	2b00      	cmp	r3, #0
 8102030:	db0b      	blt.n	810204a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102032:	88fb      	ldrh	r3, [r7, #6]
 8102034:	f003 021f 	and.w	r2, r3, #31
 8102038:	4907      	ldr	r1, [pc, #28]	@ (8102058 <__NVIC_EnableIRQ+0x38>)
 810203a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810203e:	095b      	lsrs	r3, r3, #5
 8102040:	2001      	movs	r0, #1
 8102042:	fa00 f202 	lsl.w	r2, r0, r2
 8102046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810204a:	bf00      	nop
 810204c:	370c      	adds	r7, #12
 810204e:	46bd      	mov	sp, r7
 8102050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102054:	4770      	bx	lr
 8102056:	bf00      	nop
 8102058:	e000e100 	.word	0xe000e100

0810205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810205c:	b480      	push	{r7}
 810205e:	b083      	sub	sp, #12
 8102060:	af00      	add	r7, sp, #0
 8102062:	4603      	mov	r3, r0
 8102064:	6039      	str	r1, [r7, #0]
 8102066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810206c:	2b00      	cmp	r3, #0
 810206e:	db0a      	blt.n	8102086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102070:	683b      	ldr	r3, [r7, #0]
 8102072:	b2da      	uxtb	r2, r3
 8102074:	490c      	ldr	r1, [pc, #48]	@ (81020a8 <__NVIC_SetPriority+0x4c>)
 8102076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810207a:	0112      	lsls	r2, r2, #4
 810207c:	b2d2      	uxtb	r2, r2
 810207e:	440b      	add	r3, r1
 8102080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102084:	e00a      	b.n	810209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102086:	683b      	ldr	r3, [r7, #0]
 8102088:	b2da      	uxtb	r2, r3
 810208a:	4908      	ldr	r1, [pc, #32]	@ (81020ac <__NVIC_SetPriority+0x50>)
 810208c:	88fb      	ldrh	r3, [r7, #6]
 810208e:	f003 030f 	and.w	r3, r3, #15
 8102092:	3b04      	subs	r3, #4
 8102094:	0112      	lsls	r2, r2, #4
 8102096:	b2d2      	uxtb	r2, r2
 8102098:	440b      	add	r3, r1
 810209a:	761a      	strb	r2, [r3, #24]
}
 810209c:	bf00      	nop
 810209e:	370c      	adds	r7, #12
 81020a0:	46bd      	mov	sp, r7
 81020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a6:	4770      	bx	lr
 81020a8:	e000e100 	.word	0xe000e100
 81020ac:	e000ed00 	.word	0xe000ed00

081020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81020b0:	b480      	push	{r7}
 81020b2:	b089      	sub	sp, #36	@ 0x24
 81020b4:	af00      	add	r7, sp, #0
 81020b6:	60f8      	str	r0, [r7, #12]
 81020b8:	60b9      	str	r1, [r7, #8]
 81020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81020bc:	68fb      	ldr	r3, [r7, #12]
 81020be:	f003 0307 	and.w	r3, r3, #7
 81020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81020c4:	69fb      	ldr	r3, [r7, #28]
 81020c6:	f1c3 0307 	rsb	r3, r3, #7
 81020ca:	2b04      	cmp	r3, #4
 81020cc:	bf28      	it	cs
 81020ce:	2304      	movcs	r3, #4
 81020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81020d2:	69fb      	ldr	r3, [r7, #28]
 81020d4:	3304      	adds	r3, #4
 81020d6:	2b06      	cmp	r3, #6
 81020d8:	d902      	bls.n	81020e0 <NVIC_EncodePriority+0x30>
 81020da:	69fb      	ldr	r3, [r7, #28]
 81020dc:	3b03      	subs	r3, #3
 81020de:	e000      	b.n	81020e2 <NVIC_EncodePriority+0x32>
 81020e0:	2300      	movs	r3, #0
 81020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020e4:	f04f 32ff 	mov.w	r2, #4294967295
 81020e8:	69bb      	ldr	r3, [r7, #24]
 81020ea:	fa02 f303 	lsl.w	r3, r2, r3
 81020ee:	43da      	mvns	r2, r3
 81020f0:	68bb      	ldr	r3, [r7, #8]
 81020f2:	401a      	ands	r2, r3
 81020f4:	697b      	ldr	r3, [r7, #20]
 81020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81020f8:	f04f 31ff 	mov.w	r1, #4294967295
 81020fc:	697b      	ldr	r3, [r7, #20]
 81020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8102102:	43d9      	mvns	r1, r3
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102108:	4313      	orrs	r3, r2
         );
}
 810210a:	4618      	mov	r0, r3
 810210c:	3724      	adds	r7, #36	@ 0x24
 810210e:	46bd      	mov	sp, r7
 8102110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102114:	4770      	bx	lr
	...

08102118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102118:	b580      	push	{r7, lr}
 810211a:	b082      	sub	sp, #8
 810211c:	af00      	add	r7, sp, #0
 810211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	3b01      	subs	r3, #1
 8102124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102128:	d301      	bcc.n	810212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810212a:	2301      	movs	r3, #1
 810212c:	e00f      	b.n	810214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810212e:	4a0a      	ldr	r2, [pc, #40]	@ (8102158 <SysTick_Config+0x40>)
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	3b01      	subs	r3, #1
 8102134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102136:	210f      	movs	r1, #15
 8102138:	f04f 30ff 	mov.w	r0, #4294967295
 810213c:	f7ff ff8e 	bl	810205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102140:	4b05      	ldr	r3, [pc, #20]	@ (8102158 <SysTick_Config+0x40>)
 8102142:	2200      	movs	r2, #0
 8102144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102146:	4b04      	ldr	r3, [pc, #16]	@ (8102158 <SysTick_Config+0x40>)
 8102148:	2207      	movs	r2, #7
 810214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810214c:	2300      	movs	r3, #0
}
 810214e:	4618      	mov	r0, r3
 8102150:	3708      	adds	r7, #8
 8102152:	46bd      	mov	sp, r7
 8102154:	bd80      	pop	{r7, pc}
 8102156:	bf00      	nop
 8102158:	e000e010 	.word	0xe000e010

0810215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810215c:	b580      	push	{r7, lr}
 810215e:	b082      	sub	sp, #8
 8102160:	af00      	add	r7, sp, #0
 8102162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102164:	6878      	ldr	r0, [r7, #4]
 8102166:	f7ff ff29 	bl	8101fbc <__NVIC_SetPriorityGrouping>
}
 810216a:	bf00      	nop
 810216c:	3708      	adds	r7, #8
 810216e:	46bd      	mov	sp, r7
 8102170:	bd80      	pop	{r7, pc}

08102172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102172:	b580      	push	{r7, lr}
 8102174:	b086      	sub	sp, #24
 8102176:	af00      	add	r7, sp, #0
 8102178:	4603      	mov	r3, r0
 810217a:	60b9      	str	r1, [r7, #8]
 810217c:	607a      	str	r2, [r7, #4]
 810217e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102180:	f7ff ff40 	bl	8102004 <__NVIC_GetPriorityGrouping>
 8102184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102186:	687a      	ldr	r2, [r7, #4]
 8102188:	68b9      	ldr	r1, [r7, #8]
 810218a:	6978      	ldr	r0, [r7, #20]
 810218c:	f7ff ff90 	bl	81020b0 <NVIC_EncodePriority>
 8102190:	4602      	mov	r2, r0
 8102192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102196:	4611      	mov	r1, r2
 8102198:	4618      	mov	r0, r3
 810219a:	f7ff ff5f 	bl	810205c <__NVIC_SetPriority>
}
 810219e:	bf00      	nop
 81021a0:	3718      	adds	r7, #24
 81021a2:	46bd      	mov	sp, r7
 81021a4:	bd80      	pop	{r7, pc}

081021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81021a6:	b580      	push	{r7, lr}
 81021a8:	b082      	sub	sp, #8
 81021aa:	af00      	add	r7, sp, #0
 81021ac:	4603      	mov	r3, r0
 81021ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81021b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021b4:	4618      	mov	r0, r3
 81021b6:	f7ff ff33 	bl	8102020 <__NVIC_EnableIRQ>
}
 81021ba:	bf00      	nop
 81021bc:	3708      	adds	r7, #8
 81021be:	46bd      	mov	sp, r7
 81021c0:	bd80      	pop	{r7, pc}

081021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81021c2:	b580      	push	{r7, lr}
 81021c4:	b082      	sub	sp, #8
 81021c6:	af00      	add	r7, sp, #0
 81021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81021ca:	6878      	ldr	r0, [r7, #4]
 81021cc:	f7ff ffa4 	bl	8102118 <SysTick_Config>
 81021d0:	4603      	mov	r3, r0
}
 81021d2:	4618      	mov	r0, r3
 81021d4:	3708      	adds	r7, #8
 81021d6:	46bd      	mov	sp, r7
 81021d8:	bd80      	pop	{r7, pc}
	...

081021dc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81021dc:	b480      	push	{r7}
 81021de:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81021e0:	4b06      	ldr	r3, [pc, #24]	@ (81021fc <HAL_GetCurrentCPUID+0x20>)
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81021e8:	2b70      	cmp	r3, #112	@ 0x70
 81021ea:	d101      	bne.n	81021f0 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 81021ec:	2303      	movs	r3, #3
 81021ee:	e000      	b.n	81021f2 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 81021f0:	2301      	movs	r3, #1
  }
}
 81021f2:	4618      	mov	r0, r3
 81021f4:	46bd      	mov	sp, r7
 81021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fa:	4770      	bx	lr
 81021fc:	e000ed00 	.word	0xe000ed00

08102200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102200:	b480      	push	{r7}
 8102202:	b089      	sub	sp, #36	@ 0x24
 8102204:	af00      	add	r7, sp, #0
 8102206:	6078      	str	r0, [r7, #4]
 8102208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810220a:	2300      	movs	r3, #0
 810220c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810220e:	4b89      	ldr	r3, [pc, #548]	@ (8102434 <HAL_GPIO_Init+0x234>)
 8102210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102212:	e194      	b.n	810253e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102214:	683b      	ldr	r3, [r7, #0]
 8102216:	681a      	ldr	r2, [r3, #0]
 8102218:	2101      	movs	r1, #1
 810221a:	69fb      	ldr	r3, [r7, #28]
 810221c:	fa01 f303 	lsl.w	r3, r1, r3
 8102220:	4013      	ands	r3, r2
 8102222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102224:	693b      	ldr	r3, [r7, #16]
 8102226:	2b00      	cmp	r3, #0
 8102228:	f000 8186 	beq.w	8102538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810222c:	683b      	ldr	r3, [r7, #0]
 810222e:	685b      	ldr	r3, [r3, #4]
 8102230:	f003 0303 	and.w	r3, r3, #3
 8102234:	2b01      	cmp	r3, #1
 8102236:	d005      	beq.n	8102244 <HAL_GPIO_Init+0x44>
 8102238:	683b      	ldr	r3, [r7, #0]
 810223a:	685b      	ldr	r3, [r3, #4]
 810223c:	f003 0303 	and.w	r3, r3, #3
 8102240:	2b02      	cmp	r3, #2
 8102242:	d130      	bne.n	81022a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	689b      	ldr	r3, [r3, #8]
 8102248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810224a:	69fb      	ldr	r3, [r7, #28]
 810224c:	005b      	lsls	r3, r3, #1
 810224e:	2203      	movs	r2, #3
 8102250:	fa02 f303 	lsl.w	r3, r2, r3
 8102254:	43db      	mvns	r3, r3
 8102256:	69ba      	ldr	r2, [r7, #24]
 8102258:	4013      	ands	r3, r2
 810225a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810225c:	683b      	ldr	r3, [r7, #0]
 810225e:	68da      	ldr	r2, [r3, #12]
 8102260:	69fb      	ldr	r3, [r7, #28]
 8102262:	005b      	lsls	r3, r3, #1
 8102264:	fa02 f303 	lsl.w	r3, r2, r3
 8102268:	69ba      	ldr	r2, [r7, #24]
 810226a:	4313      	orrs	r3, r2
 810226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	69ba      	ldr	r2, [r7, #24]
 8102272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	685b      	ldr	r3, [r3, #4]
 8102278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810227a:	2201      	movs	r2, #1
 810227c:	69fb      	ldr	r3, [r7, #28]
 810227e:	fa02 f303 	lsl.w	r3, r2, r3
 8102282:	43db      	mvns	r3, r3
 8102284:	69ba      	ldr	r2, [r7, #24]
 8102286:	4013      	ands	r3, r2
 8102288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810228a:	683b      	ldr	r3, [r7, #0]
 810228c:	685b      	ldr	r3, [r3, #4]
 810228e:	091b      	lsrs	r3, r3, #4
 8102290:	f003 0201 	and.w	r2, r3, #1
 8102294:	69fb      	ldr	r3, [r7, #28]
 8102296:	fa02 f303 	lsl.w	r3, r2, r3
 810229a:	69ba      	ldr	r2, [r7, #24]
 810229c:	4313      	orrs	r3, r2
 810229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	69ba      	ldr	r2, [r7, #24]
 81022a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81022a6:	683b      	ldr	r3, [r7, #0]
 81022a8:	685b      	ldr	r3, [r3, #4]
 81022aa:	f003 0303 	and.w	r3, r3, #3
 81022ae:	2b03      	cmp	r3, #3
 81022b0:	d017      	beq.n	81022e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	68db      	ldr	r3, [r3, #12]
 81022b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81022b8:	69fb      	ldr	r3, [r7, #28]
 81022ba:	005b      	lsls	r3, r3, #1
 81022bc:	2203      	movs	r2, #3
 81022be:	fa02 f303 	lsl.w	r3, r2, r3
 81022c2:	43db      	mvns	r3, r3
 81022c4:	69ba      	ldr	r2, [r7, #24]
 81022c6:	4013      	ands	r3, r2
 81022c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81022ca:	683b      	ldr	r3, [r7, #0]
 81022cc:	689a      	ldr	r2, [r3, #8]
 81022ce:	69fb      	ldr	r3, [r7, #28]
 81022d0:	005b      	lsls	r3, r3, #1
 81022d2:	fa02 f303 	lsl.w	r3, r2, r3
 81022d6:	69ba      	ldr	r2, [r7, #24]
 81022d8:	4313      	orrs	r3, r2
 81022da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	69ba      	ldr	r2, [r7, #24]
 81022e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81022e2:	683b      	ldr	r3, [r7, #0]
 81022e4:	685b      	ldr	r3, [r3, #4]
 81022e6:	f003 0303 	and.w	r3, r3, #3
 81022ea:	2b02      	cmp	r3, #2
 81022ec:	d123      	bne.n	8102336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81022ee:	69fb      	ldr	r3, [r7, #28]
 81022f0:	08da      	lsrs	r2, r3, #3
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	3208      	adds	r2, #8
 81022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81022fc:	69fb      	ldr	r3, [r7, #28]
 81022fe:	f003 0307 	and.w	r3, r3, #7
 8102302:	009b      	lsls	r3, r3, #2
 8102304:	220f      	movs	r2, #15
 8102306:	fa02 f303 	lsl.w	r3, r2, r3
 810230a:	43db      	mvns	r3, r3
 810230c:	69ba      	ldr	r2, [r7, #24]
 810230e:	4013      	ands	r3, r2
 8102310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102312:	683b      	ldr	r3, [r7, #0]
 8102314:	691a      	ldr	r2, [r3, #16]
 8102316:	69fb      	ldr	r3, [r7, #28]
 8102318:	f003 0307 	and.w	r3, r3, #7
 810231c:	009b      	lsls	r3, r3, #2
 810231e:	fa02 f303 	lsl.w	r3, r2, r3
 8102322:	69ba      	ldr	r2, [r7, #24]
 8102324:	4313      	orrs	r3, r2
 8102326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102328:	69fb      	ldr	r3, [r7, #28]
 810232a:	08da      	lsrs	r2, r3, #3
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	3208      	adds	r2, #8
 8102330:	69b9      	ldr	r1, [r7, #24]
 8102332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810233c:	69fb      	ldr	r3, [r7, #28]
 810233e:	005b      	lsls	r3, r3, #1
 8102340:	2203      	movs	r2, #3
 8102342:	fa02 f303 	lsl.w	r3, r2, r3
 8102346:	43db      	mvns	r3, r3
 8102348:	69ba      	ldr	r2, [r7, #24]
 810234a:	4013      	ands	r3, r2
 810234c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810234e:	683b      	ldr	r3, [r7, #0]
 8102350:	685b      	ldr	r3, [r3, #4]
 8102352:	f003 0203 	and.w	r2, r3, #3
 8102356:	69fb      	ldr	r3, [r7, #28]
 8102358:	005b      	lsls	r3, r3, #1
 810235a:	fa02 f303 	lsl.w	r3, r2, r3
 810235e:	69ba      	ldr	r2, [r7, #24]
 8102360:	4313      	orrs	r3, r2
 8102362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	69ba      	ldr	r2, [r7, #24]
 8102368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810236a:	683b      	ldr	r3, [r7, #0]
 810236c:	685b      	ldr	r3, [r3, #4]
 810236e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102372:	2b00      	cmp	r3, #0
 8102374:	f000 80e0 	beq.w	8102538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102378:	4b2f      	ldr	r3, [pc, #188]	@ (8102438 <HAL_GPIO_Init+0x238>)
 810237a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810237e:	4a2e      	ldr	r2, [pc, #184]	@ (8102438 <HAL_GPIO_Init+0x238>)
 8102380:	f043 0302 	orr.w	r3, r3, #2
 8102384:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102388:	4b2b      	ldr	r3, [pc, #172]	@ (8102438 <HAL_GPIO_Init+0x238>)
 810238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810238e:	f003 0302 	and.w	r3, r3, #2
 8102392:	60fb      	str	r3, [r7, #12]
 8102394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102396:	4a29      	ldr	r2, [pc, #164]	@ (810243c <HAL_GPIO_Init+0x23c>)
 8102398:	69fb      	ldr	r3, [r7, #28]
 810239a:	089b      	lsrs	r3, r3, #2
 810239c:	3302      	adds	r3, #2
 810239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81023a4:	69fb      	ldr	r3, [r7, #28]
 81023a6:	f003 0303 	and.w	r3, r3, #3
 81023aa:	009b      	lsls	r3, r3, #2
 81023ac:	220f      	movs	r2, #15
 81023ae:	fa02 f303 	lsl.w	r3, r2, r3
 81023b2:	43db      	mvns	r3, r3
 81023b4:	69ba      	ldr	r2, [r7, #24]
 81023b6:	4013      	ands	r3, r2
 81023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	4a20      	ldr	r2, [pc, #128]	@ (8102440 <HAL_GPIO_Init+0x240>)
 81023be:	4293      	cmp	r3, r2
 81023c0:	d052      	beq.n	8102468 <HAL_GPIO_Init+0x268>
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	4a1f      	ldr	r2, [pc, #124]	@ (8102444 <HAL_GPIO_Init+0x244>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d031      	beq.n	810242e <HAL_GPIO_Init+0x22e>
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	4a1e      	ldr	r2, [pc, #120]	@ (8102448 <HAL_GPIO_Init+0x248>)
 81023ce:	4293      	cmp	r3, r2
 81023d0:	d02b      	beq.n	810242a <HAL_GPIO_Init+0x22a>
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	4a1d      	ldr	r2, [pc, #116]	@ (810244c <HAL_GPIO_Init+0x24c>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d025      	beq.n	8102426 <HAL_GPIO_Init+0x226>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	4a1c      	ldr	r2, [pc, #112]	@ (8102450 <HAL_GPIO_Init+0x250>)
 81023de:	4293      	cmp	r3, r2
 81023e0:	d01f      	beq.n	8102422 <HAL_GPIO_Init+0x222>
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	4a1b      	ldr	r2, [pc, #108]	@ (8102454 <HAL_GPIO_Init+0x254>)
 81023e6:	4293      	cmp	r3, r2
 81023e8:	d019      	beq.n	810241e <HAL_GPIO_Init+0x21e>
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	4a1a      	ldr	r2, [pc, #104]	@ (8102458 <HAL_GPIO_Init+0x258>)
 81023ee:	4293      	cmp	r3, r2
 81023f0:	d013      	beq.n	810241a <HAL_GPIO_Init+0x21a>
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	4a19      	ldr	r2, [pc, #100]	@ (810245c <HAL_GPIO_Init+0x25c>)
 81023f6:	4293      	cmp	r3, r2
 81023f8:	d00d      	beq.n	8102416 <HAL_GPIO_Init+0x216>
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	4a18      	ldr	r2, [pc, #96]	@ (8102460 <HAL_GPIO_Init+0x260>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d007      	beq.n	8102412 <HAL_GPIO_Init+0x212>
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	4a17      	ldr	r2, [pc, #92]	@ (8102464 <HAL_GPIO_Init+0x264>)
 8102406:	4293      	cmp	r3, r2
 8102408:	d101      	bne.n	810240e <HAL_GPIO_Init+0x20e>
 810240a:	2309      	movs	r3, #9
 810240c:	e02d      	b.n	810246a <HAL_GPIO_Init+0x26a>
 810240e:	230a      	movs	r3, #10
 8102410:	e02b      	b.n	810246a <HAL_GPIO_Init+0x26a>
 8102412:	2308      	movs	r3, #8
 8102414:	e029      	b.n	810246a <HAL_GPIO_Init+0x26a>
 8102416:	2307      	movs	r3, #7
 8102418:	e027      	b.n	810246a <HAL_GPIO_Init+0x26a>
 810241a:	2306      	movs	r3, #6
 810241c:	e025      	b.n	810246a <HAL_GPIO_Init+0x26a>
 810241e:	2305      	movs	r3, #5
 8102420:	e023      	b.n	810246a <HAL_GPIO_Init+0x26a>
 8102422:	2304      	movs	r3, #4
 8102424:	e021      	b.n	810246a <HAL_GPIO_Init+0x26a>
 8102426:	2303      	movs	r3, #3
 8102428:	e01f      	b.n	810246a <HAL_GPIO_Init+0x26a>
 810242a:	2302      	movs	r3, #2
 810242c:	e01d      	b.n	810246a <HAL_GPIO_Init+0x26a>
 810242e:	2301      	movs	r3, #1
 8102430:	e01b      	b.n	810246a <HAL_GPIO_Init+0x26a>
 8102432:	bf00      	nop
 8102434:	580000c0 	.word	0x580000c0
 8102438:	58024400 	.word	0x58024400
 810243c:	58000400 	.word	0x58000400
 8102440:	58020000 	.word	0x58020000
 8102444:	58020400 	.word	0x58020400
 8102448:	58020800 	.word	0x58020800
 810244c:	58020c00 	.word	0x58020c00
 8102450:	58021000 	.word	0x58021000
 8102454:	58021400 	.word	0x58021400
 8102458:	58021800 	.word	0x58021800
 810245c:	58021c00 	.word	0x58021c00
 8102460:	58022000 	.word	0x58022000
 8102464:	58022400 	.word	0x58022400
 8102468:	2300      	movs	r3, #0
 810246a:	69fa      	ldr	r2, [r7, #28]
 810246c:	f002 0203 	and.w	r2, r2, #3
 8102470:	0092      	lsls	r2, r2, #2
 8102472:	4093      	lsls	r3, r2
 8102474:	69ba      	ldr	r2, [r7, #24]
 8102476:	4313      	orrs	r3, r2
 8102478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810247a:	4938      	ldr	r1, [pc, #224]	@ (810255c <HAL_GPIO_Init+0x35c>)
 810247c:	69fb      	ldr	r3, [r7, #28]
 810247e:	089b      	lsrs	r3, r3, #2
 8102480:	3302      	adds	r3, #2
 8102482:	69ba      	ldr	r2, [r7, #24]
 8102484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102490:	693b      	ldr	r3, [r7, #16]
 8102492:	43db      	mvns	r3, r3
 8102494:	69ba      	ldr	r2, [r7, #24]
 8102496:	4013      	ands	r3, r2
 8102498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810249a:	683b      	ldr	r3, [r7, #0]
 810249c:	685b      	ldr	r3, [r3, #4]
 810249e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d003      	beq.n	81024ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81024a6:	69ba      	ldr	r2, [r7, #24]
 81024a8:	693b      	ldr	r3, [r7, #16]
 81024aa:	4313      	orrs	r3, r2
 81024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81024ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81024b2:	69bb      	ldr	r3, [r7, #24]
 81024b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81024b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81024ba:	685b      	ldr	r3, [r3, #4]
 81024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81024be:	693b      	ldr	r3, [r7, #16]
 81024c0:	43db      	mvns	r3, r3
 81024c2:	69ba      	ldr	r2, [r7, #24]
 81024c4:	4013      	ands	r3, r2
 81024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81024c8:	683b      	ldr	r3, [r7, #0]
 81024ca:	685b      	ldr	r3, [r3, #4]
 81024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d003      	beq.n	81024dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81024d4:	69ba      	ldr	r2, [r7, #24]
 81024d6:	693b      	ldr	r3, [r7, #16]
 81024d8:	4313      	orrs	r3, r2
 81024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81024dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81024e0:	69bb      	ldr	r3, [r7, #24]
 81024e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81024e4:	697b      	ldr	r3, [r7, #20]
 81024e6:	685b      	ldr	r3, [r3, #4]
 81024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81024ea:	693b      	ldr	r3, [r7, #16]
 81024ec:	43db      	mvns	r3, r3
 81024ee:	69ba      	ldr	r2, [r7, #24]
 81024f0:	4013      	ands	r3, r2
 81024f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81024f4:	683b      	ldr	r3, [r7, #0]
 81024f6:	685b      	ldr	r3, [r3, #4]
 81024f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81024fc:	2b00      	cmp	r3, #0
 81024fe:	d003      	beq.n	8102508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102500:	69ba      	ldr	r2, [r7, #24]
 8102502:	693b      	ldr	r3, [r7, #16]
 8102504:	4313      	orrs	r3, r2
 8102506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102508:	697b      	ldr	r3, [r7, #20]
 810250a:	69ba      	ldr	r2, [r7, #24]
 810250c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810250e:	697b      	ldr	r3, [r7, #20]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102514:	693b      	ldr	r3, [r7, #16]
 8102516:	43db      	mvns	r3, r3
 8102518:	69ba      	ldr	r2, [r7, #24]
 810251a:	4013      	ands	r3, r2
 810251c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810251e:	683b      	ldr	r3, [r7, #0]
 8102520:	685b      	ldr	r3, [r3, #4]
 8102522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102526:	2b00      	cmp	r3, #0
 8102528:	d003      	beq.n	8102532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810252a:	69ba      	ldr	r2, [r7, #24]
 810252c:	693b      	ldr	r3, [r7, #16]
 810252e:	4313      	orrs	r3, r2
 8102530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102532:	697b      	ldr	r3, [r7, #20]
 8102534:	69ba      	ldr	r2, [r7, #24]
 8102536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102538:	69fb      	ldr	r3, [r7, #28]
 810253a:	3301      	adds	r3, #1
 810253c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810253e:	683b      	ldr	r3, [r7, #0]
 8102540:	681a      	ldr	r2, [r3, #0]
 8102542:	69fb      	ldr	r3, [r7, #28]
 8102544:	fa22 f303 	lsr.w	r3, r2, r3
 8102548:	2b00      	cmp	r3, #0
 810254a:	f47f ae63 	bne.w	8102214 <HAL_GPIO_Init+0x14>
  }
}
 810254e:	bf00      	nop
 8102550:	bf00      	nop
 8102552:	3724      	adds	r7, #36	@ 0x24
 8102554:	46bd      	mov	sp, r7
 8102556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810255a:	4770      	bx	lr
 810255c:	58000400 	.word	0x58000400

08102560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102560:	b480      	push	{r7}
 8102562:	b083      	sub	sp, #12
 8102564:	af00      	add	r7, sp, #0
 8102566:	6078      	str	r0, [r7, #4]
 8102568:	460b      	mov	r3, r1
 810256a:	807b      	strh	r3, [r7, #2]
 810256c:	4613      	mov	r3, r2
 810256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102570:	787b      	ldrb	r3, [r7, #1]
 8102572:	2b00      	cmp	r3, #0
 8102574:	d003      	beq.n	810257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102576:	887a      	ldrh	r2, [r7, #2]
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810257c:	e003      	b.n	8102586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810257e:	887b      	ldrh	r3, [r7, #2]
 8102580:	041a      	lsls	r2, r3, #16
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	619a      	str	r2, [r3, #24]
}
 8102586:	bf00      	nop
 8102588:	370c      	adds	r7, #12
 810258a:	46bd      	mov	sp, r7
 810258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102590:	4770      	bx	lr

08102592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102592:	b480      	push	{r7}
 8102594:	b085      	sub	sp, #20
 8102596:	af00      	add	r7, sp, #0
 8102598:	6078      	str	r0, [r7, #4]
 810259a:	460b      	mov	r3, r1
 810259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	695b      	ldr	r3, [r3, #20]
 81025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81025a4:	887a      	ldrh	r2, [r7, #2]
 81025a6:	68fb      	ldr	r3, [r7, #12]
 81025a8:	4013      	ands	r3, r2
 81025aa:	041a      	lsls	r2, r3, #16
 81025ac:	68fb      	ldr	r3, [r7, #12]
 81025ae:	43d9      	mvns	r1, r3
 81025b0:	887b      	ldrh	r3, [r7, #2]
 81025b2:	400b      	ands	r3, r1
 81025b4:	431a      	orrs	r2, r3
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	619a      	str	r2, [r3, #24]
}
 81025ba:	bf00      	nop
 81025bc:	3714      	adds	r7, #20
 81025be:	46bd      	mov	sp, r7
 81025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c4:	4770      	bx	lr

081025c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81025c6:	b580      	push	{r7, lr}
 81025c8:	b082      	sub	sp, #8
 81025ca:	af00      	add	r7, sp, #0
 81025cc:	4603      	mov	r3, r0
 81025ce:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81025d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 81025d8:	88fb      	ldrh	r3, [r7, #6]
 81025da:	4013      	ands	r3, r2
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d008      	beq.n	81025f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81025e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81025e4:	88fb      	ldrh	r3, [r7, #6]
 81025e6:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81025ea:	88fb      	ldrh	r3, [r7, #6]
 81025ec:	4618      	mov	r0, r3
 81025ee:	f7ff f8ad 	bl	810174c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81025f2:	bf00      	nop
 81025f4:	3708      	adds	r7, #8
 81025f6:	46bd      	mov	sp, r7
 81025f8:	bd80      	pop	{r7, pc}
	...

081025fc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81025fc:	b480      	push	{r7}
 81025fe:	b083      	sub	sp, #12
 8102600:	af00      	add	r7, sp, #0
 8102602:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102604:	4b05      	ldr	r3, [pc, #20]	@ (810261c <HAL_HSEM_ActivateNotification+0x20>)
 8102606:	681a      	ldr	r2, [r3, #0]
 8102608:	4904      	ldr	r1, [pc, #16]	@ (810261c <HAL_HSEM_ActivateNotification+0x20>)
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	4313      	orrs	r3, r2
 810260e:	600b      	str	r3, [r1, #0]
#endif
}
 8102610:	bf00      	nop
 8102612:	370c      	adds	r7, #12
 8102614:	46bd      	mov	sp, r7
 8102616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261a:	4770      	bx	lr
 810261c:	58026510 	.word	0x58026510

08102620 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102620:	b580      	push	{r7, lr}
 8102622:	b084      	sub	sp, #16
 8102624:	af00      	add	r7, sp, #0
 8102626:	60f8      	str	r0, [r7, #12]
 8102628:	460b      	mov	r3, r1
 810262a:	607a      	str	r2, [r7, #4]
 810262c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810262e:	4b37      	ldr	r3, [pc, #220]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	f023 0201 	bic.w	r2, r3, #1
 8102636:	4935      	ldr	r1, [pc, #212]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102638:	68fb      	ldr	r3, [r7, #12]
 810263a:	4313      	orrs	r3, r2
 810263c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	2b00      	cmp	r3, #0
 8102642:	d123      	bne.n	810268c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102644:	f7ff fdca 	bl	81021dc <HAL_GetCurrentCPUID>
 8102648:	4603      	mov	r3, r0
 810264a:	2b03      	cmp	r3, #3
 810264c:	d158      	bne.n	8102700 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810264e:	4b2f      	ldr	r3, [pc, #188]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102650:	691b      	ldr	r3, [r3, #16]
 8102652:	4a2e      	ldr	r2, [pc, #184]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102654:	f023 0301 	bic.w	r3, r3, #1
 8102658:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810265a:	4b2d      	ldr	r3, [pc, #180]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810265c:	691b      	ldr	r3, [r3, #16]
 810265e:	4a2c      	ldr	r2, [pc, #176]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102660:	f043 0304 	orr.w	r3, r3, #4
 8102664:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102666:	f3bf 8f4f 	dsb	sy
}
 810266a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810266c:	f3bf 8f6f 	isb	sy
}
 8102670:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102672:	7afb      	ldrb	r3, [r7, #11]
 8102674:	2b01      	cmp	r3, #1
 8102676:	d101      	bne.n	810267c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102678:	bf30      	wfi
 810267a:	e000      	b.n	810267e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810267c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810267e:	4b24      	ldr	r3, [pc, #144]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102680:	691b      	ldr	r3, [r3, #16]
 8102682:	4a23      	ldr	r2, [pc, #140]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102684:	f023 0304 	bic.w	r3, r3, #4
 8102688:	6113      	str	r3, [r2, #16]
 810268a:	e03c      	b.n	8102706 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	2b01      	cmp	r3, #1
 8102690:	d123      	bne.n	81026da <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102692:	f7ff fda3 	bl	81021dc <HAL_GetCurrentCPUID>
 8102696:	4603      	mov	r3, r0
 8102698:	2b01      	cmp	r3, #1
 810269a:	d133      	bne.n	8102704 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810269c:	4b1b      	ldr	r3, [pc, #108]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 810269e:	695b      	ldr	r3, [r3, #20]
 81026a0:	4a1a      	ldr	r2, [pc, #104]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 81026a2:	f023 0302 	bic.w	r3, r3, #2
 81026a6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026a8:	4b19      	ldr	r3, [pc, #100]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026aa:	691b      	ldr	r3, [r3, #16]
 81026ac:	4a18      	ldr	r2, [pc, #96]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026ae:	f043 0304 	orr.w	r3, r3, #4
 81026b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81026b4:	f3bf 8f4f 	dsb	sy
}
 81026b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81026ba:	f3bf 8f6f 	isb	sy
}
 81026be:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81026c0:	7afb      	ldrb	r3, [r7, #11]
 81026c2:	2b01      	cmp	r3, #1
 81026c4:	d101      	bne.n	81026ca <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81026c6:	bf30      	wfi
 81026c8:	e000      	b.n	81026cc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81026ca:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026cc:	4b10      	ldr	r3, [pc, #64]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026ce:	691b      	ldr	r3, [r3, #16]
 81026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8102710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026d2:	f023 0304 	bic.w	r3, r3, #4
 81026d6:	6113      	str	r3, [r2, #16]
 81026d8:	e015      	b.n	8102706 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81026da:	f7ff fd7f 	bl	81021dc <HAL_GetCurrentCPUID>
 81026de:	4603      	mov	r3, r0
 81026e0:	2b03      	cmp	r3, #3
 81026e2:	d106      	bne.n	81026f2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81026e4:	4b09      	ldr	r3, [pc, #36]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 81026e6:	691b      	ldr	r3, [r3, #16]
 81026e8:	4a08      	ldr	r2, [pc, #32]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 81026ea:	f023 0304 	bic.w	r3, r3, #4
 81026ee:	6113      	str	r3, [r2, #16]
 81026f0:	e009      	b.n	8102706 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81026f2:	4b06      	ldr	r3, [pc, #24]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 81026f4:	695b      	ldr	r3, [r3, #20]
 81026f6:	4a05      	ldr	r2, [pc, #20]	@ (810270c <HAL_PWREx_EnterSTOPMode+0xec>)
 81026f8:	f023 0304 	bic.w	r3, r3, #4
 81026fc:	6153      	str	r3, [r2, #20]
 81026fe:	e002      	b.n	8102706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102700:	bf00      	nop
 8102702:	e000      	b.n	8102706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102704:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102706:	3710      	adds	r7, #16
 8102708:	46bd      	mov	sp, r7
 810270a:	bd80      	pop	{r7, pc}
 810270c:	58024800 	.word	0x58024800
 8102710:	e000ed00 	.word	0xe000ed00

08102714 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102714:	b580      	push	{r7, lr}
 8102716:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102718:	f7ff fd60 	bl	81021dc <HAL_GetCurrentCPUID>
 810271c:	4603      	mov	r3, r0
 810271e:	2b03      	cmp	r3, #3
 8102720:	d101      	bne.n	8102726 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102722:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102724:	e001      	b.n	810272a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102726:	bf40      	sev
    __WFE ();
 8102728:	bf20      	wfe
}
 810272a:	bf00      	nop
 810272c:	bd80      	pop	{r7, pc}
	...

08102730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102730:	b480      	push	{r7}
 8102732:	b089      	sub	sp, #36	@ 0x24
 8102734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102736:	4bb3      	ldr	r3, [pc, #716]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102738:	691b      	ldr	r3, [r3, #16]
 810273a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810273e:	2b18      	cmp	r3, #24
 8102740:	f200 8155 	bhi.w	81029ee <HAL_RCC_GetSysClockFreq+0x2be>
 8102744:	a201      	add	r2, pc, #4	@ (adr r2, 810274c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810274a:	bf00      	nop
 810274c:	081027b1 	.word	0x081027b1
 8102750:	081029ef 	.word	0x081029ef
 8102754:	081029ef 	.word	0x081029ef
 8102758:	081029ef 	.word	0x081029ef
 810275c:	081029ef 	.word	0x081029ef
 8102760:	081029ef 	.word	0x081029ef
 8102764:	081029ef 	.word	0x081029ef
 8102768:	081029ef 	.word	0x081029ef
 810276c:	081027d7 	.word	0x081027d7
 8102770:	081029ef 	.word	0x081029ef
 8102774:	081029ef 	.word	0x081029ef
 8102778:	081029ef 	.word	0x081029ef
 810277c:	081029ef 	.word	0x081029ef
 8102780:	081029ef 	.word	0x081029ef
 8102784:	081029ef 	.word	0x081029ef
 8102788:	081029ef 	.word	0x081029ef
 810278c:	081027dd 	.word	0x081027dd
 8102790:	081029ef 	.word	0x081029ef
 8102794:	081029ef 	.word	0x081029ef
 8102798:	081029ef 	.word	0x081029ef
 810279c:	081029ef 	.word	0x081029ef
 81027a0:	081029ef 	.word	0x081029ef
 81027a4:	081029ef 	.word	0x081029ef
 81027a8:	081029ef 	.word	0x081029ef
 81027ac:	081027e3 	.word	0x081027e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81027b0:	4b94      	ldr	r3, [pc, #592]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	f003 0320 	and.w	r3, r3, #32
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d009      	beq.n	81027d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81027bc:	4b91      	ldr	r3, [pc, #580]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027be:	681b      	ldr	r3, [r3, #0]
 81027c0:	08db      	lsrs	r3, r3, #3
 81027c2:	f003 0303 	and.w	r3, r3, #3
 81027c6:	4a90      	ldr	r2, [pc, #576]	@ (8102a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027c8:	fa22 f303 	lsr.w	r3, r2, r3
 81027cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81027ce:	e111      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81027d0:	4b8d      	ldr	r3, [pc, #564]	@ (8102a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027d2:	61bb      	str	r3, [r7, #24]
      break;
 81027d4:	e10e      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81027d6:	4b8d      	ldr	r3, [pc, #564]	@ (8102a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81027d8:	61bb      	str	r3, [r7, #24]
      break;
 81027da:	e10b      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81027dc:	4b8c      	ldr	r3, [pc, #560]	@ (8102a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81027de:	61bb      	str	r3, [r7, #24]
      break;
 81027e0:	e108      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81027e2:	4b88      	ldr	r3, [pc, #544]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81027e6:	f003 0303 	and.w	r3, r3, #3
 81027ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81027ec:	4b85      	ldr	r3, [pc, #532]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81027f0:	091b      	lsrs	r3, r3, #4
 81027f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81027f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81027f8:	4b82      	ldr	r3, [pc, #520]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81027fc:	f003 0301 	and.w	r3, r3, #1
 8102800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102802:	4b80      	ldr	r3, [pc, #512]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102806:	08db      	lsrs	r3, r3, #3
 8102808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810280c:	68fa      	ldr	r2, [r7, #12]
 810280e:	fb02 f303 	mul.w	r3, r2, r3
 8102812:	ee07 3a90 	vmov	s15, r3
 8102816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810281a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810281e:	693b      	ldr	r3, [r7, #16]
 8102820:	2b00      	cmp	r3, #0
 8102822:	f000 80e1 	beq.w	81029e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8102826:	697b      	ldr	r3, [r7, #20]
 8102828:	2b02      	cmp	r3, #2
 810282a:	f000 8083 	beq.w	8102934 <HAL_RCC_GetSysClockFreq+0x204>
 810282e:	697b      	ldr	r3, [r7, #20]
 8102830:	2b02      	cmp	r3, #2
 8102832:	f200 80a1 	bhi.w	8102978 <HAL_RCC_GetSysClockFreq+0x248>
 8102836:	697b      	ldr	r3, [r7, #20]
 8102838:	2b00      	cmp	r3, #0
 810283a:	d003      	beq.n	8102844 <HAL_RCC_GetSysClockFreq+0x114>
 810283c:	697b      	ldr	r3, [r7, #20]
 810283e:	2b01      	cmp	r3, #1
 8102840:	d056      	beq.n	81028f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102842:	e099      	b.n	8102978 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102844:	4b6f      	ldr	r3, [pc, #444]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	f003 0320 	and.w	r3, r3, #32
 810284c:	2b00      	cmp	r3, #0
 810284e:	d02d      	beq.n	81028ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102850:	4b6c      	ldr	r3, [pc, #432]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	08db      	lsrs	r3, r3, #3
 8102856:	f003 0303 	and.w	r3, r3, #3
 810285a:	4a6b      	ldr	r2, [pc, #428]	@ (8102a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810285c:	fa22 f303 	lsr.w	r3, r2, r3
 8102860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	ee07 3a90 	vmov	s15, r3
 8102868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810286c:	693b      	ldr	r3, [r7, #16]
 810286e:	ee07 3a90 	vmov	s15, r3
 8102872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810287a:	4b62      	ldr	r3, [pc, #392]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102882:	ee07 3a90 	vmov	s15, r3
 8102886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810288a:	ed97 6a02 	vldr	s12, [r7, #8]
 810288e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810289a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81028aa:	e087      	b.n	81029bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81028ac:	693b      	ldr	r3, [r7, #16]
 81028ae:	ee07 3a90 	vmov	s15, r3
 81028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 81028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028be:	4b51      	ldr	r3, [pc, #324]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028c6:	ee07 3a90 	vmov	s15, r3
 81028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81028d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81028ee:	e065      	b.n	81029bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81028f0:	693b      	ldr	r3, [r7, #16]
 81028f2:	ee07 3a90 	vmov	s15, r3
 81028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 81028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102902:	4b40      	ldr	r3, [pc, #256]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810290a:	ee07 3a90 	vmov	s15, r3
 810290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102912:	ed97 6a02 	vldr	s12, [r7, #8]
 8102916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810292e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102932:	e043      	b.n	81029bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102934:	693b      	ldr	r3, [r7, #16]
 8102936:	ee07 3a90 	vmov	s15, r3
 810293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810293e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102946:	4b2f      	ldr	r3, [pc, #188]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810294e:	ee07 3a90 	vmov	s15, r3
 8102952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102956:	ed97 6a02 	vldr	s12, [r7, #8]
 810295a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102976:	e021      	b.n	81029bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102978:	693b      	ldr	r3, [r7, #16]
 810297a:	ee07 3a90 	vmov	s15, r3
 810297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810298a:	4b1e      	ldr	r3, [pc, #120]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102992:	ee07 3a90 	vmov	s15, r3
 8102996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810299a:	ed97 6a02 	vldr	s12, [r7, #8]
 810299e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81029ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81029bc:	4b11      	ldr	r3, [pc, #68]	@ (8102a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81029c0:	0a5b      	lsrs	r3, r3, #9
 81029c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81029c6:	3301      	adds	r3, #1
 81029c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81029ca:	683b      	ldr	r3, [r7, #0]
 81029cc:	ee07 3a90 	vmov	s15, r3
 81029d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81029d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81029d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029e0:	ee17 3a90 	vmov	r3, s15
 81029e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81029e6:	e005      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81029e8:	2300      	movs	r3, #0
 81029ea:	61bb      	str	r3, [r7, #24]
      break;
 81029ec:	e002      	b.n	81029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81029ee:	4b07      	ldr	r3, [pc, #28]	@ (8102a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81029f0:	61bb      	str	r3, [r7, #24]
      break;
 81029f2:	bf00      	nop
  }

  return sysclockfreq;
 81029f4:	69bb      	ldr	r3, [r7, #24]
}
 81029f6:	4618      	mov	r0, r3
 81029f8:	3724      	adds	r7, #36	@ 0x24
 81029fa:	46bd      	mov	sp, r7
 81029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a00:	4770      	bx	lr
 8102a02:	bf00      	nop
 8102a04:	58024400 	.word	0x58024400
 8102a08:	03d09000 	.word	0x03d09000
 8102a0c:	003d0900 	.word	0x003d0900
 8102a10:	017d7840 	.word	0x017d7840
 8102a14:	46000000 	.word	0x46000000
 8102a18:	4c742400 	.word	0x4c742400
 8102a1c:	4a742400 	.word	0x4a742400
 8102a20:	4bbebc20 	.word	0x4bbebc20

08102a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102a24:	b580      	push	{r7, lr}
 8102a26:	b082      	sub	sp, #8
 8102a28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102a2a:	f7ff fe81 	bl	8102730 <HAL_RCC_GetSysClockFreq>
 8102a2e:	4602      	mov	r2, r0
 8102a30:	4b11      	ldr	r3, [pc, #68]	@ (8102a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8102a32:	699b      	ldr	r3, [r3, #24]
 8102a34:	0a1b      	lsrs	r3, r3, #8
 8102a36:	f003 030f 	and.w	r3, r3, #15
 8102a3a:	4910      	ldr	r1, [pc, #64]	@ (8102a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8102a3c:	5ccb      	ldrb	r3, [r1, r3]
 8102a3e:	f003 031f 	and.w	r3, r3, #31
 8102a42:	fa22 f303 	lsr.w	r3, r2, r3
 8102a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a48:	4b0b      	ldr	r3, [pc, #44]	@ (8102a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8102a4a:	699b      	ldr	r3, [r3, #24]
 8102a4c:	f003 030f 	and.w	r3, r3, #15
 8102a50:	4a0a      	ldr	r2, [pc, #40]	@ (8102a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8102a52:	5cd3      	ldrb	r3, [r2, r3]
 8102a54:	f003 031f 	and.w	r3, r3, #31
 8102a58:	687a      	ldr	r2, [r7, #4]
 8102a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8102a5e:	4a08      	ldr	r2, [pc, #32]	@ (8102a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a60:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a62:	4b07      	ldr	r3, [pc, #28]	@ (8102a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	4a07      	ldr	r2, [pc, #28]	@ (8102a84 <HAL_RCC_GetHCLKFreq+0x60>)
 8102a68:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102a6a:	4b05      	ldr	r3, [pc, #20]	@ (8102a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a6c:	681b      	ldr	r3, [r3, #0]
}
 8102a6e:	4618      	mov	r0, r3
 8102a70:	3708      	adds	r7, #8
 8102a72:	46bd      	mov	sp, r7
 8102a74:	bd80      	pop	{r7, pc}
 8102a76:	bf00      	nop
 8102a78:	58024400 	.word	0x58024400
 8102a7c:	0810b980 	.word	0x0810b980
 8102a80:	10000004 	.word	0x10000004
 8102a84:	10000000 	.word	0x10000000

08102a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102a88:	b580      	push	{r7, lr}
 8102a8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102a8c:	f7ff ffca 	bl	8102a24 <HAL_RCC_GetHCLKFreq>
 8102a90:	4602      	mov	r2, r0
 8102a92:	4b06      	ldr	r3, [pc, #24]	@ (8102aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8102a94:	69db      	ldr	r3, [r3, #28]
 8102a96:	091b      	lsrs	r3, r3, #4
 8102a98:	f003 0307 	and.w	r3, r3, #7
 8102a9c:	4904      	ldr	r1, [pc, #16]	@ (8102ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102a9e:	5ccb      	ldrb	r3, [r1, r3]
 8102aa0:	f003 031f 	and.w	r3, r3, #31
 8102aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102aa8:	4618      	mov	r0, r3
 8102aaa:	bd80      	pop	{r7, pc}
 8102aac:	58024400 	.word	0x58024400
 8102ab0:	0810b980 	.word	0x0810b980

08102ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102ab8:	f7ff ffb4 	bl	8102a24 <HAL_RCC_GetHCLKFreq>
 8102abc:	4602      	mov	r2, r0
 8102abe:	4b06      	ldr	r3, [pc, #24]	@ (8102ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102ac0:	69db      	ldr	r3, [r3, #28]
 8102ac2:	0a1b      	lsrs	r3, r3, #8
 8102ac4:	f003 0307 	and.w	r3, r3, #7
 8102ac8:	4904      	ldr	r1, [pc, #16]	@ (8102adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8102aca:	5ccb      	ldrb	r3, [r1, r3]
 8102acc:	f003 031f 	and.w	r3, r3, #31
 8102ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102ad4:	4618      	mov	r0, r3
 8102ad6:	bd80      	pop	{r7, pc}
 8102ad8:	58024400 	.word	0x58024400
 8102adc:	0810b980 	.word	0x0810b980

08102ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102ae4:	b0ca      	sub	sp, #296	@ 0x128
 8102ae6:	af00      	add	r7, sp, #0
 8102ae8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102aec:	2300      	movs	r3, #0
 8102aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102af2:	2300      	movs	r3, #0
 8102af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102b04:	2500      	movs	r5, #0
 8102b06:	ea54 0305 	orrs.w	r3, r4, r5
 8102b0a:	d049      	beq.n	8102ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102b12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102b16:	d02f      	beq.n	8102b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102b18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102b1c:	d828      	bhi.n	8102b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b22:	d01a      	beq.n	8102b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b28:	d822      	bhi.n	8102b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b2a:	2b00      	cmp	r3, #0
 8102b2c:	d003      	beq.n	8102b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102b32:	d007      	beq.n	8102b44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102b34:	e01c      	b.n	8102b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b36:	4bb8      	ldr	r3, [pc, #736]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b3a:	4ab7      	ldr	r2, [pc, #732]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b42:	e01a      	b.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b48:	3308      	adds	r3, #8
 8102b4a:	2102      	movs	r1, #2
 8102b4c:	4618      	mov	r0, r3
 8102b4e:	f001 fc8f 	bl	8104470 <RCCEx_PLL2_Config>
 8102b52:	4603      	mov	r3, r0
 8102b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b58:	e00f      	b.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b5e:	3328      	adds	r3, #40	@ 0x28
 8102b60:	2102      	movs	r1, #2
 8102b62:	4618      	mov	r0, r3
 8102b64:	f001 fd36 	bl	81045d4 <RCCEx_PLL3_Config>
 8102b68:	4603      	mov	r3, r0
 8102b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b6e:	e004      	b.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b70:	2301      	movs	r3, #1
 8102b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b76:	e000      	b.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d10a      	bne.n	8102b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102b82:	4ba5      	ldr	r3, [pc, #660]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102b90:	4aa1      	ldr	r2, [pc, #644]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b92:	430b      	orrs	r3, r1
 8102b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b96:	e003      	b.n	8102ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ba8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102bac:	f04f 0900 	mov.w	r9, #0
 8102bb0:	ea58 0309 	orrs.w	r3, r8, r9
 8102bb4:	d047      	beq.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102bbc:	2b04      	cmp	r3, #4
 8102bbe:	d82a      	bhi.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8102bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bc6:	bf00      	nop
 8102bc8:	08102bdd 	.word	0x08102bdd
 8102bcc:	08102beb 	.word	0x08102beb
 8102bd0:	08102c01 	.word	0x08102c01
 8102bd4:	08102c1f 	.word	0x08102c1f
 8102bd8:	08102c1f 	.word	0x08102c1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102be0:	4a8d      	ldr	r2, [pc, #564]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102be8:	e01a      	b.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bee:	3308      	adds	r3, #8
 8102bf0:	2100      	movs	r1, #0
 8102bf2:	4618      	mov	r0, r3
 8102bf4:	f001 fc3c 	bl	8104470 <RCCEx_PLL2_Config>
 8102bf8:	4603      	mov	r3, r0
 8102bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102bfe:	e00f      	b.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c04:	3328      	adds	r3, #40	@ 0x28
 8102c06:	2100      	movs	r1, #0
 8102c08:	4618      	mov	r0, r3
 8102c0a:	f001 fce3 	bl	81045d4 <RCCEx_PLL3_Config>
 8102c0e:	4603      	mov	r3, r0
 8102c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c14:	e004      	b.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c16:	2301      	movs	r3, #1
 8102c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c1c:	e000      	b.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c24:	2b00      	cmp	r3, #0
 8102c26:	d10a      	bne.n	8102c3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102c28:	4b7b      	ldr	r3, [pc, #492]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c2c:	f023 0107 	bic.w	r1, r3, #7
 8102c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c36:	4a78      	ldr	r2, [pc, #480]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c38:	430b      	orrs	r3, r1
 8102c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102c3c:	e003      	b.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102c52:	f04f 0b00 	mov.w	fp, #0
 8102c56:	ea5a 030b 	orrs.w	r3, sl, fp
 8102c5a:	d04c      	beq.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c66:	d030      	beq.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c6c:	d829      	bhi.n	8102cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c70:	d02d      	beq.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c74:	d825      	bhi.n	8102cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c76:	2b80      	cmp	r3, #128	@ 0x80
 8102c78:	d018      	beq.n	8102cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102c7a:	2b80      	cmp	r3, #128	@ 0x80
 8102c7c:	d821      	bhi.n	8102cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d002      	beq.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102c82:	2b40      	cmp	r3, #64	@ 0x40
 8102c84:	d007      	beq.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102c86:	e01c      	b.n	8102cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c88:	4b63      	ldr	r3, [pc, #396]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c8c:	4a62      	ldr	r2, [pc, #392]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c94:	e01c      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c9a:	3308      	adds	r3, #8
 8102c9c:	2100      	movs	r1, #0
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	f001 fbe6 	bl	8104470 <RCCEx_PLL2_Config>
 8102ca4:	4603      	mov	r3, r0
 8102ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102caa:	e011      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb0:	3328      	adds	r3, #40	@ 0x28
 8102cb2:	2100      	movs	r1, #0
 8102cb4:	4618      	mov	r0, r3
 8102cb6:	f001 fc8d 	bl	81045d4 <RCCEx_PLL3_Config>
 8102cba:	4603      	mov	r3, r0
 8102cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102cc0:	e006      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cc2:	2301      	movs	r3, #1
 8102cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102cc8:	e002      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102cca:	bf00      	nop
 8102ccc:	e000      	b.n	8102cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d10a      	bne.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102cdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ce8:	430b      	orrs	r3, r1
 8102cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8102cec:	e003      	b.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102d06:	2300      	movs	r3, #0
 8102d08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102d0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102d10:	460b      	mov	r3, r1
 8102d12:	4313      	orrs	r3, r2
 8102d14:	d053      	beq.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d22:	d035      	beq.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102d24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d28:	d82e      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d2e:	d031      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102d30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d34:	d828      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d3a:	d01a      	beq.n	8102d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d40:	d822      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d003      	beq.n	8102d4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102d4a:	d007      	beq.n	8102d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102d4c:	e01c      	b.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d4e:	4b32      	ldr	r3, [pc, #200]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d52:	4a31      	ldr	r2, [pc, #196]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d5a:	e01c      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d60:	3308      	adds	r3, #8
 8102d62:	2100      	movs	r1, #0
 8102d64:	4618      	mov	r0, r3
 8102d66:	f001 fb83 	bl	8104470 <RCCEx_PLL2_Config>
 8102d6a:	4603      	mov	r3, r0
 8102d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102d70:	e011      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d76:	3328      	adds	r3, #40	@ 0x28
 8102d78:	2100      	movs	r1, #0
 8102d7a:	4618      	mov	r0, r3
 8102d7c:	f001 fc2a 	bl	81045d4 <RCCEx_PLL3_Config>
 8102d80:	4603      	mov	r3, r0
 8102d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d86:	e006      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102d88:	2301      	movs	r3, #1
 8102d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d8e:	e002      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d90:	bf00      	nop
 8102d92:	e000      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d9a:	2b00      	cmp	r3, #0
 8102d9c:	d10b      	bne.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102da2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102dae:	4a1a      	ldr	r2, [pc, #104]	@ (8102e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102db0:	430b      	orrs	r3, r1
 8102db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8102db4:	e003      	b.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102dca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102dce:	2300      	movs	r3, #0
 8102dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102dd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102dd8:	460b      	mov	r3, r1
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	d056      	beq.n	8102e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102de2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102dea:	d038      	beq.n	8102e5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102df0:	d831      	bhi.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102df2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102df6:	d034      	beq.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102df8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102dfc:	d82b      	bhi.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102dfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102e02:	d01d      	beq.n	8102e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102e08:	d825      	bhi.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d006      	beq.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102e12:	d00a      	beq.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102e14:	e01f      	b.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102e16:	bf00      	nop
 8102e18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e1c:	4ba2      	ldr	r3, [pc, #648]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102e20:	4aa1      	ldr	r2, [pc, #644]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e28:	e01c      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e2e:	3308      	adds	r3, #8
 8102e30:	2100      	movs	r1, #0
 8102e32:	4618      	mov	r0, r3
 8102e34:	f001 fb1c 	bl	8104470 <RCCEx_PLL2_Config>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102e3e:	e011      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e44:	3328      	adds	r3, #40	@ 0x28
 8102e46:	2100      	movs	r1, #0
 8102e48:	4618      	mov	r0, r3
 8102e4a:	f001 fbc3 	bl	81045d4 <RCCEx_PLL3_Config>
 8102e4e:	4603      	mov	r3, r0
 8102e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e54:	e006      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102e56:	2301      	movs	r3, #1
 8102e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102e5c:	e002      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e5e:	bf00      	nop
 8102e60:	e000      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	d10b      	bne.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102e6c:	4b8e      	ldr	r3, [pc, #568]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102e7c:	4a8a      	ldr	r2, [pc, #552]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e7e:	430b      	orrs	r3, r1
 8102e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8102e82:	e003      	b.n	8102e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102e98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102e9c:	2300      	movs	r3, #0
 8102e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102ea2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102ea6:	460b      	mov	r3, r1
 8102ea8:	4313      	orrs	r3, r2
 8102eaa:	d03a      	beq.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102eb2:	2b30      	cmp	r3, #48	@ 0x30
 8102eb4:	d01f      	beq.n	8102ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102eb6:	2b30      	cmp	r3, #48	@ 0x30
 8102eb8:	d819      	bhi.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102eba:	2b20      	cmp	r3, #32
 8102ebc:	d00c      	beq.n	8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102ebe:	2b20      	cmp	r3, #32
 8102ec0:	d815      	bhi.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102ec2:	2b00      	cmp	r3, #0
 8102ec4:	d019      	beq.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102ec6:	2b10      	cmp	r3, #16
 8102ec8:	d111      	bne.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102eca:	4b77      	ldr	r3, [pc, #476]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ece:	4a76      	ldr	r2, [pc, #472]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102ed6:	e011      	b.n	8102efc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102edc:	3308      	adds	r3, #8
 8102ede:	2102      	movs	r1, #2
 8102ee0:	4618      	mov	r0, r3
 8102ee2:	f001 fac5 	bl	8104470 <RCCEx_PLL2_Config>
 8102ee6:	4603      	mov	r3, r0
 8102ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102eec:	e006      	b.n	8102efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102eee:	2301      	movs	r3, #1
 8102ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ef4:	e002      	b.n	8102efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102ef6:	bf00      	nop
 8102ef8:	e000      	b.n	8102efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f00:	2b00      	cmp	r3, #0
 8102f02:	d10a      	bne.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102f04:	4b68      	ldr	r3, [pc, #416]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102f08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102f12:	4a65      	ldr	r2, [pc, #404]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f14:	430b      	orrs	r3, r1
 8102f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102f18:	e003      	b.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102f32:	2300      	movs	r3, #0
 8102f34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102f38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102f3c:	460b      	mov	r3, r1
 8102f3e:	4313      	orrs	r3, r2
 8102f40:	d051      	beq.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102f4c:	d035      	beq.n	8102fba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102f52:	d82e      	bhi.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102f58:	d031      	beq.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102f5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102f5e:	d828      	bhi.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102f64:	d01a      	beq.n	8102f9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102f6a:	d822      	bhi.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	d003      	beq.n	8102f78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f74:	d007      	beq.n	8102f86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102f76:	e01c      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f78:	4b4b      	ldr	r3, [pc, #300]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f7c:	4a4a      	ldr	r2, [pc, #296]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f84:	e01c      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f8a:	3308      	adds	r3, #8
 8102f8c:	2100      	movs	r1, #0
 8102f8e:	4618      	mov	r0, r3
 8102f90:	f001 fa6e 	bl	8104470 <RCCEx_PLL2_Config>
 8102f94:	4603      	mov	r3, r0
 8102f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f9a:	e011      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fa0:	3328      	adds	r3, #40	@ 0x28
 8102fa2:	2100      	movs	r1, #0
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	f001 fb15 	bl	81045d4 <RCCEx_PLL3_Config>
 8102faa:	4603      	mov	r3, r0
 8102fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102fb0:	e006      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102fb2:	2301      	movs	r3, #1
 8102fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102fb8:	e002      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102fba:	bf00      	nop
 8102fbc:	e000      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fc4:	2b00      	cmp	r3, #0
 8102fc6:	d10a      	bne.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102fc8:	4b37      	ldr	r3, [pc, #220]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102fcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102fd6:	4a34      	ldr	r2, [pc, #208]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fd8:	430b      	orrs	r3, r1
 8102fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8102fdc:	e003      	b.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102ff6:	2300      	movs	r3, #0
 8102ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102ffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103000:	460b      	mov	r3, r1
 8103002:	4313      	orrs	r3, r2
 8103004:	d056      	beq.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810300a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810300c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103010:	d033      	beq.n	810307a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103016:	d82c      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810301c:	d02f      	beq.n	810307e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810301e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103022:	d826      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103028:	d02b      	beq.n	8103082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810302a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810302e:	d820      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103034:	d012      	beq.n	810305c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810303a:	d81a      	bhi.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810303c:	2b00      	cmp	r3, #0
 810303e:	d022      	beq.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103044:	d115      	bne.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810304a:	3308      	adds	r3, #8
 810304c:	2101      	movs	r1, #1
 810304e:	4618      	mov	r0, r3
 8103050:	f001 fa0e 	bl	8104470 <RCCEx_PLL2_Config>
 8103054:	4603      	mov	r3, r0
 8103056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810305a:	e015      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103060:	3328      	adds	r3, #40	@ 0x28
 8103062:	2101      	movs	r1, #1
 8103064:	4618      	mov	r0, r3
 8103066:	f001 fab5 	bl	81045d4 <RCCEx_PLL3_Config>
 810306a:	4603      	mov	r3, r0
 810306c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103070:	e00a      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103072:	2301      	movs	r3, #1
 8103074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103078:	e006      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810307a:	bf00      	nop
 810307c:	e004      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810307e:	bf00      	nop
 8103080:	e002      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103082:	bf00      	nop
 8103084:	e000      	b.n	8103088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810308c:	2b00      	cmp	r3, #0
 810308e:	d10d      	bne.n	81030ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103090:	4b05      	ldr	r3, [pc, #20]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103094:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810309c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810309e:	4a02      	ldr	r2, [pc, #8]	@ (81030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030a0:	430b      	orrs	r3, r1
 81030a2:	6513      	str	r3, [r2, #80]	@ 0x50
 81030a4:	e006      	b.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81030a6:	bf00      	nop
 81030a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81030c4:	2300      	movs	r3, #0
 81030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81030ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81030ce:	460b      	mov	r3, r1
 81030d0:	4313      	orrs	r3, r2
 81030d2:	d055      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81030e0:	d033      	beq.n	810314a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81030e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81030e6:	d82c      	bhi.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81030ec:	d02f      	beq.n	810314e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81030f2:	d826      	bhi.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81030f8:	d02b      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81030fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81030fe:	d820      	bhi.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103104:	d012      	beq.n	810312c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810310a:	d81a      	bhi.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810310c:	2b00      	cmp	r3, #0
 810310e:	d022      	beq.n	8103156 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103114:	d115      	bne.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810311a:	3308      	adds	r3, #8
 810311c:	2101      	movs	r1, #1
 810311e:	4618      	mov	r0, r3
 8103120:	f001 f9a6 	bl	8104470 <RCCEx_PLL2_Config>
 8103124:	4603      	mov	r3, r0
 8103126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810312a:	e015      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103130:	3328      	adds	r3, #40	@ 0x28
 8103132:	2101      	movs	r1, #1
 8103134:	4618      	mov	r0, r3
 8103136:	f001 fa4d 	bl	81045d4 <RCCEx_PLL3_Config>
 810313a:	4603      	mov	r3, r0
 810313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103140:	e00a      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103142:	2301      	movs	r3, #1
 8103144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103148:	e006      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810314a:	bf00      	nop
 810314c:	e004      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810314e:	bf00      	nop
 8103150:	e002      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103152:	bf00      	nop
 8103154:	e000      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810315c:	2b00      	cmp	r3, #0
 810315e:	d10b      	bne.n	8103178 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103160:	4ba4      	ldr	r3, [pc, #656]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103164:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810316c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103170:	4aa0      	ldr	r2, [pc, #640]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103172:	430b      	orrs	r3, r1
 8103174:	6593      	str	r3, [r2, #88]	@ 0x58
 8103176:	e003      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810317c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103188:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810318c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103190:	2300      	movs	r3, #0
 8103192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810319a:	460b      	mov	r3, r1
 810319c:	4313      	orrs	r3, r2
 810319e:	d037      	beq.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81031a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81031aa:	d00e      	beq.n	81031ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81031b0:	d816      	bhi.n	81031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81031b2:	2b00      	cmp	r3, #0
 81031b4:	d018      	beq.n	81031e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81031b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81031ba:	d111      	bne.n	81031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031bc:	4b8d      	ldr	r3, [pc, #564]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031c0:	4a8c      	ldr	r2, [pc, #560]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81031c8:	e00f      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ce:	3308      	adds	r3, #8
 81031d0:	2101      	movs	r1, #1
 81031d2:	4618      	mov	r0, r3
 81031d4:	f001 f94c 	bl	8104470 <RCCEx_PLL2_Config>
 81031d8:	4603      	mov	r3, r0
 81031da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81031de:	e004      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81031e0:	2301      	movs	r3, #1
 81031e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81031e6:	e000      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d10a      	bne.n	8103208 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81031f2:	4b80      	ldr	r3, [pc, #512]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81031f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103200:	4a7c      	ldr	r2, [pc, #496]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103202:	430b      	orrs	r3, r1
 8103204:	6513      	str	r3, [r2, #80]	@ 0x50
 8103206:	e003      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810320c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103218:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810321c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103220:	2300      	movs	r3, #0
 8103222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103226:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810322a:	460b      	mov	r3, r1
 810322c:	4313      	orrs	r3, r2
 810322e:	d039      	beq.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103236:	2b03      	cmp	r3, #3
 8103238:	d81c      	bhi.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810323a:	a201      	add	r2, pc, #4	@ (adr r2, 8103240 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103240:	0810327d 	.word	0x0810327d
 8103244:	08103251 	.word	0x08103251
 8103248:	0810325f 	.word	0x0810325f
 810324c:	0810327d 	.word	0x0810327d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103250:	4b68      	ldr	r3, [pc, #416]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103254:	4a67      	ldr	r2, [pc, #412]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810325a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810325c:	e00f      	b.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103262:	3308      	adds	r3, #8
 8103264:	2102      	movs	r1, #2
 8103266:	4618      	mov	r0, r3
 8103268:	f001 f902 	bl	8104470 <RCCEx_PLL2_Config>
 810326c:	4603      	mov	r3, r0
 810326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103272:	e004      	b.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103274:	2301      	movs	r3, #1
 8103276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810327a:	e000      	b.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103282:	2b00      	cmp	r3, #0
 8103284:	d10a      	bne.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103286:	4b5b      	ldr	r3, [pc, #364]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810328a:	f023 0103 	bic.w	r1, r3, #3
 810328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103294:	4a57      	ldr	r2, [pc, #348]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103296:	430b      	orrs	r3, r1
 8103298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810329a:	e003      	b.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810329c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81032b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81032b4:	2300      	movs	r3, #0
 81032b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81032ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81032be:	460b      	mov	r3, r1
 81032c0:	4313      	orrs	r3, r2
 81032c2:	f000 809f 	beq.w	8103404 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81032c6:	4b4c      	ldr	r3, [pc, #304]	@ (81033f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	4a4b      	ldr	r2, [pc, #300]	@ (81033f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81032cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81032d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81032d2:	f7fe fe43 	bl	8101f5c <HAL_GetTick>
 81032d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81032da:	e00b      	b.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81032dc:	f7fe fe3e 	bl	8101f5c <HAL_GetTick>
 81032e0:	4602      	mov	r2, r0
 81032e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81032e6:	1ad3      	subs	r3, r2, r3
 81032e8:	2b64      	cmp	r3, #100	@ 0x64
 81032ea:	d903      	bls.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81032ec:	2303      	movs	r3, #3
 81032ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81032f2:	e005      	b.n	8103300 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81032f4:	4b40      	ldr	r3, [pc, #256]	@ (81033f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81032fc:	2b00      	cmp	r3, #0
 81032fe:	d0ed      	beq.n	81032dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103304:	2b00      	cmp	r3, #0
 8103306:	d179      	bne.n	81033fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103308:	4b3a      	ldr	r3, [pc, #232]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103314:	4053      	eors	r3, r2
 8103316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810331a:	2b00      	cmp	r3, #0
 810331c:	d015      	beq.n	810334a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810331e:	4b35      	ldr	r3, [pc, #212]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103326:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810332a:	4b32      	ldr	r3, [pc, #200]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810332e:	4a31      	ldr	r2, [pc, #196]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103334:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103336:	4b2f      	ldr	r3, [pc, #188]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810333a:	4a2e      	ldr	r2, [pc, #184]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810333c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103340:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103342:	4a2c      	ldr	r2, [pc, #176]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103348:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810334e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103356:	d118      	bne.n	810338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103358:	f7fe fe00 	bl	8101f5c <HAL_GetTick>
 810335c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103360:	e00d      	b.n	810337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103362:	f7fe fdfb 	bl	8101f5c <HAL_GetTick>
 8103366:	4602      	mov	r2, r0
 8103368:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810336c:	1ad2      	subs	r2, r2, r3
 810336e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103372:	429a      	cmp	r2, r3
 8103374:	d903      	bls.n	810337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103376:	2303      	movs	r3, #3
 8103378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810337c:	e005      	b.n	810338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810337e:	4b1d      	ldr	r3, [pc, #116]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103382:	f003 0302 	and.w	r3, r3, #2
 8103386:	2b00      	cmp	r3, #0
 8103388:	d0eb      	beq.n	8103362 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810338e:	2b00      	cmp	r3, #0
 8103390:	d12b      	bne.n	81033ea <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810339e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81033a2:	d110      	bne.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81033a4:	4b13      	ldr	r3, [pc, #76]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033a6:	691b      	ldr	r3, [r3, #16]
 81033a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81033b4:	091b      	lsrs	r3, r3, #4
 81033b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81033ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81033be:	4a0d      	ldr	r2, [pc, #52]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033c0:	430b      	orrs	r3, r1
 81033c2:	6113      	str	r3, [r2, #16]
 81033c4:	e005      	b.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81033c6:	4b0b      	ldr	r3, [pc, #44]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033c8:	691b      	ldr	r3, [r3, #16]
 81033ca:	4a0a      	ldr	r2, [pc, #40]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81033d0:	6113      	str	r3, [r2, #16]
 81033d2:	4b08      	ldr	r3, [pc, #32]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81033d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81033e2:	4a04      	ldr	r2, [pc, #16]	@ (81033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81033e4:	430b      	orrs	r3, r1
 81033e6:	6713      	str	r3, [r2, #112]	@ 0x70
 81033e8:	e00c      	b.n	8103404 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81033ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81033f2:	e007      	b.n	8103404 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81033f4:	58024400 	.word	0x58024400
 81033f8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103408:	e9d3 2300 	ldrd	r2, r3, [r3]
 810340c:	f002 0301 	and.w	r3, r2, #1
 8103410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103414:	2300      	movs	r3, #0
 8103416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810341a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810341e:	460b      	mov	r3, r1
 8103420:	4313      	orrs	r3, r2
 8103422:	f000 8089 	beq.w	8103538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810342a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810342c:	2b28      	cmp	r3, #40	@ 0x28
 810342e:	d86b      	bhi.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8103430:	a201      	add	r2, pc, #4	@ (adr r2, 8103438 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8103432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103436:	bf00      	nop
 8103438:	08103511 	.word	0x08103511
 810343c:	08103509 	.word	0x08103509
 8103440:	08103509 	.word	0x08103509
 8103444:	08103509 	.word	0x08103509
 8103448:	08103509 	.word	0x08103509
 810344c:	08103509 	.word	0x08103509
 8103450:	08103509 	.word	0x08103509
 8103454:	08103509 	.word	0x08103509
 8103458:	081034dd 	.word	0x081034dd
 810345c:	08103509 	.word	0x08103509
 8103460:	08103509 	.word	0x08103509
 8103464:	08103509 	.word	0x08103509
 8103468:	08103509 	.word	0x08103509
 810346c:	08103509 	.word	0x08103509
 8103470:	08103509 	.word	0x08103509
 8103474:	08103509 	.word	0x08103509
 8103478:	081034f3 	.word	0x081034f3
 810347c:	08103509 	.word	0x08103509
 8103480:	08103509 	.word	0x08103509
 8103484:	08103509 	.word	0x08103509
 8103488:	08103509 	.word	0x08103509
 810348c:	08103509 	.word	0x08103509
 8103490:	08103509 	.word	0x08103509
 8103494:	08103509 	.word	0x08103509
 8103498:	08103511 	.word	0x08103511
 810349c:	08103509 	.word	0x08103509
 81034a0:	08103509 	.word	0x08103509
 81034a4:	08103509 	.word	0x08103509
 81034a8:	08103509 	.word	0x08103509
 81034ac:	08103509 	.word	0x08103509
 81034b0:	08103509 	.word	0x08103509
 81034b4:	08103509 	.word	0x08103509
 81034b8:	08103511 	.word	0x08103511
 81034bc:	08103509 	.word	0x08103509
 81034c0:	08103509 	.word	0x08103509
 81034c4:	08103509 	.word	0x08103509
 81034c8:	08103509 	.word	0x08103509
 81034cc:	08103509 	.word	0x08103509
 81034d0:	08103509 	.word	0x08103509
 81034d4:	08103509 	.word	0x08103509
 81034d8:	08103511 	.word	0x08103511
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034e0:	3308      	adds	r3, #8
 81034e2:	2101      	movs	r1, #1
 81034e4:	4618      	mov	r0, r3
 81034e6:	f000 ffc3 	bl	8104470 <RCCEx_PLL2_Config>
 81034ea:	4603      	mov	r3, r0
 81034ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81034f0:	e00f      	b.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034f6:	3328      	adds	r3, #40	@ 0x28
 81034f8:	2101      	movs	r1, #1
 81034fa:	4618      	mov	r0, r3
 81034fc:	f001 f86a 	bl	81045d4 <RCCEx_PLL3_Config>
 8103500:	4603      	mov	r3, r0
 8103502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103506:	e004      	b.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103508:	2301      	movs	r3, #1
 810350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810350e:	e000      	b.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8103510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103516:	2b00      	cmp	r3, #0
 8103518:	d10a      	bne.n	8103530 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810351a:	4bbf      	ldr	r3, [pc, #764]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810351e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103528:	4abb      	ldr	r2, [pc, #748]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810352a:	430b      	orrs	r3, r1
 810352c:	6553      	str	r3, [r2, #84]	@ 0x54
 810352e:	e003      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103540:	f002 0302 	and.w	r3, r2, #2
 8103544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103548:	2300      	movs	r3, #0
 810354a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810354e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103552:	460b      	mov	r3, r1
 8103554:	4313      	orrs	r3, r2
 8103556:	d041      	beq.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810355c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810355e:	2b05      	cmp	r3, #5
 8103560:	d824      	bhi.n	81035ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8103562:	a201      	add	r2, pc, #4	@ (adr r2, 8103568 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8103564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103568:	081035b5 	.word	0x081035b5
 810356c:	08103581 	.word	0x08103581
 8103570:	08103597 	.word	0x08103597
 8103574:	081035b5 	.word	0x081035b5
 8103578:	081035b5 	.word	0x081035b5
 810357c:	081035b5 	.word	0x081035b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103584:	3308      	adds	r3, #8
 8103586:	2101      	movs	r1, #1
 8103588:	4618      	mov	r0, r3
 810358a:	f000 ff71 	bl	8104470 <RCCEx_PLL2_Config>
 810358e:	4603      	mov	r3, r0
 8103590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103594:	e00f      	b.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810359a:	3328      	adds	r3, #40	@ 0x28
 810359c:	2101      	movs	r1, #1
 810359e:	4618      	mov	r0, r3
 81035a0:	f001 f818 	bl	81045d4 <RCCEx_PLL3_Config>
 81035a4:	4603      	mov	r3, r0
 81035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81035aa:	e004      	b.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81035ac:	2301      	movs	r3, #1
 81035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81035b2:	e000      	b.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035ba:	2b00      	cmp	r3, #0
 81035bc:	d10a      	bne.n	81035d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81035be:	4b96      	ldr	r3, [pc, #600]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035c2:	f023 0107 	bic.w	r1, r3, #7
 81035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81035cc:	4a92      	ldr	r2, [pc, #584]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81035ce:	430b      	orrs	r3, r1
 81035d0:	6553      	str	r3, [r2, #84]	@ 0x54
 81035d2:	e003      	b.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035e4:	f002 0304 	and.w	r3, r2, #4
 81035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81035ec:	2300      	movs	r3, #0
 81035ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81035f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81035f6:	460b      	mov	r3, r1
 81035f8:	4313      	orrs	r3, r2
 81035fa:	d044      	beq.n	8103686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103604:	2b05      	cmp	r3, #5
 8103606:	d825      	bhi.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8103608:	a201      	add	r2, pc, #4	@ (adr r2, 8103610 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810360e:	bf00      	nop
 8103610:	0810365d 	.word	0x0810365d
 8103614:	08103629 	.word	0x08103629
 8103618:	0810363f 	.word	0x0810363f
 810361c:	0810365d 	.word	0x0810365d
 8103620:	0810365d 	.word	0x0810365d
 8103624:	0810365d 	.word	0x0810365d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810362c:	3308      	adds	r3, #8
 810362e:	2101      	movs	r1, #1
 8103630:	4618      	mov	r0, r3
 8103632:	f000 ff1d 	bl	8104470 <RCCEx_PLL2_Config>
 8103636:	4603      	mov	r3, r0
 8103638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810363c:	e00f      	b.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103642:	3328      	adds	r3, #40	@ 0x28
 8103644:	2101      	movs	r1, #1
 8103646:	4618      	mov	r0, r3
 8103648:	f000 ffc4 	bl	81045d4 <RCCEx_PLL3_Config>
 810364c:	4603      	mov	r3, r0
 810364e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103652:	e004      	b.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103654:	2301      	movs	r3, #1
 8103656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810365a:	e000      	b.n	810365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103662:	2b00      	cmp	r3, #0
 8103664:	d10b      	bne.n	810367e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103666:	4b6c      	ldr	r3, [pc, #432]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810366a:	f023 0107 	bic.w	r1, r3, #7
 810366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103676:	4a68      	ldr	r2, [pc, #416]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103678:	430b      	orrs	r3, r1
 810367a:	6593      	str	r3, [r2, #88]	@ 0x58
 810367c:	e003      	b.n	8103686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810368e:	f002 0320 	and.w	r3, r2, #32
 8103692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103696:	2300      	movs	r3, #0
 8103698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810369c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81036a0:	460b      	mov	r3, r1
 81036a2:	4313      	orrs	r3, r2
 81036a4:	d055      	beq.n	8103752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81036b2:	d033      	beq.n	810371c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81036b8:	d82c      	bhi.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81036be:	d02f      	beq.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81036c4:	d826      	bhi.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81036ca:	d02b      	beq.n	8103724 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81036cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81036d0:	d820      	bhi.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036d6:	d012      	beq.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81036d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036dc:	d81a      	bhi.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81036de:	2b00      	cmp	r3, #0
 81036e0:	d022      	beq.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81036e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81036e6:	d115      	bne.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ec:	3308      	adds	r3, #8
 81036ee:	2100      	movs	r1, #0
 81036f0:	4618      	mov	r0, r3
 81036f2:	f000 febd 	bl	8104470 <RCCEx_PLL2_Config>
 81036f6:	4603      	mov	r3, r0
 81036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81036fc:	e015      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103702:	3328      	adds	r3, #40	@ 0x28
 8103704:	2102      	movs	r1, #2
 8103706:	4618      	mov	r0, r3
 8103708:	f000 ff64 	bl	81045d4 <RCCEx_PLL3_Config>
 810370c:	4603      	mov	r3, r0
 810370e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103712:	e00a      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103714:	2301      	movs	r3, #1
 8103716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810371a:	e006      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810371c:	bf00      	nop
 810371e:	e004      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103720:	bf00      	nop
 8103722:	e002      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103724:	bf00      	nop
 8103726:	e000      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103728:	bf00      	nop
    }

    if (ret == HAL_OK)
 810372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810372e:	2b00      	cmp	r3, #0
 8103730:	d10b      	bne.n	810374a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103732:	4b39      	ldr	r3, [pc, #228]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103736:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103742:	4a35      	ldr	r2, [pc, #212]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103744:	430b      	orrs	r3, r1
 8103746:	6553      	str	r3, [r2, #84]	@ 0x54
 8103748:	e003      	b.n	8103752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810374e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103756:	e9d3 2300 	ldrd	r2, r3, [r3]
 810375a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810375e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103762:	2300      	movs	r3, #0
 8103764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810376c:	460b      	mov	r3, r1
 810376e:	4313      	orrs	r3, r2
 8103770:	d058      	beq.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810377a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810377e:	d033      	beq.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8103780:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103784:	d82c      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810378a:	d02f      	beq.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810378c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103790:	d826      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103792:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103796:	d02b      	beq.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8103798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810379c:	d820      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810379e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81037a2:	d012      	beq.n	81037ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81037a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81037a8:	d81a      	bhi.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81037aa:	2b00      	cmp	r3, #0
 81037ac:	d022      	beq.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81037ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81037b2:	d115      	bne.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037b8:	3308      	adds	r3, #8
 81037ba:	2100      	movs	r1, #0
 81037bc:	4618      	mov	r0, r3
 81037be:	f000 fe57 	bl	8104470 <RCCEx_PLL2_Config>
 81037c2:	4603      	mov	r3, r0
 81037c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81037c8:	e015      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037ce:	3328      	adds	r3, #40	@ 0x28
 81037d0:	2102      	movs	r1, #2
 81037d2:	4618      	mov	r0, r3
 81037d4:	f000 fefe 	bl	81045d4 <RCCEx_PLL3_Config>
 81037d8:	4603      	mov	r3, r0
 81037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81037de:	e00a      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81037e0:	2301      	movs	r3, #1
 81037e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81037e6:	e006      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81037e8:	bf00      	nop
 81037ea:	e004      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81037ec:	bf00      	nop
 81037ee:	e002      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81037f0:	bf00      	nop
 81037f2:	e000      	b.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d10e      	bne.n	810381c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81037fe:	4b06      	ldr	r3, [pc, #24]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103802:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810380e:	4a02      	ldr	r2, [pc, #8]	@ (8103818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103810:	430b      	orrs	r3, r1
 8103812:	6593      	str	r3, [r2, #88]	@ 0x58
 8103814:	e006      	b.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8103816:	bf00      	nop
 8103818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103828:	e9d3 2300 	ldrd	r2, r3, [r3]
 810382c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103834:	2300      	movs	r3, #0
 8103836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810383a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810383e:	460b      	mov	r3, r1
 8103840:	4313      	orrs	r3, r2
 8103842:	d055      	beq.n	81038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810384c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103850:	d033      	beq.n	81038ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8103852:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103856:	d82c      	bhi.n	81038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810385c:	d02f      	beq.n	81038be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103862:	d826      	bhi.n	81038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103864:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103868:	d02b      	beq.n	81038c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810386a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810386e:	d820      	bhi.n	81038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103874:	d012      	beq.n	810389c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8103876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810387a:	d81a      	bhi.n	81038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810387c:	2b00      	cmp	r3, #0
 810387e:	d022      	beq.n	81038c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8103880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103884:	d115      	bne.n	81038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810388a:	3308      	adds	r3, #8
 810388c:	2100      	movs	r1, #0
 810388e:	4618      	mov	r0, r3
 8103890:	f000 fdee 	bl	8104470 <RCCEx_PLL2_Config>
 8103894:	4603      	mov	r3, r0
 8103896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810389a:	e015      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038a0:	3328      	adds	r3, #40	@ 0x28
 81038a2:	2102      	movs	r1, #2
 81038a4:	4618      	mov	r0, r3
 81038a6:	f000 fe95 	bl	81045d4 <RCCEx_PLL3_Config>
 81038aa:	4603      	mov	r3, r0
 81038ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81038b0:	e00a      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038b2:	2301      	movs	r3, #1
 81038b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81038b8:	e006      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038ba:	bf00      	nop
 81038bc:	e004      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038be:	bf00      	nop
 81038c0:	e002      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038c2:	bf00      	nop
 81038c4:	e000      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038cc:	2b00      	cmp	r3, #0
 81038ce:	d10b      	bne.n	81038e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81038d0:	4ba1      	ldr	r3, [pc, #644]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81038d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81038e0:	4a9d      	ldr	r2, [pc, #628]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038e2:	430b      	orrs	r3, r1
 81038e4:	6593      	str	r3, [r2, #88]	@ 0x58
 81038e6:	e003      	b.n	81038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038f8:	f002 0308 	and.w	r3, r2, #8
 81038fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103900:	2300      	movs	r3, #0
 8103902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810390a:	460b      	mov	r3, r1
 810390c:	4313      	orrs	r3, r2
 810390e:	d01e      	beq.n	810394e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810391c:	d10c      	bne.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103922:	3328      	adds	r3, #40	@ 0x28
 8103924:	2102      	movs	r1, #2
 8103926:	4618      	mov	r0, r3
 8103928:	f000 fe54 	bl	81045d4 <RCCEx_PLL3_Config>
 810392c:	4603      	mov	r3, r0
 810392e:	2b00      	cmp	r3, #0
 8103930:	d002      	beq.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8103932:	2301      	movs	r3, #1
 8103934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103938:	4b87      	ldr	r3, [pc, #540]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810393c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103948:	4a83      	ldr	r2, [pc, #524]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810394a:	430b      	orrs	r3, r1
 810394c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103956:	f002 0310 	and.w	r3, r2, #16
 810395a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810395e:	2300      	movs	r3, #0
 8103960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103964:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103968:	460b      	mov	r3, r1
 810396a:	4313      	orrs	r3, r2
 810396c:	d01e      	beq.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810397a:	d10c      	bne.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103980:	3328      	adds	r3, #40	@ 0x28
 8103982:	2102      	movs	r1, #2
 8103984:	4618      	mov	r0, r3
 8103986:	f000 fe25 	bl	81045d4 <RCCEx_PLL3_Config>
 810398a:	4603      	mov	r3, r0
 810398c:	2b00      	cmp	r3, #0
 810398e:	d002      	beq.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103990:	2301      	movs	r3, #1
 8103992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103996:	4b70      	ldr	r3, [pc, #448]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810399a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81039a6:	4a6c      	ldr	r2, [pc, #432]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81039a8:	430b      	orrs	r3, r1
 81039aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81039b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81039bc:	2300      	movs	r3, #0
 81039be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81039c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81039c6:	460b      	mov	r3, r1
 81039c8:	4313      	orrs	r3, r2
 81039ca:	d03e      	beq.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81039d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81039d8:	d022      	beq.n	8103a20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81039da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81039de:	d81b      	bhi.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81039e0:	2b00      	cmp	r3, #0
 81039e2:	d003      	beq.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81039e8:	d00b      	beq.n	8103a02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81039ea:	e015      	b.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039f0:	3308      	adds	r3, #8
 81039f2:	2100      	movs	r1, #0
 81039f4:	4618      	mov	r0, r3
 81039f6:	f000 fd3b 	bl	8104470 <RCCEx_PLL2_Config>
 81039fa:	4603      	mov	r3, r0
 81039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a00:	e00f      	b.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a06:	3328      	adds	r3, #40	@ 0x28
 8103a08:	2102      	movs	r1, #2
 8103a0a:	4618      	mov	r0, r3
 8103a0c:	f000 fde2 	bl	81045d4 <RCCEx_PLL3_Config>
 8103a10:	4603      	mov	r3, r0
 8103a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a16:	e004      	b.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a18:	2301      	movs	r3, #1
 8103a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a1e:	e000      	b.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a26:	2b00      	cmp	r3, #0
 8103a28:	d10b      	bne.n	8103a42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103a2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103a3a:	4a47      	ldr	r2, [pc, #284]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a3c:	430b      	orrs	r3, r1
 8103a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103a40:	e003      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103a56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103a58:	2300      	movs	r3, #0
 8103a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103a5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103a60:	460b      	mov	r3, r1
 8103a62:	4313      	orrs	r3, r2
 8103a64:	d03b      	beq.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103a6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103a72:	d01f      	beq.n	8103ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8103a74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103a78:	d818      	bhi.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8103a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103a7e:	d003      	beq.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103a84:	d007      	beq.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103a86:	e011      	b.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a88:	4b33      	ldr	r3, [pc, #204]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a8c:	4a32      	ldr	r2, [pc, #200]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103a94:	e00f      	b.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a9a:	3328      	adds	r3, #40	@ 0x28
 8103a9c:	2101      	movs	r1, #1
 8103a9e:	4618      	mov	r0, r3
 8103aa0:	f000 fd98 	bl	81045d4 <RCCEx_PLL3_Config>
 8103aa4:	4603      	mov	r3, r0
 8103aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8103aaa:	e004      	b.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103aac:	2301      	movs	r3, #1
 8103aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ab2:	e000      	b.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d10b      	bne.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103abe:	4b26      	ldr	r3, [pc, #152]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ac2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103ace:	4a22      	ldr	r2, [pc, #136]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ad0:	430b      	orrs	r3, r1
 8103ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8103ad4:	e003      	b.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ae6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103aea:	673b      	str	r3, [r7, #112]	@ 0x70
 8103aec:	2300      	movs	r3, #0
 8103aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8103af0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103af4:	460b      	mov	r3, r1
 8103af6:	4313      	orrs	r3, r2
 8103af8:	d034      	beq.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b00:	2b00      	cmp	r3, #0
 8103b02:	d003      	beq.n	8103b0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103b08:	d007      	beq.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103b0a:	e011      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b0c:	4b12      	ldr	r3, [pc, #72]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b10:	4a11      	ldr	r2, [pc, #68]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b18:	e00e      	b.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b1e:	3308      	adds	r3, #8
 8103b20:	2102      	movs	r1, #2
 8103b22:	4618      	mov	r0, r3
 8103b24:	f000 fca4 	bl	8104470 <RCCEx_PLL2_Config>
 8103b28:	4603      	mov	r3, r0
 8103b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b2e:	e003      	b.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103b30:	2301      	movs	r3, #1
 8103b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d10d      	bne.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103b40:	4b05      	ldr	r3, [pc, #20]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b4e:	4a02      	ldr	r2, [pc, #8]	@ (8103b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103b50:	430b      	orrs	r3, r1
 8103b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103b54:	e006      	b.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103b56:	bf00      	nop
 8103b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103b72:	2300      	movs	r3, #0
 8103b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103b76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103b7a:	460b      	mov	r3, r1
 8103b7c:	4313      	orrs	r3, r2
 8103b7e:	d00c      	beq.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b84:	3328      	adds	r3, #40	@ 0x28
 8103b86:	2102      	movs	r1, #2
 8103b88:	4618      	mov	r0, r3
 8103b8a:	f000 fd23 	bl	81045d4 <RCCEx_PLL3_Config>
 8103b8e:	4603      	mov	r3, r0
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d002      	beq.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103b94:	2301      	movs	r3, #1
 8103b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ba2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8103ba8:	2300      	movs	r3, #0
 8103baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8103bac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103bb0:	460b      	mov	r3, r1
 8103bb2:	4313      	orrs	r3, r2
 8103bb4:	d038      	beq.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103bc2:	d018      	beq.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103bc8:	d811      	bhi.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103bce:	d014      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103bd4:	d80b      	bhi.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d011      	beq.n	8103bfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8103bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103bde:	d106      	bne.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103be0:	4bc3      	ldr	r3, [pc, #780]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103be4:	4ac2      	ldr	r2, [pc, #776]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103bec:	e008      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bee:	2301      	movs	r3, #1
 8103bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103bf4:	e004      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103bf6:	bf00      	nop
 8103bf8:	e002      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103bfa:	bf00      	nop
 8103bfc:	e000      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d10b      	bne.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103c08:	4bb9      	ldr	r3, [pc, #740]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103c18:	4ab5      	ldr	r2, [pc, #724]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c1a:	430b      	orrs	r3, r1
 8103c1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8103c1e:	e003      	b.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103c36:	2300      	movs	r3, #0
 8103c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103c3e:	460b      	mov	r3, r1
 8103c40:	4313      	orrs	r3, r2
 8103c42:	d009      	beq.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103c44:	4baa      	ldr	r3, [pc, #680]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103c52:	4aa7      	ldr	r2, [pc, #668]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c54:	430b      	orrs	r3, r1
 8103c56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8103c66:	2300      	movs	r3, #0
 8103c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8103c6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103c6e:	460b      	mov	r3, r1
 8103c70:	4313      	orrs	r3, r2
 8103c72:	d00a      	beq.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103c74:	4b9e      	ldr	r3, [pc, #632]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c76:	691b      	ldr	r3, [r3, #16]
 8103c78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103c84:	4a9a      	ldr	r2, [pc, #616]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c86:	430b      	orrs	r3, r1
 8103c88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103c98:	2300      	movs	r3, #0
 8103c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103c9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103ca0:	460b      	mov	r3, r1
 8103ca2:	4313      	orrs	r3, r2
 8103ca4:	d009      	beq.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ca6:	4b92      	ldr	r3, [pc, #584]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103caa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cb6:	430b      	orrs	r3, r1
 8103cb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8103cc8:	2300      	movs	r3, #0
 8103cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8103ccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103cd0:	460b      	mov	r3, r1
 8103cd2:	4313      	orrs	r3, r2
 8103cd4:	d00e      	beq.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103cd6:	4b86      	ldr	r3, [pc, #536]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cd8:	691b      	ldr	r3, [r3, #16]
 8103cda:	4a85      	ldr	r2, [pc, #532]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103ce0:	6113      	str	r3, [r2, #16]
 8103ce2:	4b83      	ldr	r3, [pc, #524]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ce4:	6919      	ldr	r1, [r3, #16]
 8103ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103cee:	4a80      	ldr	r2, [pc, #512]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cf0:	430b      	orrs	r3, r1
 8103cf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cfc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103d02:	2300      	movs	r3, #0
 8103d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103d0a:	460b      	mov	r3, r1
 8103d0c:	4313      	orrs	r3, r2
 8103d0e:	d009      	beq.n	8103d24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d10:	4b77      	ldr	r3, [pc, #476]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d1e:	4a74      	ldr	r2, [pc, #464]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d20:	430b      	orrs	r3, r1
 8103d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8103d32:	2300      	movs	r3, #0
 8103d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8103d36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103d3a:	460b      	mov	r3, r1
 8103d3c:	4313      	orrs	r3, r2
 8103d3e:	d00a      	beq.n	8103d56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103d40:	4b6b      	ldr	r3, [pc, #428]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103d50:	4a67      	ldr	r2, [pc, #412]	@ (8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103d52:	430b      	orrs	r3, r1
 8103d54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d5e:	2100      	movs	r1, #0
 8103d60:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103d62:	f003 0301 	and.w	r3, r3, #1
 8103d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103d68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103d6c:	460b      	mov	r3, r1
 8103d6e:	4313      	orrs	r3, r2
 8103d70:	d011      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d76:	3308      	adds	r3, #8
 8103d78:	2100      	movs	r1, #0
 8103d7a:	4618      	mov	r0, r3
 8103d7c:	f000 fb78 	bl	8104470 <RCCEx_PLL2_Config>
 8103d80:	4603      	mov	r3, r0
 8103d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	d003      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d9e:	2100      	movs	r1, #0
 8103da0:	6239      	str	r1, [r7, #32]
 8103da2:	f003 0302 	and.w	r3, r3, #2
 8103da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8103da8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103dac:	460b      	mov	r3, r1
 8103dae:	4313      	orrs	r3, r2
 8103db0:	d011      	beq.n	8103dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103db6:	3308      	adds	r3, #8
 8103db8:	2101      	movs	r1, #1
 8103dba:	4618      	mov	r0, r3
 8103dbc:	f000 fb58 	bl	8104470 <RCCEx_PLL2_Config>
 8103dc0:	4603      	mov	r3, r0
 8103dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d003      	beq.n	8103dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dde:	2100      	movs	r1, #0
 8103de0:	61b9      	str	r1, [r7, #24]
 8103de2:	f003 0304 	and.w	r3, r3, #4
 8103de6:	61fb      	str	r3, [r7, #28]
 8103de8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103dec:	460b      	mov	r3, r1
 8103dee:	4313      	orrs	r3, r2
 8103df0:	d011      	beq.n	8103e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df6:	3308      	adds	r3, #8
 8103df8:	2102      	movs	r1, #2
 8103dfa:	4618      	mov	r0, r3
 8103dfc:	f000 fb38 	bl	8104470 <RCCEx_PLL2_Config>
 8103e00:	4603      	mov	r3, r0
 8103e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d003      	beq.n	8103e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e1e:	2100      	movs	r1, #0
 8103e20:	6139      	str	r1, [r7, #16]
 8103e22:	f003 0308 	and.w	r3, r3, #8
 8103e26:	617b      	str	r3, [r7, #20]
 8103e28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103e2c:	460b      	mov	r3, r1
 8103e2e:	4313      	orrs	r3, r2
 8103e30:	d011      	beq.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e36:	3328      	adds	r3, #40	@ 0x28
 8103e38:	2100      	movs	r1, #0
 8103e3a:	4618      	mov	r0, r3
 8103e3c:	f000 fbca 	bl	81045d4 <RCCEx_PLL3_Config>
 8103e40:	4603      	mov	r3, r0
 8103e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8103e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d003      	beq.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e5e:	2100      	movs	r1, #0
 8103e60:	60b9      	str	r1, [r7, #8]
 8103e62:	f003 0310 	and.w	r3, r3, #16
 8103e66:	60fb      	str	r3, [r7, #12]
 8103e68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103e6c:	460b      	mov	r3, r1
 8103e6e:	4313      	orrs	r3, r2
 8103e70:	d011      	beq.n	8103e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e76:	3328      	adds	r3, #40	@ 0x28
 8103e78:	2101      	movs	r1, #1
 8103e7a:	4618      	mov	r0, r3
 8103e7c:	f000 fbaa 	bl	81045d4 <RCCEx_PLL3_Config>
 8103e80:	4603      	mov	r3, r0
 8103e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	d003      	beq.n	8103e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e9e:	2100      	movs	r1, #0
 8103ea0:	6039      	str	r1, [r7, #0]
 8103ea2:	f003 0320 	and.w	r3, r3, #32
 8103ea6:	607b      	str	r3, [r7, #4]
 8103ea8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103eac:	460b      	mov	r3, r1
 8103eae:	4313      	orrs	r3, r2
 8103eb0:	d011      	beq.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103eb6:	3328      	adds	r3, #40	@ 0x28
 8103eb8:	2102      	movs	r1, #2
 8103eba:	4618      	mov	r0, r3
 8103ebc:	f000 fb8a 	bl	81045d4 <RCCEx_PLL3_Config>
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d003      	beq.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8103ed6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d101      	bne.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103ede:	2300      	movs	r3, #0
 8103ee0:	e000      	b.n	8103ee4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103ee2:	2301      	movs	r3, #1
}
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8103eea:	46bd      	mov	sp, r7
 8103eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103ef0:	58024400 	.word	0x58024400

08103ef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103ef4:	b580      	push	{r7, lr}
 8103ef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103ef8:	f7fe fd94 	bl	8102a24 <HAL_RCC_GetHCLKFreq>
 8103efc:	4602      	mov	r2, r0
 8103efe:	4b06      	ldr	r3, [pc, #24]	@ (8103f18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103f00:	6a1b      	ldr	r3, [r3, #32]
 8103f02:	091b      	lsrs	r3, r3, #4
 8103f04:	f003 0307 	and.w	r3, r3, #7
 8103f08:	4904      	ldr	r1, [pc, #16]	@ (8103f1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103f0a:	5ccb      	ldrb	r3, [r1, r3]
 8103f0c:	f003 031f 	and.w	r3, r3, #31
 8103f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103f14:	4618      	mov	r0, r3
 8103f16:	bd80      	pop	{r7, pc}
 8103f18:	58024400 	.word	0x58024400
 8103f1c:	0810b980 	.word	0x0810b980

08103f20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8103f20:	b480      	push	{r7}
 8103f22:	b089      	sub	sp, #36	@ 0x24
 8103f24:	af00      	add	r7, sp, #0
 8103f26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103f28:	4ba1      	ldr	r3, [pc, #644]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f2c:	f003 0303 	and.w	r3, r3, #3
 8103f30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8103f32:	4b9f      	ldr	r3, [pc, #636]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f36:	0b1b      	lsrs	r3, r3, #12
 8103f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103f3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103f3e:	4b9c      	ldr	r3, [pc, #624]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f42:	091b      	lsrs	r3, r3, #4
 8103f44:	f003 0301 	and.w	r3, r3, #1
 8103f48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8103f4a:	4b99      	ldr	r3, [pc, #612]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103f4e:	08db      	lsrs	r3, r3, #3
 8103f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103f54:	693a      	ldr	r2, [r7, #16]
 8103f56:	fb02 f303 	mul.w	r3, r2, r3
 8103f5a:	ee07 3a90 	vmov	s15, r3
 8103f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103f66:	697b      	ldr	r3, [r7, #20]
 8103f68:	2b00      	cmp	r3, #0
 8103f6a:	f000 8111 	beq.w	8104190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103f6e:	69bb      	ldr	r3, [r7, #24]
 8103f70:	2b02      	cmp	r3, #2
 8103f72:	f000 8083 	beq.w	810407c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103f76:	69bb      	ldr	r3, [r7, #24]
 8103f78:	2b02      	cmp	r3, #2
 8103f7a:	f200 80a1 	bhi.w	81040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103f7e:	69bb      	ldr	r3, [r7, #24]
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d003      	beq.n	8103f8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103f84:	69bb      	ldr	r3, [r7, #24]
 8103f86:	2b01      	cmp	r3, #1
 8103f88:	d056      	beq.n	8104038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103f8a:	e099      	b.n	81040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103f8c:	4b88      	ldr	r3, [pc, #544]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	f003 0320 	and.w	r3, r3, #32
 8103f94:	2b00      	cmp	r3, #0
 8103f96:	d02d      	beq.n	8103ff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103f98:	4b85      	ldr	r3, [pc, #532]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f9a:	681b      	ldr	r3, [r3, #0]
 8103f9c:	08db      	lsrs	r3, r3, #3
 8103f9e:	f003 0303 	and.w	r3, r3, #3
 8103fa2:	4a84      	ldr	r2, [pc, #528]	@ (81041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8103fa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103faa:	68bb      	ldr	r3, [r7, #8]
 8103fac:	ee07 3a90 	vmov	s15, r3
 8103fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fb4:	697b      	ldr	r3, [r7, #20]
 8103fb6:	ee07 3a90 	vmov	s15, r3
 8103fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fc2:	4b7b      	ldr	r3, [pc, #492]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fca:	ee07 3a90 	vmov	s15, r3
 8103fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103fd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103ff2:	e087      	b.n	8104104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103ff4:	697b      	ldr	r3, [r7, #20]
 8103ff6:	ee07 3a90 	vmov	s15, r3
 8103ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81041bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104006:	4b6a      	ldr	r3, [pc, #424]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810400e:	ee07 3a90 	vmov	s15, r3
 8104012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104016:	ed97 6a03 	vldr	s12, [r7, #12]
 810401a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104036:	e065      	b.n	8104104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104038:	697b      	ldr	r3, [r7, #20]
 810403a:	ee07 3a90 	vmov	s15, r3
 810403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104042:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810404a:	4b59      	ldr	r3, [pc, #356]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810404c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104052:	ee07 3a90 	vmov	s15, r3
 8104056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810405a:	ed97 6a03 	vldr	s12, [r7, #12]
 810405e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810406a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810406e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810407a:	e043      	b.n	8104104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810407c:	697b      	ldr	r3, [r7, #20]
 810407e:	ee07 3a90 	vmov	s15, r3
 8104082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104086:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810408e:	4b48      	ldr	r3, [pc, #288]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104096:	ee07 3a90 	vmov	s15, r3
 810409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810409e:	ed97 6a03 	vldr	s12, [r7, #12]
 81040a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81040be:	e021      	b.n	8104104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81040c0:	697b      	ldr	r3, [r7, #20]
 81040c2:	ee07 3a90 	vmov	s15, r3
 81040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040d2:	4b37      	ldr	r3, [pc, #220]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040da:	ee07 3a90 	vmov	s15, r3
 81040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81040e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104104:	4b2a      	ldr	r3, [pc, #168]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104108:	0a5b      	lsrs	r3, r3, #9
 810410a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810410e:	ee07 3a90 	vmov	s15, r3
 8104112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810411a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810411e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810412a:	ee17 2a90 	vmov	r2, s15
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104132:	4b1f      	ldr	r3, [pc, #124]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104136:	0c1b      	lsrs	r3, r3, #16
 8104138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810413c:	ee07 3a90 	vmov	s15, r3
 8104140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104148:	ee37 7a87 	vadd.f32	s14, s15, s14
 810414c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104158:	ee17 2a90 	vmov	r2, s15
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104160:	4b13      	ldr	r3, [pc, #76]	@ (81041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104164:	0e1b      	lsrs	r3, r3, #24
 8104166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810416a:	ee07 3a90 	vmov	s15, r3
 810416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104176:	ee37 7a87 	vadd.f32	s14, s15, s14
 810417a:	edd7 6a07 	vldr	s13, [r7, #28]
 810417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104186:	ee17 2a90 	vmov	r2, s15
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810418e:	e008      	b.n	81041a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	2200      	movs	r2, #0
 8104194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	2200      	movs	r2, #0
 810419a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	2200      	movs	r2, #0
 81041a0:	609a      	str	r2, [r3, #8]
}
 81041a2:	bf00      	nop
 81041a4:	3724      	adds	r7, #36	@ 0x24
 81041a6:	46bd      	mov	sp, r7
 81041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ac:	4770      	bx	lr
 81041ae:	bf00      	nop
 81041b0:	58024400 	.word	0x58024400
 81041b4:	03d09000 	.word	0x03d09000
 81041b8:	46000000 	.word	0x46000000
 81041bc:	4c742400 	.word	0x4c742400
 81041c0:	4a742400 	.word	0x4a742400
 81041c4:	4bbebc20 	.word	0x4bbebc20

081041c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81041c8:	b480      	push	{r7}
 81041ca:	b089      	sub	sp, #36	@ 0x24
 81041cc:	af00      	add	r7, sp, #0
 81041ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81041d0:	4ba1      	ldr	r3, [pc, #644]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81041d4:	f003 0303 	and.w	r3, r3, #3
 81041d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81041da:	4b9f      	ldr	r3, [pc, #636]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81041de:	0d1b      	lsrs	r3, r3, #20
 81041e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81041e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81041e6:	4b9c      	ldr	r3, [pc, #624]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81041ea:	0a1b      	lsrs	r3, r3, #8
 81041ec:	f003 0301 	and.w	r3, r3, #1
 81041f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81041f2:	4b99      	ldr	r3, [pc, #612]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81041f6:	08db      	lsrs	r3, r3, #3
 81041f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81041fc:	693a      	ldr	r2, [r7, #16]
 81041fe:	fb02 f303 	mul.w	r3, r2, r3
 8104202:	ee07 3a90 	vmov	s15, r3
 8104206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810420a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810420e:	697b      	ldr	r3, [r7, #20]
 8104210:	2b00      	cmp	r3, #0
 8104212:	f000 8111 	beq.w	8104438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104216:	69bb      	ldr	r3, [r7, #24]
 8104218:	2b02      	cmp	r3, #2
 810421a:	f000 8083 	beq.w	8104324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810421e:	69bb      	ldr	r3, [r7, #24]
 8104220:	2b02      	cmp	r3, #2
 8104222:	f200 80a1 	bhi.w	8104368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104226:	69bb      	ldr	r3, [r7, #24]
 8104228:	2b00      	cmp	r3, #0
 810422a:	d003      	beq.n	8104234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810422c:	69bb      	ldr	r3, [r7, #24]
 810422e:	2b01      	cmp	r3, #1
 8104230:	d056      	beq.n	81042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104232:	e099      	b.n	8104368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104234:	4b88      	ldr	r3, [pc, #544]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	f003 0320 	and.w	r3, r3, #32
 810423c:	2b00      	cmp	r3, #0
 810423e:	d02d      	beq.n	810429c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104240:	4b85      	ldr	r3, [pc, #532]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	08db      	lsrs	r3, r3, #3
 8104246:	f003 0303 	and.w	r3, r3, #3
 810424a:	4a84      	ldr	r2, [pc, #528]	@ (810445c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810424c:	fa22 f303 	lsr.w	r3, r2, r3
 8104250:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104252:	68bb      	ldr	r3, [r7, #8]
 8104254:	ee07 3a90 	vmov	s15, r3
 8104258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810425c:	697b      	ldr	r3, [r7, #20]
 810425e:	ee07 3a90 	vmov	s15, r3
 8104262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810426a:	4b7b      	ldr	r3, [pc, #492]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104272:	ee07 3a90 	vmov	s15, r3
 8104276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810427a:	ed97 6a03 	vldr	s12, [r7, #12]
 810427e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810428a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810429a:	e087      	b.n	81043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810429c:	697b      	ldr	r3, [r7, #20]
 810429e:	ee07 3a90 	vmov	s15, r3
 81042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042b6:	ee07 3a90 	vmov	s15, r3
 81042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81042be:	ed97 6a03 	vldr	s12, [r7, #12]
 81042c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81042ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81042de:	e065      	b.n	81043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81042e0:	697b      	ldr	r3, [r7, #20]
 81042e2:	ee07 3a90 	vmov	s15, r3
 81042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81042ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81042f2:	4b59      	ldr	r3, [pc, #356]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042fa:	ee07 3a90 	vmov	s15, r3
 81042fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104302:	ed97 6a03 	vldr	s12, [r7, #12]
 8104306:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810430a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810430e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810431e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104322:	e043      	b.n	81043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104324:	697b      	ldr	r3, [r7, #20]
 8104326:	ee07 3a90 	vmov	s15, r3
 810432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810432e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810446c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104336:	4b48      	ldr	r3, [pc, #288]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810433e:	ee07 3a90 	vmov	s15, r3
 8104342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104346:	ed97 6a03 	vldr	s12, [r7, #12]
 810434a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104366:	e021      	b.n	81043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104368:	697b      	ldr	r3, [r7, #20]
 810436a:	ee07 3a90 	vmov	s15, r3
 810436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104372:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810437a:	4b37      	ldr	r3, [pc, #220]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104382:	ee07 3a90 	vmov	s15, r3
 8104386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810438a:	ed97 6a03 	vldr	s12, [r7, #12]
 810438e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810439a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81043a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81043aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81043ac:	4b2a      	ldr	r3, [pc, #168]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81043b0:	0a5b      	lsrs	r3, r3, #9
 81043b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81043b6:	ee07 3a90 	vmov	s15, r3
 81043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81043be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81043c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81043c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81043ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81043d2:	ee17 2a90 	vmov	r2, s15
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81043da:	4b1f      	ldr	r3, [pc, #124]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81043de:	0c1b      	lsrs	r3, r3, #16
 81043e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81043e4:	ee07 3a90 	vmov	s15, r3
 81043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81043ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81043f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81043f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81043f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81043fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104400:	ee17 2a90 	vmov	r2, s15
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8104408:	4b13      	ldr	r3, [pc, #76]	@ (8104458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810440c:	0e1b      	lsrs	r3, r3, #24
 810440e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104412:	ee07 3a90 	vmov	s15, r3
 8104416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810441a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810441e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104422:	edd7 6a07 	vldr	s13, [r7, #28]
 8104426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810442e:	ee17 2a90 	vmov	r2, s15
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104436:	e008      	b.n	810444a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	2200      	movs	r2, #0
 810443c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	2200      	movs	r2, #0
 8104442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	2200      	movs	r2, #0
 8104448:	609a      	str	r2, [r3, #8]
}
 810444a:	bf00      	nop
 810444c:	3724      	adds	r7, #36	@ 0x24
 810444e:	46bd      	mov	sp, r7
 8104450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104454:	4770      	bx	lr
 8104456:	bf00      	nop
 8104458:	58024400 	.word	0x58024400
 810445c:	03d09000 	.word	0x03d09000
 8104460:	46000000 	.word	0x46000000
 8104464:	4c742400 	.word	0x4c742400
 8104468:	4a742400 	.word	0x4a742400
 810446c:	4bbebc20 	.word	0x4bbebc20

08104470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104470:	b580      	push	{r7, lr}
 8104472:	b084      	sub	sp, #16
 8104474:	af00      	add	r7, sp, #0
 8104476:	6078      	str	r0, [r7, #4]
 8104478:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810447a:	2300      	movs	r3, #0
 810447c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810447e:	4b54      	ldr	r3, [pc, #336]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104482:	f003 0303 	and.w	r3, r3, #3
 8104486:	2b03      	cmp	r3, #3
 8104488:	d101      	bne.n	810448e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810448a:	2301      	movs	r3, #1
 810448c:	e09b      	b.n	81045c6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810448e:	4b50      	ldr	r3, [pc, #320]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a4f      	ldr	r2, [pc, #316]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8104498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810449a:	f7fd fd5f 	bl	8101f5c <HAL_GetTick>
 810449e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81044a0:	e008      	b.n	81044b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81044a2:	f7fd fd5b 	bl	8101f5c <HAL_GetTick>
 81044a6:	4602      	mov	r2, r0
 81044a8:	68bb      	ldr	r3, [r7, #8]
 81044aa:	1ad3      	subs	r3, r2, r3
 81044ac:	2b02      	cmp	r3, #2
 81044ae:	d901      	bls.n	81044b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81044b0:	2303      	movs	r3, #3
 81044b2:	e088      	b.n	81045c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81044b4:	4b46      	ldr	r3, [pc, #280]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 81044b6:	681b      	ldr	r3, [r3, #0]
 81044b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81044bc:	2b00      	cmp	r3, #0
 81044be:	d1f0      	bne.n	81044a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81044c0:	4b43      	ldr	r3, [pc, #268]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 81044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81044c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	681b      	ldr	r3, [r3, #0]
 81044cc:	031b      	lsls	r3, r3, #12
 81044ce:	4940      	ldr	r1, [pc, #256]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 81044d0:	4313      	orrs	r3, r2
 81044d2:	628b      	str	r3, [r1, #40]	@ 0x28
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	685b      	ldr	r3, [r3, #4]
 81044d8:	3b01      	subs	r3, #1
 81044da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	689b      	ldr	r3, [r3, #8]
 81044e2:	3b01      	subs	r3, #1
 81044e4:	025b      	lsls	r3, r3, #9
 81044e6:	b29b      	uxth	r3, r3
 81044e8:	431a      	orrs	r2, r3
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	68db      	ldr	r3, [r3, #12]
 81044ee:	3b01      	subs	r3, #1
 81044f0:	041b      	lsls	r3, r3, #16
 81044f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81044f6:	431a      	orrs	r2, r3
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	691b      	ldr	r3, [r3, #16]
 81044fc:	3b01      	subs	r3, #1
 81044fe:	061b      	lsls	r3, r3, #24
 8104500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104504:	4932      	ldr	r1, [pc, #200]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104506:	4313      	orrs	r3, r2
 8104508:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810450a:	4b31      	ldr	r3, [pc, #196]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810450e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	695b      	ldr	r3, [r3, #20]
 8104516:	492e      	ldr	r1, [pc, #184]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104518:	4313      	orrs	r3, r2
 810451a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810451c:	4b2c      	ldr	r3, [pc, #176]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104520:	f023 0220 	bic.w	r2, r3, #32
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	699b      	ldr	r3, [r3, #24]
 8104528:	4929      	ldr	r1, [pc, #164]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810452a:	4313      	orrs	r3, r2
 810452c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810452e:	4b28      	ldr	r3, [pc, #160]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104532:	4a27      	ldr	r2, [pc, #156]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104534:	f023 0310 	bic.w	r3, r3, #16
 8104538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810453a:	4b25      	ldr	r3, [pc, #148]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810453e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104542:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104546:	687a      	ldr	r2, [r7, #4]
 8104548:	69d2      	ldr	r2, [r2, #28]
 810454a:	00d2      	lsls	r2, r2, #3
 810454c:	4920      	ldr	r1, [pc, #128]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810454e:	4313      	orrs	r3, r2
 8104550:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104552:	4b1f      	ldr	r3, [pc, #124]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104556:	4a1e      	ldr	r2, [pc, #120]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104558:	f043 0310 	orr.w	r3, r3, #16
 810455c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810455e:	683b      	ldr	r3, [r7, #0]
 8104560:	2b00      	cmp	r3, #0
 8104562:	d106      	bne.n	8104572 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104564:	4b1a      	ldr	r3, [pc, #104]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104568:	4a19      	ldr	r2, [pc, #100]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810456a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810456e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104570:	e00f      	b.n	8104592 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104572:	683b      	ldr	r3, [r7, #0]
 8104574:	2b01      	cmp	r3, #1
 8104576:	d106      	bne.n	8104586 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104578:	4b15      	ldr	r3, [pc, #84]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810457c:	4a14      	ldr	r2, [pc, #80]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810457e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104584:	e005      	b.n	8104592 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104586:	4b12      	ldr	r3, [pc, #72]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810458a:	4a11      	ldr	r2, [pc, #68]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 810458c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104590:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104592:	4b0f      	ldr	r3, [pc, #60]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	4a0e      	ldr	r2, [pc, #56]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 8104598:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810459c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810459e:	f7fd fcdd 	bl	8101f5c <HAL_GetTick>
 81045a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81045a4:	e008      	b.n	81045b8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81045a6:	f7fd fcd9 	bl	8101f5c <HAL_GetTick>
 81045aa:	4602      	mov	r2, r0
 81045ac:	68bb      	ldr	r3, [r7, #8]
 81045ae:	1ad3      	subs	r3, r2, r3
 81045b0:	2b02      	cmp	r3, #2
 81045b2:	d901      	bls.n	81045b8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81045b4:	2303      	movs	r3, #3
 81045b6:	e006      	b.n	81045c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81045b8:	4b05      	ldr	r3, [pc, #20]	@ (81045d0 <RCCEx_PLL2_Config+0x160>)
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81045c0:	2b00      	cmp	r3, #0
 81045c2:	d0f0      	beq.n	81045a6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81045c6:	4618      	mov	r0, r3
 81045c8:	3710      	adds	r7, #16
 81045ca:	46bd      	mov	sp, r7
 81045cc:	bd80      	pop	{r7, pc}
 81045ce:	bf00      	nop
 81045d0:	58024400 	.word	0x58024400

081045d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81045d4:	b580      	push	{r7, lr}
 81045d6:	b084      	sub	sp, #16
 81045d8:	af00      	add	r7, sp, #0
 81045da:	6078      	str	r0, [r7, #4]
 81045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81045de:	2300      	movs	r3, #0
 81045e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81045e2:	4b54      	ldr	r3, [pc, #336]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045e6:	f003 0303 	and.w	r3, r3, #3
 81045ea:	2b03      	cmp	r3, #3
 81045ec:	d101      	bne.n	81045f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81045ee:	2301      	movs	r3, #1
 81045f0:	e09b      	b.n	810472a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81045f2:	4b50      	ldr	r3, [pc, #320]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a4f      	ldr	r2, [pc, #316]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81045f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81045fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81045fe:	f7fd fcad 	bl	8101f5c <HAL_GetTick>
 8104602:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104604:	e008      	b.n	8104618 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104606:	f7fd fca9 	bl	8101f5c <HAL_GetTick>
 810460a:	4602      	mov	r2, r0
 810460c:	68bb      	ldr	r3, [r7, #8]
 810460e:	1ad3      	subs	r3, r2, r3
 8104610:	2b02      	cmp	r3, #2
 8104612:	d901      	bls.n	8104618 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104614:	2303      	movs	r3, #3
 8104616:	e088      	b.n	810472a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104618:	4b46      	ldr	r3, [pc, #280]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104620:	2b00      	cmp	r3, #0
 8104622:	d1f0      	bne.n	8104606 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104624:	4b43      	ldr	r3, [pc, #268]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104628:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	051b      	lsls	r3, r3, #20
 8104632:	4940      	ldr	r1, [pc, #256]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104634:	4313      	orrs	r3, r2
 8104636:	628b      	str	r3, [r1, #40]	@ 0x28
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	685b      	ldr	r3, [r3, #4]
 810463c:	3b01      	subs	r3, #1
 810463e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	689b      	ldr	r3, [r3, #8]
 8104646:	3b01      	subs	r3, #1
 8104648:	025b      	lsls	r3, r3, #9
 810464a:	b29b      	uxth	r3, r3
 810464c:	431a      	orrs	r2, r3
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	68db      	ldr	r3, [r3, #12]
 8104652:	3b01      	subs	r3, #1
 8104654:	041b      	lsls	r3, r3, #16
 8104656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810465a:	431a      	orrs	r2, r3
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	691b      	ldr	r3, [r3, #16]
 8104660:	3b01      	subs	r3, #1
 8104662:	061b      	lsls	r3, r3, #24
 8104664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104668:	4932      	ldr	r1, [pc, #200]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 810466a:	4313      	orrs	r3, r2
 810466c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810466e:	4b31      	ldr	r3, [pc, #196]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	695b      	ldr	r3, [r3, #20]
 810467a:	492e      	ldr	r1, [pc, #184]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 810467c:	4313      	orrs	r3, r2
 810467e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104680:	4b2c      	ldr	r3, [pc, #176]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104684:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	699b      	ldr	r3, [r3, #24]
 810468c:	4929      	ldr	r1, [pc, #164]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 810468e:	4313      	orrs	r3, r2
 8104690:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104692:	4b28      	ldr	r3, [pc, #160]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104696:	4a27      	ldr	r2, [pc, #156]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 8104698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810469c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810469e:	4b25      	ldr	r3, [pc, #148]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81046a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81046a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81046aa:	687a      	ldr	r2, [r7, #4]
 81046ac:	69d2      	ldr	r2, [r2, #28]
 81046ae:	00d2      	lsls	r2, r2, #3
 81046b0:	4920      	ldr	r1, [pc, #128]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046b2:	4313      	orrs	r3, r2
 81046b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81046b6:	4b1f      	ldr	r3, [pc, #124]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81046c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81046c2:	683b      	ldr	r3, [r7, #0]
 81046c4:	2b00      	cmp	r3, #0
 81046c6:	d106      	bne.n	81046d6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81046c8:	4b1a      	ldr	r3, [pc, #104]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046cc:	4a19      	ldr	r2, [pc, #100]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81046d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81046d4:	e00f      	b.n	81046f6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81046d6:	683b      	ldr	r3, [r7, #0]
 81046d8:	2b01      	cmp	r3, #1
 81046da:	d106      	bne.n	81046ea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81046dc:	4b15      	ldr	r3, [pc, #84]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046e0:	4a14      	ldr	r2, [pc, #80]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81046e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81046e8:	e005      	b.n	81046f6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81046ea:	4b12      	ldr	r3, [pc, #72]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046ee:	4a11      	ldr	r2, [pc, #68]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81046f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81046f6:	4b0f      	ldr	r3, [pc, #60]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	4a0e      	ldr	r2, [pc, #56]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 81046fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104702:	f7fd fc2b 	bl	8101f5c <HAL_GetTick>
 8104706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104708:	e008      	b.n	810471c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810470a:	f7fd fc27 	bl	8101f5c <HAL_GetTick>
 810470e:	4602      	mov	r2, r0
 8104710:	68bb      	ldr	r3, [r7, #8]
 8104712:	1ad3      	subs	r3, r2, r3
 8104714:	2b02      	cmp	r3, #2
 8104716:	d901      	bls.n	810471c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104718:	2303      	movs	r3, #3
 810471a:	e006      	b.n	810472a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810471c:	4b05      	ldr	r3, [pc, #20]	@ (8104734 <RCCEx_PLL3_Config+0x160>)
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104724:	2b00      	cmp	r3, #0
 8104726:	d0f0      	beq.n	810470a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104728:	7bfb      	ldrb	r3, [r7, #15]
}
 810472a:	4618      	mov	r0, r3
 810472c:	3710      	adds	r7, #16
 810472e:	46bd      	mov	sp, r7
 8104730:	bd80      	pop	{r7, pc}
 8104732:	bf00      	nop
 8104734:	58024400 	.word	0x58024400

08104738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8104738:	b580      	push	{r7, lr}
 810473a:	b082      	sub	sp, #8
 810473c:	af00      	add	r7, sp, #0
 810473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	2b00      	cmp	r3, #0
 8104744:	d101      	bne.n	810474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8104746:	2301      	movs	r3, #1
 8104748:	e049      	b.n	81047de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8104750:	b2db      	uxtb	r3, r3
 8104752:	2b00      	cmp	r3, #0
 8104754:	d106      	bne.n	8104764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	2200      	movs	r2, #0
 810475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810475e:	6878      	ldr	r0, [r7, #4]
 8104760:	f7fd f8f0 	bl	8101944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	2202      	movs	r2, #2
 8104768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	681a      	ldr	r2, [r3, #0]
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	3304      	adds	r3, #4
 8104774:	4619      	mov	r1, r3
 8104776:	4610      	mov	r0, r2
 8104778:	f000 fe8e 	bl	8105498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	2201      	movs	r2, #1
 8104780:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	2201      	movs	r2, #1
 8104788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	2201      	movs	r2, #1
 8104790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	2201      	movs	r2, #1
 8104798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	2201      	movs	r2, #1
 81047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	2201      	movs	r2, #1
 81047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	2201      	movs	r2, #1
 81047b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	2201      	movs	r2, #1
 81047b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	2201      	movs	r2, #1
 81047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	2201      	movs	r2, #1
 81047c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	2201      	movs	r2, #1
 81047d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	2201      	movs	r2, #1
 81047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81047dc:	2300      	movs	r3, #0
}
 81047de:	4618      	mov	r0, r3
 81047e0:	3708      	adds	r7, #8
 81047e2:	46bd      	mov	sp, r7
 81047e4:	bd80      	pop	{r7, pc}
	...

081047e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81047e8:	b480      	push	{r7}
 81047ea:	b085      	sub	sp, #20
 81047ec:	af00      	add	r7, sp, #0
 81047ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81047f6:	b2db      	uxtb	r3, r3
 81047f8:	2b01      	cmp	r3, #1
 81047fa:	d001      	beq.n	8104800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81047fc:	2301      	movs	r3, #1
 81047fe:	e054      	b.n	81048aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	2202      	movs	r2, #2
 8104804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	68da      	ldr	r2, [r3, #12]
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	f042 0201 	orr.w	r2, r2, #1
 8104816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	4a26      	ldr	r2, [pc, #152]	@ (81048b8 <HAL_TIM_Base_Start_IT+0xd0>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d022      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810482a:	d01d      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	681b      	ldr	r3, [r3, #0]
 8104830:	4a22      	ldr	r2, [pc, #136]	@ (81048bc <HAL_TIM_Base_Start_IT+0xd4>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d018      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	4a21      	ldr	r2, [pc, #132]	@ (81048c0 <HAL_TIM_Base_Start_IT+0xd8>)
 810483c:	4293      	cmp	r3, r2
 810483e:	d013      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	4a1f      	ldr	r2, [pc, #124]	@ (81048c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8104846:	4293      	cmp	r3, r2
 8104848:	d00e      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	4a1e      	ldr	r2, [pc, #120]	@ (81048c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8104850:	4293      	cmp	r3, r2
 8104852:	d009      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	4a1c      	ldr	r2, [pc, #112]	@ (81048cc <HAL_TIM_Base_Start_IT+0xe4>)
 810485a:	4293      	cmp	r3, r2
 810485c:	d004      	beq.n	8104868 <HAL_TIM_Base_Start_IT+0x80>
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	4a1b      	ldr	r2, [pc, #108]	@ (81048d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8104864:	4293      	cmp	r3, r2
 8104866:	d115      	bne.n	8104894 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	689a      	ldr	r2, [r3, #8]
 810486e:	4b19      	ldr	r3, [pc, #100]	@ (81048d4 <HAL_TIM_Base_Start_IT+0xec>)
 8104870:	4013      	ands	r3, r2
 8104872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	2b06      	cmp	r3, #6
 8104878:	d015      	beq.n	81048a6 <HAL_TIM_Base_Start_IT+0xbe>
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104880:	d011      	beq.n	81048a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	681a      	ldr	r2, [r3, #0]
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	f042 0201 	orr.w	r2, r2, #1
 8104890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104892:	e008      	b.n	81048a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	681a      	ldr	r2, [r3, #0]
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	f042 0201 	orr.w	r2, r2, #1
 81048a2:	601a      	str	r2, [r3, #0]
 81048a4:	e000      	b.n	81048a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81048a8:	2300      	movs	r3, #0
}
 81048aa:	4618      	mov	r0, r3
 81048ac:	3714      	adds	r7, #20
 81048ae:	46bd      	mov	sp, r7
 81048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b4:	4770      	bx	lr
 81048b6:	bf00      	nop
 81048b8:	40010000 	.word	0x40010000
 81048bc:	40000400 	.word	0x40000400
 81048c0:	40000800 	.word	0x40000800
 81048c4:	40000c00 	.word	0x40000c00
 81048c8:	40010400 	.word	0x40010400
 81048cc:	40001800 	.word	0x40001800
 81048d0:	40014000 	.word	0x40014000
 81048d4:	00010007 	.word	0x00010007

081048d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81048d8:	b580      	push	{r7, lr}
 81048da:	b082      	sub	sp, #8
 81048dc:	af00      	add	r7, sp, #0
 81048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	2b00      	cmp	r3, #0
 81048e4:	d101      	bne.n	81048ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81048e6:	2301      	movs	r3, #1
 81048e8:	e049      	b.n	810497e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81048f0:	b2db      	uxtb	r3, r3
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d106      	bne.n	8104904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	2200      	movs	r2, #0
 81048fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81048fe:	6878      	ldr	r0, [r7, #4]
 8104900:	f000 f841 	bl	8104986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	2202      	movs	r2, #2
 8104908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681a      	ldr	r2, [r3, #0]
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	3304      	adds	r3, #4
 8104914:	4619      	mov	r1, r3
 8104916:	4610      	mov	r0, r2
 8104918:	f000 fdbe 	bl	8105498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	2201      	movs	r2, #1
 8104920:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	2201      	movs	r2, #1
 8104928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	2201      	movs	r2, #1
 8104930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	2201      	movs	r2, #1
 8104938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	2201      	movs	r2, #1
 8104940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	2201      	movs	r2, #1
 8104948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	2201      	movs	r2, #1
 8104950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	2201      	movs	r2, #1
 8104958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	2201      	movs	r2, #1
 8104960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8104964:	687b      	ldr	r3, [r7, #4]
 8104966:	2201      	movs	r2, #1
 8104968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	2201      	movs	r2, #1
 8104970:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104974:	687b      	ldr	r3, [r7, #4]
 8104976:	2201      	movs	r2, #1
 8104978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810497c:	2300      	movs	r3, #0
}
 810497e:	4618      	mov	r0, r3
 8104980:	3708      	adds	r7, #8
 8104982:	46bd      	mov	sp, r7
 8104984:	bd80      	pop	{r7, pc}

08104986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8104986:	b480      	push	{r7}
 8104988:	b083      	sub	sp, #12
 810498a:	af00      	add	r7, sp, #0
 810498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810498e:	bf00      	nop
 8104990:	370c      	adds	r7, #12
 8104992:	46bd      	mov	sp, r7
 8104994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104998:	4770      	bx	lr
	...

0810499c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810499c:	b580      	push	{r7, lr}
 810499e:	b084      	sub	sp, #16
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
 81049a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81049a6:	683b      	ldr	r3, [r7, #0]
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d109      	bne.n	81049c0 <HAL_TIM_PWM_Start+0x24>
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 81049b2:	b2db      	uxtb	r3, r3
 81049b4:	2b01      	cmp	r3, #1
 81049b6:	bf14      	ite	ne
 81049b8:	2301      	movne	r3, #1
 81049ba:	2300      	moveq	r3, #0
 81049bc:	b2db      	uxtb	r3, r3
 81049be:	e03c      	b.n	8104a3a <HAL_TIM_PWM_Start+0x9e>
 81049c0:	683b      	ldr	r3, [r7, #0]
 81049c2:	2b04      	cmp	r3, #4
 81049c4:	d109      	bne.n	81049da <HAL_TIM_PWM_Start+0x3e>
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 81049cc:	b2db      	uxtb	r3, r3
 81049ce:	2b01      	cmp	r3, #1
 81049d0:	bf14      	ite	ne
 81049d2:	2301      	movne	r3, #1
 81049d4:	2300      	moveq	r3, #0
 81049d6:	b2db      	uxtb	r3, r3
 81049d8:	e02f      	b.n	8104a3a <HAL_TIM_PWM_Start+0x9e>
 81049da:	683b      	ldr	r3, [r7, #0]
 81049dc:	2b08      	cmp	r3, #8
 81049de:	d109      	bne.n	81049f4 <HAL_TIM_PWM_Start+0x58>
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81049e6:	b2db      	uxtb	r3, r3
 81049e8:	2b01      	cmp	r3, #1
 81049ea:	bf14      	ite	ne
 81049ec:	2301      	movne	r3, #1
 81049ee:	2300      	moveq	r3, #0
 81049f0:	b2db      	uxtb	r3, r3
 81049f2:	e022      	b.n	8104a3a <HAL_TIM_PWM_Start+0x9e>
 81049f4:	683b      	ldr	r3, [r7, #0]
 81049f6:	2b0c      	cmp	r3, #12
 81049f8:	d109      	bne.n	8104a0e <HAL_TIM_PWM_Start+0x72>
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104a00:	b2db      	uxtb	r3, r3
 8104a02:	2b01      	cmp	r3, #1
 8104a04:	bf14      	ite	ne
 8104a06:	2301      	movne	r3, #1
 8104a08:	2300      	moveq	r3, #0
 8104a0a:	b2db      	uxtb	r3, r3
 8104a0c:	e015      	b.n	8104a3a <HAL_TIM_PWM_Start+0x9e>
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	2b10      	cmp	r3, #16
 8104a12:	d109      	bne.n	8104a28 <HAL_TIM_PWM_Start+0x8c>
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8104a1a:	b2db      	uxtb	r3, r3
 8104a1c:	2b01      	cmp	r3, #1
 8104a1e:	bf14      	ite	ne
 8104a20:	2301      	movne	r3, #1
 8104a22:	2300      	moveq	r3, #0
 8104a24:	b2db      	uxtb	r3, r3
 8104a26:	e008      	b.n	8104a3a <HAL_TIM_PWM_Start+0x9e>
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8104a2e:	b2db      	uxtb	r3, r3
 8104a30:	2b01      	cmp	r3, #1
 8104a32:	bf14      	ite	ne
 8104a34:	2301      	movne	r3, #1
 8104a36:	2300      	moveq	r3, #0
 8104a38:	b2db      	uxtb	r3, r3
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d001      	beq.n	8104a42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8104a3e:	2301      	movs	r3, #1
 8104a40:	e0a1      	b.n	8104b86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a42:	683b      	ldr	r3, [r7, #0]
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d104      	bne.n	8104a52 <HAL_TIM_PWM_Start+0xb6>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	2202      	movs	r2, #2
 8104a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8104a50:	e023      	b.n	8104a9a <HAL_TIM_PWM_Start+0xfe>
 8104a52:	683b      	ldr	r3, [r7, #0]
 8104a54:	2b04      	cmp	r3, #4
 8104a56:	d104      	bne.n	8104a62 <HAL_TIM_PWM_Start+0xc6>
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	2202      	movs	r2, #2
 8104a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8104a60:	e01b      	b.n	8104a9a <HAL_TIM_PWM_Start+0xfe>
 8104a62:	683b      	ldr	r3, [r7, #0]
 8104a64:	2b08      	cmp	r3, #8
 8104a66:	d104      	bne.n	8104a72 <HAL_TIM_PWM_Start+0xd6>
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	2202      	movs	r2, #2
 8104a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8104a70:	e013      	b.n	8104a9a <HAL_TIM_PWM_Start+0xfe>
 8104a72:	683b      	ldr	r3, [r7, #0]
 8104a74:	2b0c      	cmp	r3, #12
 8104a76:	d104      	bne.n	8104a82 <HAL_TIM_PWM_Start+0xe6>
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	2202      	movs	r2, #2
 8104a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8104a80:	e00b      	b.n	8104a9a <HAL_TIM_PWM_Start+0xfe>
 8104a82:	683b      	ldr	r3, [r7, #0]
 8104a84:	2b10      	cmp	r3, #16
 8104a86:	d104      	bne.n	8104a92 <HAL_TIM_PWM_Start+0xf6>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	2202      	movs	r2, #2
 8104a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8104a90:	e003      	b.n	8104a9a <HAL_TIM_PWM_Start+0xfe>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	2202      	movs	r2, #2
 8104a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	2201      	movs	r2, #1
 8104aa0:	6839      	ldr	r1, [r7, #0]
 8104aa2:	4618      	mov	r0, r3
 8104aa4:	f001 f90a 	bl	8105cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4a38      	ldr	r2, [pc, #224]	@ (8104b90 <HAL_TIM_PWM_Start+0x1f4>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d013      	beq.n	8104ada <HAL_TIM_PWM_Start+0x13e>
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	681b      	ldr	r3, [r3, #0]
 8104ab6:	4a37      	ldr	r2, [pc, #220]	@ (8104b94 <HAL_TIM_PWM_Start+0x1f8>)
 8104ab8:	4293      	cmp	r3, r2
 8104aba:	d00e      	beq.n	8104ada <HAL_TIM_PWM_Start+0x13e>
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	4a35      	ldr	r2, [pc, #212]	@ (8104b98 <HAL_TIM_PWM_Start+0x1fc>)
 8104ac2:	4293      	cmp	r3, r2
 8104ac4:	d009      	beq.n	8104ada <HAL_TIM_PWM_Start+0x13e>
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	4a34      	ldr	r2, [pc, #208]	@ (8104b9c <HAL_TIM_PWM_Start+0x200>)
 8104acc:	4293      	cmp	r3, r2
 8104ace:	d004      	beq.n	8104ada <HAL_TIM_PWM_Start+0x13e>
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	4a32      	ldr	r2, [pc, #200]	@ (8104ba0 <HAL_TIM_PWM_Start+0x204>)
 8104ad6:	4293      	cmp	r3, r2
 8104ad8:	d101      	bne.n	8104ade <HAL_TIM_PWM_Start+0x142>
 8104ada:	2301      	movs	r3, #1
 8104adc:	e000      	b.n	8104ae0 <HAL_TIM_PWM_Start+0x144>
 8104ade:	2300      	movs	r3, #0
 8104ae0:	2b00      	cmp	r3, #0
 8104ae2:	d007      	beq.n	8104af4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8104af2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	4a25      	ldr	r2, [pc, #148]	@ (8104b90 <HAL_TIM_PWM_Start+0x1f4>)
 8104afa:	4293      	cmp	r3, r2
 8104afc:	d022      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104b06:	d01d      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	4a25      	ldr	r2, [pc, #148]	@ (8104ba4 <HAL_TIM_PWM_Start+0x208>)
 8104b0e:	4293      	cmp	r3, r2
 8104b10:	d018      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	4a24      	ldr	r2, [pc, #144]	@ (8104ba8 <HAL_TIM_PWM_Start+0x20c>)
 8104b18:	4293      	cmp	r3, r2
 8104b1a:	d013      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	4a22      	ldr	r2, [pc, #136]	@ (8104bac <HAL_TIM_PWM_Start+0x210>)
 8104b22:	4293      	cmp	r3, r2
 8104b24:	d00e      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8104b94 <HAL_TIM_PWM_Start+0x1f8>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d009      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	681b      	ldr	r3, [r3, #0]
 8104b34:	4a1e      	ldr	r2, [pc, #120]	@ (8104bb0 <HAL_TIM_PWM_Start+0x214>)
 8104b36:	4293      	cmp	r3, r2
 8104b38:	d004      	beq.n	8104b44 <HAL_TIM_PWM_Start+0x1a8>
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	4a16      	ldr	r2, [pc, #88]	@ (8104b98 <HAL_TIM_PWM_Start+0x1fc>)
 8104b40:	4293      	cmp	r3, r2
 8104b42:	d115      	bne.n	8104b70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	689a      	ldr	r2, [r3, #8]
 8104b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8104bb4 <HAL_TIM_PWM_Start+0x218>)
 8104b4c:	4013      	ands	r3, r2
 8104b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	2b06      	cmp	r3, #6
 8104b54:	d015      	beq.n	8104b82 <HAL_TIM_PWM_Start+0x1e6>
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104b5c:	d011      	beq.n	8104b82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	681a      	ldr	r2, [r3, #0]
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	f042 0201 	orr.w	r2, r2, #1
 8104b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b6e:	e008      	b.n	8104b82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	681a      	ldr	r2, [r3, #0]
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	f042 0201 	orr.w	r2, r2, #1
 8104b7e:	601a      	str	r2, [r3, #0]
 8104b80:	e000      	b.n	8104b84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104b84:	2300      	movs	r3, #0
}
 8104b86:	4618      	mov	r0, r3
 8104b88:	3710      	adds	r7, #16
 8104b8a:	46bd      	mov	sp, r7
 8104b8c:	bd80      	pop	{r7, pc}
 8104b8e:	bf00      	nop
 8104b90:	40010000 	.word	0x40010000
 8104b94:	40010400 	.word	0x40010400
 8104b98:	40014000 	.word	0x40014000
 8104b9c:	40014400 	.word	0x40014400
 8104ba0:	40014800 	.word	0x40014800
 8104ba4:	40000400 	.word	0x40000400
 8104ba8:	40000800 	.word	0x40000800
 8104bac:	40000c00 	.word	0x40000c00
 8104bb0:	40001800 	.word	0x40001800
 8104bb4:	00010007 	.word	0x00010007

08104bb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8104bb8:	b580      	push	{r7, lr}
 8104bba:	b086      	sub	sp, #24
 8104bbc:	af00      	add	r7, sp, #0
 8104bbe:	6078      	str	r0, [r7, #4]
 8104bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	2b00      	cmp	r3, #0
 8104bc6:	d101      	bne.n	8104bcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8104bc8:	2301      	movs	r3, #1
 8104bca:	e097      	b.n	8104cfc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8104bd2:	b2db      	uxtb	r3, r3
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d106      	bne.n	8104be6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	2200      	movs	r2, #0
 8104bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8104be0:	6878      	ldr	r0, [r7, #4]
 8104be2:	f7fc feef 	bl	81019c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	2202      	movs	r2, #2
 8104bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	689b      	ldr	r3, [r3, #8]
 8104bf4:	687a      	ldr	r2, [r7, #4]
 8104bf6:	6812      	ldr	r2, [r2, #0]
 8104bf8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8104bfc:	f023 0307 	bic.w	r3, r3, #7
 8104c00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	681a      	ldr	r2, [r3, #0]
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	3304      	adds	r3, #4
 8104c0a:	4619      	mov	r1, r3
 8104c0c:	4610      	mov	r0, r2
 8104c0e:	f000 fc43 	bl	8105498 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	689b      	ldr	r3, [r3, #8]
 8104c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	699b      	ldr	r3, [r3, #24]
 8104c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	6a1b      	ldr	r3, [r3, #32]
 8104c28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8104c2a:	683b      	ldr	r3, [r7, #0]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	697a      	ldr	r2, [r7, #20]
 8104c30:	4313      	orrs	r3, r2
 8104c32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8104c34:	693b      	ldr	r3, [r7, #16]
 8104c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8104c3a:	f023 0303 	bic.w	r3, r3, #3
 8104c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8104c40:	683b      	ldr	r3, [r7, #0]
 8104c42:	689a      	ldr	r2, [r3, #8]
 8104c44:	683b      	ldr	r3, [r7, #0]
 8104c46:	699b      	ldr	r3, [r3, #24]
 8104c48:	021b      	lsls	r3, r3, #8
 8104c4a:	4313      	orrs	r3, r2
 8104c4c:	693a      	ldr	r2, [r7, #16]
 8104c4e:	4313      	orrs	r3, r2
 8104c50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8104c52:	693b      	ldr	r3, [r7, #16]
 8104c54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8104c58:	f023 030c 	bic.w	r3, r3, #12
 8104c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8104c5e:	693b      	ldr	r3, [r7, #16]
 8104c60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8104c64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8104c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8104c6a:	683b      	ldr	r3, [r7, #0]
 8104c6c:	68da      	ldr	r2, [r3, #12]
 8104c6e:	683b      	ldr	r3, [r7, #0]
 8104c70:	69db      	ldr	r3, [r3, #28]
 8104c72:	021b      	lsls	r3, r3, #8
 8104c74:	4313      	orrs	r3, r2
 8104c76:	693a      	ldr	r2, [r7, #16]
 8104c78:	4313      	orrs	r3, r2
 8104c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8104c7c:	683b      	ldr	r3, [r7, #0]
 8104c7e:	691b      	ldr	r3, [r3, #16]
 8104c80:	011a      	lsls	r2, r3, #4
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	6a1b      	ldr	r3, [r3, #32]
 8104c86:	031b      	lsls	r3, r3, #12
 8104c88:	4313      	orrs	r3, r2
 8104c8a:	693a      	ldr	r2, [r7, #16]
 8104c8c:	4313      	orrs	r3, r2
 8104c8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8104c90:	68fb      	ldr	r3, [r7, #12]
 8104c92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8104c96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8104c9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8104ca0:	683b      	ldr	r3, [r7, #0]
 8104ca2:	685a      	ldr	r2, [r3, #4]
 8104ca4:	683b      	ldr	r3, [r7, #0]
 8104ca6:	695b      	ldr	r3, [r3, #20]
 8104ca8:	011b      	lsls	r3, r3, #4
 8104caa:	4313      	orrs	r3, r2
 8104cac:	68fa      	ldr	r2, [r7, #12]
 8104cae:	4313      	orrs	r3, r2
 8104cb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	681b      	ldr	r3, [r3, #0]
 8104cb6:	697a      	ldr	r2, [r7, #20]
 8104cb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	693a      	ldr	r2, [r7, #16]
 8104cc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	681b      	ldr	r3, [r3, #0]
 8104cc6:	68fa      	ldr	r2, [r7, #12]
 8104cc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	2201      	movs	r2, #1
 8104cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	2201      	movs	r2, #1
 8104cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	2201      	movs	r2, #1
 8104cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	2201      	movs	r2, #1
 8104ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	2201      	movs	r2, #1
 8104cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	2201      	movs	r2, #1
 8104cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8104cfa:	2300      	movs	r3, #0
}
 8104cfc:	4618      	mov	r0, r3
 8104cfe:	3718      	adds	r7, #24
 8104d00:	46bd      	mov	sp, r7
 8104d02:	bd80      	pop	{r7, pc}

08104d04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104d04:	b580      	push	{r7, lr}
 8104d06:	b084      	sub	sp, #16
 8104d08:	af00      	add	r7, sp, #0
 8104d0a:	6078      	str	r0, [r7, #4]
 8104d0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8104d14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8104d1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8104d24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8104d26:	687b      	ldr	r3, [r7, #4]
 8104d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8104d2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8104d2e:	683b      	ldr	r3, [r7, #0]
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d110      	bne.n	8104d56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104d34:	7bfb      	ldrb	r3, [r7, #15]
 8104d36:	2b01      	cmp	r3, #1
 8104d38:	d102      	bne.n	8104d40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8104d3a:	7b7b      	ldrb	r3, [r7, #13]
 8104d3c:	2b01      	cmp	r3, #1
 8104d3e:	d001      	beq.n	8104d44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8104d40:	2301      	movs	r3, #1
 8104d42:	e069      	b.n	8104e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	2202      	movs	r2, #2
 8104d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	2202      	movs	r2, #2
 8104d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8104d54:	e031      	b.n	8104dba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8104d56:	683b      	ldr	r3, [r7, #0]
 8104d58:	2b04      	cmp	r3, #4
 8104d5a:	d110      	bne.n	8104d7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104d5c:	7bbb      	ldrb	r3, [r7, #14]
 8104d5e:	2b01      	cmp	r3, #1
 8104d60:	d102      	bne.n	8104d68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8104d62:	7b3b      	ldrb	r3, [r7, #12]
 8104d64:	2b01      	cmp	r3, #1
 8104d66:	d001      	beq.n	8104d6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8104d68:	2301      	movs	r3, #1
 8104d6a:	e055      	b.n	8104e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	2202      	movs	r2, #2
 8104d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	2202      	movs	r2, #2
 8104d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8104d7c:	e01d      	b.n	8104dba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104d7e:	7bfb      	ldrb	r3, [r7, #15]
 8104d80:	2b01      	cmp	r3, #1
 8104d82:	d108      	bne.n	8104d96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104d84:	7bbb      	ldrb	r3, [r7, #14]
 8104d86:	2b01      	cmp	r3, #1
 8104d88:	d105      	bne.n	8104d96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104d8a:	7b7b      	ldrb	r3, [r7, #13]
 8104d8c:	2b01      	cmp	r3, #1
 8104d8e:	d102      	bne.n	8104d96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8104d90:	7b3b      	ldrb	r3, [r7, #12]
 8104d92:	2b01      	cmp	r3, #1
 8104d94:	d001      	beq.n	8104d9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8104d96:	2301      	movs	r3, #1
 8104d98:	e03e      	b.n	8104e18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	2202      	movs	r2, #2
 8104d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	2202      	movs	r2, #2
 8104da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	2202      	movs	r2, #2
 8104dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	2202      	movs	r2, #2
 8104db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8104dba:	683b      	ldr	r3, [r7, #0]
 8104dbc:	2b00      	cmp	r3, #0
 8104dbe:	d003      	beq.n	8104dc8 <HAL_TIM_Encoder_Start+0xc4>
 8104dc0:	683b      	ldr	r3, [r7, #0]
 8104dc2:	2b04      	cmp	r3, #4
 8104dc4:	d008      	beq.n	8104dd8 <HAL_TIM_Encoder_Start+0xd4>
 8104dc6:	e00f      	b.n	8104de8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	681b      	ldr	r3, [r3, #0]
 8104dcc:	2201      	movs	r2, #1
 8104dce:	2100      	movs	r1, #0
 8104dd0:	4618      	mov	r0, r3
 8104dd2:	f000 ff73 	bl	8105cbc <TIM_CCxChannelCmd>
      break;
 8104dd6:	e016      	b.n	8104e06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	2201      	movs	r2, #1
 8104dde:	2104      	movs	r1, #4
 8104de0:	4618      	mov	r0, r3
 8104de2:	f000 ff6b 	bl	8105cbc <TIM_CCxChannelCmd>
      break;
 8104de6:	e00e      	b.n	8104e06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	2201      	movs	r2, #1
 8104dee:	2100      	movs	r1, #0
 8104df0:	4618      	mov	r0, r3
 8104df2:	f000 ff63 	bl	8105cbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	2201      	movs	r2, #1
 8104dfc:	2104      	movs	r1, #4
 8104dfe:	4618      	mov	r0, r3
 8104e00:	f000 ff5c 	bl	8105cbc <TIM_CCxChannelCmd>
      break;
 8104e04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	681a      	ldr	r2, [r3, #0]
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	f042 0201 	orr.w	r2, r2, #1
 8104e14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8104e16:	2300      	movs	r3, #0
}
 8104e18:	4618      	mov	r0, r3
 8104e1a:	3710      	adds	r7, #16
 8104e1c:	46bd      	mov	sp, r7
 8104e1e:	bd80      	pop	{r7, pc}

08104e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104e20:	b580      	push	{r7, lr}
 8104e22:	b084      	sub	sp, #16
 8104e24:	af00      	add	r7, sp, #0
 8104e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	68db      	ldr	r3, [r3, #12]
 8104e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	691b      	ldr	r3, [r3, #16]
 8104e36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8104e38:	68bb      	ldr	r3, [r7, #8]
 8104e3a:	f003 0302 	and.w	r3, r3, #2
 8104e3e:	2b00      	cmp	r3, #0
 8104e40:	d020      	beq.n	8104e84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8104e42:	68fb      	ldr	r3, [r7, #12]
 8104e44:	f003 0302 	and.w	r3, r3, #2
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d01b      	beq.n	8104e84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	f06f 0202 	mvn.w	r2, #2
 8104e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	2201      	movs	r2, #1
 8104e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	699b      	ldr	r3, [r3, #24]
 8104e62:	f003 0303 	and.w	r3, r3, #3
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d003      	beq.n	8104e72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104e6a:	6878      	ldr	r0, [r7, #4]
 8104e6c:	f000 faf6 	bl	810545c <HAL_TIM_IC_CaptureCallback>
 8104e70:	e005      	b.n	8104e7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104e72:	6878      	ldr	r0, [r7, #4]
 8104e74:	f000 fae8 	bl	8105448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104e78:	6878      	ldr	r0, [r7, #4]
 8104e7a:	f000 faf9 	bl	8105470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	2200      	movs	r2, #0
 8104e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8104e84:	68bb      	ldr	r3, [r7, #8]
 8104e86:	f003 0304 	and.w	r3, r3, #4
 8104e8a:	2b00      	cmp	r3, #0
 8104e8c:	d020      	beq.n	8104ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8104e8e:	68fb      	ldr	r3, [r7, #12]
 8104e90:	f003 0304 	and.w	r3, r3, #4
 8104e94:	2b00      	cmp	r3, #0
 8104e96:	d01b      	beq.n	8104ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f06f 0204 	mvn.w	r2, #4
 8104ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	2202      	movs	r2, #2
 8104ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	681b      	ldr	r3, [r3, #0]
 8104eac:	699b      	ldr	r3, [r3, #24]
 8104eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	d003      	beq.n	8104ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104eb6:	6878      	ldr	r0, [r7, #4]
 8104eb8:	f000 fad0 	bl	810545c <HAL_TIM_IC_CaptureCallback>
 8104ebc:	e005      	b.n	8104eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104ebe:	6878      	ldr	r0, [r7, #4]
 8104ec0:	f000 fac2 	bl	8105448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104ec4:	6878      	ldr	r0, [r7, #4]
 8104ec6:	f000 fad3 	bl	8105470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	2200      	movs	r2, #0
 8104ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8104ed0:	68bb      	ldr	r3, [r7, #8]
 8104ed2:	f003 0308 	and.w	r3, r3, #8
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d020      	beq.n	8104f1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	f003 0308 	and.w	r3, r3, #8
 8104ee0:	2b00      	cmp	r3, #0
 8104ee2:	d01b      	beq.n	8104f1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	f06f 0208 	mvn.w	r2, #8
 8104eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	2204      	movs	r2, #4
 8104ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	69db      	ldr	r3, [r3, #28]
 8104efa:	f003 0303 	and.w	r3, r3, #3
 8104efe:	2b00      	cmp	r3, #0
 8104f00:	d003      	beq.n	8104f0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104f02:	6878      	ldr	r0, [r7, #4]
 8104f04:	f000 faaa 	bl	810545c <HAL_TIM_IC_CaptureCallback>
 8104f08:	e005      	b.n	8104f16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104f0a:	6878      	ldr	r0, [r7, #4]
 8104f0c:	f000 fa9c 	bl	8105448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104f10:	6878      	ldr	r0, [r7, #4]
 8104f12:	f000 faad 	bl	8105470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	2200      	movs	r2, #0
 8104f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8104f1c:	68bb      	ldr	r3, [r7, #8]
 8104f1e:	f003 0310 	and.w	r3, r3, #16
 8104f22:	2b00      	cmp	r3, #0
 8104f24:	d020      	beq.n	8104f68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8104f26:	68fb      	ldr	r3, [r7, #12]
 8104f28:	f003 0310 	and.w	r3, r3, #16
 8104f2c:	2b00      	cmp	r3, #0
 8104f2e:	d01b      	beq.n	8104f68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f06f 0210 	mvn.w	r2, #16
 8104f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	2208      	movs	r2, #8
 8104f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	69db      	ldr	r3, [r3, #28]
 8104f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	d003      	beq.n	8104f56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104f4e:	6878      	ldr	r0, [r7, #4]
 8104f50:	f000 fa84 	bl	810545c <HAL_TIM_IC_CaptureCallback>
 8104f54:	e005      	b.n	8104f62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104f56:	6878      	ldr	r0, [r7, #4]
 8104f58:	f000 fa76 	bl	8105448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104f5c:	6878      	ldr	r0, [r7, #4]
 8104f5e:	f000 fa87 	bl	8105470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	2200      	movs	r2, #0
 8104f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8104f68:	68bb      	ldr	r3, [r7, #8]
 8104f6a:	f003 0301 	and.w	r3, r3, #1
 8104f6e:	2b00      	cmp	r3, #0
 8104f70:	d00c      	beq.n	8104f8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8104f72:	68fb      	ldr	r3, [r7, #12]
 8104f74:	f003 0301 	and.w	r3, r3, #1
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d007      	beq.n	8104f8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	f06f 0201 	mvn.w	r2, #1
 8104f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104f86:	6878      	ldr	r0, [r7, #4]
 8104f88:	f7fc fbf6 	bl	8101778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8104f8c:	68bb      	ldr	r3, [r7, #8]
 8104f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104f92:	2b00      	cmp	r3, #0
 8104f94:	d104      	bne.n	8104fa0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8104f96:	68bb      	ldr	r3, [r7, #8]
 8104f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d00c      	beq.n	8104fba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104fa6:	2b00      	cmp	r3, #0
 8104fa8:	d007      	beq.n	8104fba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8104fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104fb4:	6878      	ldr	r0, [r7, #4]
 8104fb6:	f000 ffbd 	bl	8105f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8104fba:	68bb      	ldr	r3, [r7, #8]
 8104fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	d00c      	beq.n	8104fde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8104fc4:	68fb      	ldr	r3, [r7, #12]
 8104fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104fca:	2b00      	cmp	r3, #0
 8104fcc:	d007      	beq.n	8104fde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8104fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104fd8:	6878      	ldr	r0, [r7, #4]
 8104fda:	f000 ffb5 	bl	8105f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8104fde:	68bb      	ldr	r3, [r7, #8]
 8104fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104fe4:	2b00      	cmp	r3, #0
 8104fe6:	d00c      	beq.n	8105002 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8104fe8:	68fb      	ldr	r3, [r7, #12]
 8104fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d007      	beq.n	8105002 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8104ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104ffc:	6878      	ldr	r0, [r7, #4]
 8104ffe:	f000 fa41 	bl	8105484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8105002:	68bb      	ldr	r3, [r7, #8]
 8105004:	f003 0320 	and.w	r3, r3, #32
 8105008:	2b00      	cmp	r3, #0
 810500a:	d00c      	beq.n	8105026 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810500c:	68fb      	ldr	r3, [r7, #12]
 810500e:	f003 0320 	and.w	r3, r3, #32
 8105012:	2b00      	cmp	r3, #0
 8105014:	d007      	beq.n	8105026 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	f06f 0220 	mvn.w	r2, #32
 810501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105020:	6878      	ldr	r0, [r7, #4]
 8105022:	f000 ff7d 	bl	8105f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105026:	bf00      	nop
 8105028:	3710      	adds	r7, #16
 810502a:	46bd      	mov	sp, r7
 810502c:	bd80      	pop	{r7, pc}
	...

08105030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105030:	b580      	push	{r7, lr}
 8105032:	b086      	sub	sp, #24
 8105034:	af00      	add	r7, sp, #0
 8105036:	60f8      	str	r0, [r7, #12]
 8105038:	60b9      	str	r1, [r7, #8]
 810503a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810503c:	2300      	movs	r3, #0
 810503e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105046:	2b01      	cmp	r3, #1
 8105048:	d101      	bne.n	810504e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810504a:	2302      	movs	r3, #2
 810504c:	e0ff      	b.n	810524e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	2201      	movs	r2, #1
 8105052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	2b14      	cmp	r3, #20
 810505a:	f200 80f0 	bhi.w	810523e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810505e:	a201      	add	r2, pc, #4	@ (adr r2, 8105064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8105060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105064:	081050b9 	.word	0x081050b9
 8105068:	0810523f 	.word	0x0810523f
 810506c:	0810523f 	.word	0x0810523f
 8105070:	0810523f 	.word	0x0810523f
 8105074:	081050f9 	.word	0x081050f9
 8105078:	0810523f 	.word	0x0810523f
 810507c:	0810523f 	.word	0x0810523f
 8105080:	0810523f 	.word	0x0810523f
 8105084:	0810513b 	.word	0x0810513b
 8105088:	0810523f 	.word	0x0810523f
 810508c:	0810523f 	.word	0x0810523f
 8105090:	0810523f 	.word	0x0810523f
 8105094:	0810517b 	.word	0x0810517b
 8105098:	0810523f 	.word	0x0810523f
 810509c:	0810523f 	.word	0x0810523f
 81050a0:	0810523f 	.word	0x0810523f
 81050a4:	081051bd 	.word	0x081051bd
 81050a8:	0810523f 	.word	0x0810523f
 81050ac:	0810523f 	.word	0x0810523f
 81050b0:	0810523f 	.word	0x0810523f
 81050b4:	081051fd 	.word	0x081051fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	681b      	ldr	r3, [r3, #0]
 81050bc:	68b9      	ldr	r1, [r7, #8]
 81050be:	4618      	mov	r0, r3
 81050c0:	f000 fa8a 	bl	81055d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81050c4:	68fb      	ldr	r3, [r7, #12]
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	699a      	ldr	r2, [r3, #24]
 81050ca:	68fb      	ldr	r3, [r7, #12]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	f042 0208 	orr.w	r2, r2, #8
 81050d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	699a      	ldr	r2, [r3, #24]
 81050da:	68fb      	ldr	r3, [r7, #12]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	f022 0204 	bic.w	r2, r2, #4
 81050e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81050e4:	68fb      	ldr	r3, [r7, #12]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	6999      	ldr	r1, [r3, #24]
 81050ea:	68bb      	ldr	r3, [r7, #8]
 81050ec:	691a      	ldr	r2, [r3, #16]
 81050ee:	68fb      	ldr	r3, [r7, #12]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	430a      	orrs	r2, r1
 81050f4:	619a      	str	r2, [r3, #24]
      break;
 81050f6:	e0a5      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81050f8:	68fb      	ldr	r3, [r7, #12]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	68b9      	ldr	r1, [r7, #8]
 81050fe:	4618      	mov	r0, r3
 8105100:	f000 fafa 	bl	81056f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105104:	68fb      	ldr	r3, [r7, #12]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	699a      	ldr	r2, [r3, #24]
 810510a:	68fb      	ldr	r3, [r7, #12]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	699a      	ldr	r2, [r3, #24]
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8105122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105124:	68fb      	ldr	r3, [r7, #12]
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	6999      	ldr	r1, [r3, #24]
 810512a:	68bb      	ldr	r3, [r7, #8]
 810512c:	691b      	ldr	r3, [r3, #16]
 810512e:	021a      	lsls	r2, r3, #8
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	430a      	orrs	r2, r1
 8105136:	619a      	str	r2, [r3, #24]
      break;
 8105138:	e084      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	681b      	ldr	r3, [r3, #0]
 810513e:	68b9      	ldr	r1, [r7, #8]
 8105140:	4618      	mov	r0, r3
 8105142:	f000 fb63 	bl	810580c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105146:	68fb      	ldr	r3, [r7, #12]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	69da      	ldr	r2, [r3, #28]
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f042 0208 	orr.w	r2, r2, #8
 8105154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	69da      	ldr	r2, [r3, #28]
 810515c:	68fb      	ldr	r3, [r7, #12]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	f022 0204 	bic.w	r2, r2, #4
 8105164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105166:	68fb      	ldr	r3, [r7, #12]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	69d9      	ldr	r1, [r3, #28]
 810516c:	68bb      	ldr	r3, [r7, #8]
 810516e:	691a      	ldr	r2, [r3, #16]
 8105170:	68fb      	ldr	r3, [r7, #12]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	430a      	orrs	r2, r1
 8105176:	61da      	str	r2, [r3, #28]
      break;
 8105178:	e064      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810517a:	68fb      	ldr	r3, [r7, #12]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	68b9      	ldr	r1, [r7, #8]
 8105180:	4618      	mov	r0, r3
 8105182:	f000 fbcb 	bl	810591c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	69da      	ldr	r2, [r3, #28]
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	69da      	ldr	r2, [r3, #28]
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	681b      	ldr	r3, [r3, #0]
 81051a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81051a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	69d9      	ldr	r1, [r3, #28]
 81051ac:	68bb      	ldr	r3, [r7, #8]
 81051ae:	691b      	ldr	r3, [r3, #16]
 81051b0:	021a      	lsls	r2, r3, #8
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	430a      	orrs	r2, r1
 81051b8:	61da      	str	r2, [r3, #28]
      break;
 81051ba:	e043      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	681b      	ldr	r3, [r3, #0]
 81051c0:	68b9      	ldr	r1, [r7, #8]
 81051c2:	4618      	mov	r0, r3
 81051c4:	f000 fc14 	bl	81059f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81051c8:	68fb      	ldr	r3, [r7, #12]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	681b      	ldr	r3, [r3, #0]
 81051d2:	f042 0208 	orr.w	r2, r2, #8
 81051d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81051d8:	68fb      	ldr	r3, [r7, #12]
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81051de:	68fb      	ldr	r3, [r7, #12]
 81051e0:	681b      	ldr	r3, [r3, #0]
 81051e2:	f022 0204 	bic.w	r2, r2, #4
 81051e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81051e8:	68fb      	ldr	r3, [r7, #12]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81051ee:	68bb      	ldr	r3, [r7, #8]
 81051f0:	691a      	ldr	r2, [r3, #16]
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	430a      	orrs	r2, r1
 81051f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81051fa:	e023      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81051fc:	68fb      	ldr	r3, [r7, #12]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	68b9      	ldr	r1, [r7, #8]
 8105202:	4618      	mov	r0, r3
 8105204:	f000 fc58 	bl	8105ab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8105216:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810521e:	68fb      	ldr	r3, [r7, #12]
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8105226:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	681b      	ldr	r3, [r3, #0]
 810522c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810522e:	68bb      	ldr	r3, [r7, #8]
 8105230:	691b      	ldr	r3, [r3, #16]
 8105232:	021a      	lsls	r2, r3, #8
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	430a      	orrs	r2, r1
 810523a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810523c:	e002      	b.n	8105244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810523e:	2301      	movs	r3, #1
 8105240:	75fb      	strb	r3, [r7, #23]
      break;
 8105242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	2200      	movs	r2, #0
 8105248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810524c:	7dfb      	ldrb	r3, [r7, #23]
}
 810524e:	4618      	mov	r0, r3
 8105250:	3718      	adds	r7, #24
 8105252:	46bd      	mov	sp, r7
 8105254:	bd80      	pop	{r7, pc}
 8105256:	bf00      	nop

08105258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105258:	b580      	push	{r7, lr}
 810525a:	b084      	sub	sp, #16
 810525c:	af00      	add	r7, sp, #0
 810525e:	6078      	str	r0, [r7, #4]
 8105260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105262:	2300      	movs	r3, #0
 8105264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810526c:	2b01      	cmp	r3, #1
 810526e:	d101      	bne.n	8105274 <HAL_TIM_ConfigClockSource+0x1c>
 8105270:	2302      	movs	r3, #2
 8105272:	e0de      	b.n	8105432 <HAL_TIM_ConfigClockSource+0x1da>
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	2201      	movs	r2, #1
 8105278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	2202      	movs	r2, #2
 8105280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	689b      	ldr	r3, [r3, #8]
 810528a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810528c:	68bb      	ldr	r3, [r7, #8]
 810528e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8105292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8105296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105298:	68bb      	ldr	r3, [r7, #8]
 810529a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810529e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	68ba      	ldr	r2, [r7, #8]
 81052a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81052a8:	683b      	ldr	r3, [r7, #0]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	4a63      	ldr	r2, [pc, #396]	@ (810543c <HAL_TIM_ConfigClockSource+0x1e4>)
 81052ae:	4293      	cmp	r3, r2
 81052b0:	f000 80a9 	beq.w	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 81052b4:	4a61      	ldr	r2, [pc, #388]	@ (810543c <HAL_TIM_ConfigClockSource+0x1e4>)
 81052b6:	4293      	cmp	r3, r2
 81052b8:	f200 80ae 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 81052bc:	4a60      	ldr	r2, [pc, #384]	@ (8105440 <HAL_TIM_ConfigClockSource+0x1e8>)
 81052be:	4293      	cmp	r3, r2
 81052c0:	f000 80a1 	beq.w	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 81052c4:	4a5e      	ldr	r2, [pc, #376]	@ (8105440 <HAL_TIM_ConfigClockSource+0x1e8>)
 81052c6:	4293      	cmp	r3, r2
 81052c8:	f200 80a6 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 81052cc:	4a5d      	ldr	r2, [pc, #372]	@ (8105444 <HAL_TIM_ConfigClockSource+0x1ec>)
 81052ce:	4293      	cmp	r3, r2
 81052d0:	f000 8099 	beq.w	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 81052d4:	4a5b      	ldr	r2, [pc, #364]	@ (8105444 <HAL_TIM_ConfigClockSource+0x1ec>)
 81052d6:	4293      	cmp	r3, r2
 81052d8:	f200 809e 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 81052dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81052e0:	f000 8091 	beq.w	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 81052e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81052e8:	f200 8096 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 81052ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81052f0:	f000 8089 	beq.w	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 81052f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81052f8:	f200 808e 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 81052fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105300:	d03e      	beq.n	8105380 <HAL_TIM_ConfigClockSource+0x128>
 8105302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105306:	f200 8087 	bhi.w	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 810530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810530e:	f000 8086 	beq.w	810541e <HAL_TIM_ConfigClockSource+0x1c6>
 8105312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105316:	d87f      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105318:	2b70      	cmp	r3, #112	@ 0x70
 810531a:	d01a      	beq.n	8105352 <HAL_TIM_ConfigClockSource+0xfa>
 810531c:	2b70      	cmp	r3, #112	@ 0x70
 810531e:	d87b      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105320:	2b60      	cmp	r3, #96	@ 0x60
 8105322:	d050      	beq.n	81053c6 <HAL_TIM_ConfigClockSource+0x16e>
 8105324:	2b60      	cmp	r3, #96	@ 0x60
 8105326:	d877      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105328:	2b50      	cmp	r3, #80	@ 0x50
 810532a:	d03c      	beq.n	81053a6 <HAL_TIM_ConfigClockSource+0x14e>
 810532c:	2b50      	cmp	r3, #80	@ 0x50
 810532e:	d873      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105330:	2b40      	cmp	r3, #64	@ 0x40
 8105332:	d058      	beq.n	81053e6 <HAL_TIM_ConfigClockSource+0x18e>
 8105334:	2b40      	cmp	r3, #64	@ 0x40
 8105336:	d86f      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105338:	2b30      	cmp	r3, #48	@ 0x30
 810533a:	d064      	beq.n	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 810533c:	2b30      	cmp	r3, #48	@ 0x30
 810533e:	d86b      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105340:	2b20      	cmp	r3, #32
 8105342:	d060      	beq.n	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 8105344:	2b20      	cmp	r3, #32
 8105346:	d867      	bhi.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
 8105348:	2b00      	cmp	r3, #0
 810534a:	d05c      	beq.n	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 810534c:	2b10      	cmp	r3, #16
 810534e:	d05a      	beq.n	8105406 <HAL_TIM_ConfigClockSource+0x1ae>
 8105350:	e062      	b.n	8105418 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105356:	683b      	ldr	r3, [r7, #0]
 8105358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810535a:	683b      	ldr	r3, [r7, #0]
 810535c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810535e:	683b      	ldr	r3, [r7, #0]
 8105360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105362:	f000 fc8b 	bl	8105c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	689b      	ldr	r3, [r3, #8]
 810536c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810536e:	68bb      	ldr	r3, [r7, #8]
 8105370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8105374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	68ba      	ldr	r2, [r7, #8]
 810537c:	609a      	str	r2, [r3, #8]
      break;
 810537e:	e04f      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105384:	683b      	ldr	r3, [r7, #0]
 8105386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8105388:	683b      	ldr	r3, [r7, #0]
 810538a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810538c:	683b      	ldr	r3, [r7, #0]
 810538e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105390:	f000 fc74 	bl	8105c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	689a      	ldr	r2, [r3, #8]
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81053a2:	609a      	str	r2, [r3, #8]
      break;
 81053a4:	e03c      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81053aa:	683b      	ldr	r3, [r7, #0]
 81053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81053ae:	683b      	ldr	r3, [r7, #0]
 81053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81053b2:	461a      	mov	r2, r3
 81053b4:	f000 fbe6 	bl	8105b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	2150      	movs	r1, #80	@ 0x50
 81053be:	4618      	mov	r0, r3
 81053c0:	f000 fc3f 	bl	8105c42 <TIM_ITRx_SetConfig>
      break;
 81053c4:	e02c      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81053ca:	683b      	ldr	r3, [r7, #0]
 81053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81053ce:	683b      	ldr	r3, [r7, #0]
 81053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81053d2:	461a      	mov	r2, r3
 81053d4:	f000 fc05 	bl	8105be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	2160      	movs	r1, #96	@ 0x60
 81053de:	4618      	mov	r0, r3
 81053e0:	f000 fc2f 	bl	8105c42 <TIM_ITRx_SetConfig>
      break;
 81053e4:	e01c      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81053ee:	683b      	ldr	r3, [r7, #0]
 81053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81053f2:	461a      	mov	r2, r3
 81053f4:	f000 fbc6 	bl	8105b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	681b      	ldr	r3, [r3, #0]
 81053fc:	2140      	movs	r1, #64	@ 0x40
 81053fe:	4618      	mov	r0, r3
 8105400:	f000 fc1f 	bl	8105c42 <TIM_ITRx_SetConfig>
      break;
 8105404:	e00c      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681a      	ldr	r2, [r3, #0]
 810540a:	683b      	ldr	r3, [r7, #0]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	4619      	mov	r1, r3
 8105410:	4610      	mov	r0, r2
 8105412:	f000 fc16 	bl	8105c42 <TIM_ITRx_SetConfig>
      break;
 8105416:	e003      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105418:	2301      	movs	r3, #1
 810541a:	73fb      	strb	r3, [r7, #15]
      break;
 810541c:	e000      	b.n	8105420 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810541e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	2201      	movs	r2, #1
 8105424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	2200      	movs	r2, #0
 810542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8105430:	7bfb      	ldrb	r3, [r7, #15]
}
 8105432:	4618      	mov	r0, r3
 8105434:	3710      	adds	r7, #16
 8105436:	46bd      	mov	sp, r7
 8105438:	bd80      	pop	{r7, pc}
 810543a:	bf00      	nop
 810543c:	00100040 	.word	0x00100040
 8105440:	00100030 	.word	0x00100030
 8105444:	00100020 	.word	0x00100020

08105448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105448:	b480      	push	{r7}
 810544a:	b083      	sub	sp, #12
 810544c:	af00      	add	r7, sp, #0
 810544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105450:	bf00      	nop
 8105452:	370c      	adds	r7, #12
 8105454:	46bd      	mov	sp, r7
 8105456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545a:	4770      	bx	lr

0810545c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810545c:	b480      	push	{r7}
 810545e:	b083      	sub	sp, #12
 8105460:	af00      	add	r7, sp, #0
 8105462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105464:	bf00      	nop
 8105466:	370c      	adds	r7, #12
 8105468:	46bd      	mov	sp, r7
 810546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810546e:	4770      	bx	lr

08105470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105470:	b480      	push	{r7}
 8105472:	b083      	sub	sp, #12
 8105474:	af00      	add	r7, sp, #0
 8105476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105478:	bf00      	nop
 810547a:	370c      	adds	r7, #12
 810547c:	46bd      	mov	sp, r7
 810547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105482:	4770      	bx	lr

08105484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105484:	b480      	push	{r7}
 8105486:	b083      	sub	sp, #12
 8105488:	af00      	add	r7, sp, #0
 810548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810548c:	bf00      	nop
 810548e:	370c      	adds	r7, #12
 8105490:	46bd      	mov	sp, r7
 8105492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105496:	4770      	bx	lr

08105498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8105498:	b480      	push	{r7}
 810549a:	b085      	sub	sp, #20
 810549c:	af00      	add	r7, sp, #0
 810549e:	6078      	str	r0, [r7, #4]
 81054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	4a43      	ldr	r2, [pc, #268]	@ (81055b8 <TIM_Base_SetConfig+0x120>)
 81054ac:	4293      	cmp	r3, r2
 81054ae:	d013      	beq.n	81054d8 <TIM_Base_SetConfig+0x40>
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054b6:	d00f      	beq.n	81054d8 <TIM_Base_SetConfig+0x40>
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	4a40      	ldr	r2, [pc, #256]	@ (81055bc <TIM_Base_SetConfig+0x124>)
 81054bc:	4293      	cmp	r3, r2
 81054be:	d00b      	beq.n	81054d8 <TIM_Base_SetConfig+0x40>
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	4a3f      	ldr	r2, [pc, #252]	@ (81055c0 <TIM_Base_SetConfig+0x128>)
 81054c4:	4293      	cmp	r3, r2
 81054c6:	d007      	beq.n	81054d8 <TIM_Base_SetConfig+0x40>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	4a3e      	ldr	r2, [pc, #248]	@ (81055c4 <TIM_Base_SetConfig+0x12c>)
 81054cc:	4293      	cmp	r3, r2
 81054ce:	d003      	beq.n	81054d8 <TIM_Base_SetConfig+0x40>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	4a3d      	ldr	r2, [pc, #244]	@ (81055c8 <TIM_Base_SetConfig+0x130>)
 81054d4:	4293      	cmp	r3, r2
 81054d6:	d108      	bne.n	81054ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81054d8:	68fb      	ldr	r3, [r7, #12]
 81054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81054de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81054e0:	683b      	ldr	r3, [r7, #0]
 81054e2:	685b      	ldr	r3, [r3, #4]
 81054e4:	68fa      	ldr	r2, [r7, #12]
 81054e6:	4313      	orrs	r3, r2
 81054e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	4a32      	ldr	r2, [pc, #200]	@ (81055b8 <TIM_Base_SetConfig+0x120>)
 81054ee:	4293      	cmp	r3, r2
 81054f0:	d01f      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054f8:	d01b      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	4a2f      	ldr	r2, [pc, #188]	@ (81055bc <TIM_Base_SetConfig+0x124>)
 81054fe:	4293      	cmp	r3, r2
 8105500:	d017      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	4a2e      	ldr	r2, [pc, #184]	@ (81055c0 <TIM_Base_SetConfig+0x128>)
 8105506:	4293      	cmp	r3, r2
 8105508:	d013      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	4a2d      	ldr	r2, [pc, #180]	@ (81055c4 <TIM_Base_SetConfig+0x12c>)
 810550e:	4293      	cmp	r3, r2
 8105510:	d00f      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	4a2c      	ldr	r2, [pc, #176]	@ (81055c8 <TIM_Base_SetConfig+0x130>)
 8105516:	4293      	cmp	r3, r2
 8105518:	d00b      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	4a2b      	ldr	r2, [pc, #172]	@ (81055cc <TIM_Base_SetConfig+0x134>)
 810551e:	4293      	cmp	r3, r2
 8105520:	d007      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	4a2a      	ldr	r2, [pc, #168]	@ (81055d0 <TIM_Base_SetConfig+0x138>)
 8105526:	4293      	cmp	r3, r2
 8105528:	d003      	beq.n	8105532 <TIM_Base_SetConfig+0x9a>
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	4a29      	ldr	r2, [pc, #164]	@ (81055d4 <TIM_Base_SetConfig+0x13c>)
 810552e:	4293      	cmp	r3, r2
 8105530:	d108      	bne.n	8105544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810553a:	683b      	ldr	r3, [r7, #0]
 810553c:	68db      	ldr	r3, [r3, #12]
 810553e:	68fa      	ldr	r2, [r7, #12]
 8105540:	4313      	orrs	r3, r2
 8105542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105544:	68fb      	ldr	r3, [r7, #12]
 8105546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810554a:	683b      	ldr	r3, [r7, #0]
 810554c:	695b      	ldr	r3, [r3, #20]
 810554e:	4313      	orrs	r3, r2
 8105550:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105552:	683b      	ldr	r3, [r7, #0]
 8105554:	689a      	ldr	r2, [r3, #8]
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810555a:	683b      	ldr	r3, [r7, #0]
 810555c:	681a      	ldr	r2, [r3, #0]
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	4a14      	ldr	r2, [pc, #80]	@ (81055b8 <TIM_Base_SetConfig+0x120>)
 8105566:	4293      	cmp	r3, r2
 8105568:	d00f      	beq.n	810558a <TIM_Base_SetConfig+0xf2>
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	4a16      	ldr	r2, [pc, #88]	@ (81055c8 <TIM_Base_SetConfig+0x130>)
 810556e:	4293      	cmp	r3, r2
 8105570:	d00b      	beq.n	810558a <TIM_Base_SetConfig+0xf2>
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	4a15      	ldr	r2, [pc, #84]	@ (81055cc <TIM_Base_SetConfig+0x134>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d007      	beq.n	810558a <TIM_Base_SetConfig+0xf2>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	4a14      	ldr	r2, [pc, #80]	@ (81055d0 <TIM_Base_SetConfig+0x138>)
 810557e:	4293      	cmp	r3, r2
 8105580:	d003      	beq.n	810558a <TIM_Base_SetConfig+0xf2>
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	4a13      	ldr	r2, [pc, #76]	@ (81055d4 <TIM_Base_SetConfig+0x13c>)
 8105586:	4293      	cmp	r3, r2
 8105588:	d103      	bne.n	8105592 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810558a:	683b      	ldr	r3, [r7, #0]
 810558c:	691a      	ldr	r2, [r3, #16]
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	f043 0204 	orr.w	r2, r3, #4
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	2201      	movs	r2, #1
 81055a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	68fa      	ldr	r2, [r7, #12]
 81055a8:	601a      	str	r2, [r3, #0]
}
 81055aa:	bf00      	nop
 81055ac:	3714      	adds	r7, #20
 81055ae:	46bd      	mov	sp, r7
 81055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b4:	4770      	bx	lr
 81055b6:	bf00      	nop
 81055b8:	40010000 	.word	0x40010000
 81055bc:	40000400 	.word	0x40000400
 81055c0:	40000800 	.word	0x40000800
 81055c4:	40000c00 	.word	0x40000c00
 81055c8:	40010400 	.word	0x40010400
 81055cc:	40014000 	.word	0x40014000
 81055d0:	40014400 	.word	0x40014400
 81055d4:	40014800 	.word	0x40014800

081055d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81055d8:	b480      	push	{r7}
 81055da:	b087      	sub	sp, #28
 81055dc:	af00      	add	r7, sp, #0
 81055de:	6078      	str	r0, [r7, #4]
 81055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	6a1b      	ldr	r3, [r3, #32]
 81055e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	6a1b      	ldr	r3, [r3, #32]
 81055ec:	f023 0201 	bic.w	r2, r3, #1
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	685b      	ldr	r3, [r3, #4]
 81055f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	699b      	ldr	r3, [r3, #24]
 81055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810560c:	68fb      	ldr	r3, [r7, #12]
 810560e:	f023 0303 	bic.w	r3, r3, #3
 8105612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105614:	683b      	ldr	r3, [r7, #0]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	68fa      	ldr	r2, [r7, #12]
 810561a:	4313      	orrs	r3, r2
 810561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810561e:	697b      	ldr	r3, [r7, #20]
 8105620:	f023 0302 	bic.w	r3, r3, #2
 8105624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105626:	683b      	ldr	r3, [r7, #0]
 8105628:	689b      	ldr	r3, [r3, #8]
 810562a:	697a      	ldr	r2, [r7, #20]
 810562c:	4313      	orrs	r3, r2
 810562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	4a2c      	ldr	r2, [pc, #176]	@ (81056e4 <TIM_OC1_SetConfig+0x10c>)
 8105634:	4293      	cmp	r3, r2
 8105636:	d00f      	beq.n	8105658 <TIM_OC1_SetConfig+0x80>
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	4a2b      	ldr	r2, [pc, #172]	@ (81056e8 <TIM_OC1_SetConfig+0x110>)
 810563c:	4293      	cmp	r3, r2
 810563e:	d00b      	beq.n	8105658 <TIM_OC1_SetConfig+0x80>
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	4a2a      	ldr	r2, [pc, #168]	@ (81056ec <TIM_OC1_SetConfig+0x114>)
 8105644:	4293      	cmp	r3, r2
 8105646:	d007      	beq.n	8105658 <TIM_OC1_SetConfig+0x80>
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	4a29      	ldr	r2, [pc, #164]	@ (81056f0 <TIM_OC1_SetConfig+0x118>)
 810564c:	4293      	cmp	r3, r2
 810564e:	d003      	beq.n	8105658 <TIM_OC1_SetConfig+0x80>
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	4a28      	ldr	r2, [pc, #160]	@ (81056f4 <TIM_OC1_SetConfig+0x11c>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d10c      	bne.n	8105672 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105658:	697b      	ldr	r3, [r7, #20]
 810565a:	f023 0308 	bic.w	r3, r3, #8
 810565e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105660:	683b      	ldr	r3, [r7, #0]
 8105662:	68db      	ldr	r3, [r3, #12]
 8105664:	697a      	ldr	r2, [r7, #20]
 8105666:	4313      	orrs	r3, r2
 8105668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810566a:	697b      	ldr	r3, [r7, #20]
 810566c:	f023 0304 	bic.w	r3, r3, #4
 8105670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	4a1b      	ldr	r2, [pc, #108]	@ (81056e4 <TIM_OC1_SetConfig+0x10c>)
 8105676:	4293      	cmp	r3, r2
 8105678:	d00f      	beq.n	810569a <TIM_OC1_SetConfig+0xc2>
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	4a1a      	ldr	r2, [pc, #104]	@ (81056e8 <TIM_OC1_SetConfig+0x110>)
 810567e:	4293      	cmp	r3, r2
 8105680:	d00b      	beq.n	810569a <TIM_OC1_SetConfig+0xc2>
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	4a19      	ldr	r2, [pc, #100]	@ (81056ec <TIM_OC1_SetConfig+0x114>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d007      	beq.n	810569a <TIM_OC1_SetConfig+0xc2>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	4a18      	ldr	r2, [pc, #96]	@ (81056f0 <TIM_OC1_SetConfig+0x118>)
 810568e:	4293      	cmp	r3, r2
 8105690:	d003      	beq.n	810569a <TIM_OC1_SetConfig+0xc2>
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	4a17      	ldr	r2, [pc, #92]	@ (81056f4 <TIM_OC1_SetConfig+0x11c>)
 8105696:	4293      	cmp	r3, r2
 8105698:	d111      	bne.n	81056be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810569a:	693b      	ldr	r3, [r7, #16]
 810569c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81056a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81056a2:	693b      	ldr	r3, [r7, #16]
 81056a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 81056a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81056aa:	683b      	ldr	r3, [r7, #0]
 81056ac:	695b      	ldr	r3, [r3, #20]
 81056ae:	693a      	ldr	r2, [r7, #16]
 81056b0:	4313      	orrs	r3, r2
 81056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81056b4:	683b      	ldr	r3, [r7, #0]
 81056b6:	699b      	ldr	r3, [r3, #24]
 81056b8:	693a      	ldr	r2, [r7, #16]
 81056ba:	4313      	orrs	r3, r2
 81056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	693a      	ldr	r2, [r7, #16]
 81056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	68fa      	ldr	r2, [r7, #12]
 81056c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81056ca:	683b      	ldr	r3, [r7, #0]
 81056cc:	685a      	ldr	r2, [r3, #4]
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	697a      	ldr	r2, [r7, #20]
 81056d6:	621a      	str	r2, [r3, #32]
}
 81056d8:	bf00      	nop
 81056da:	371c      	adds	r7, #28
 81056dc:	46bd      	mov	sp, r7
 81056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056e2:	4770      	bx	lr
 81056e4:	40010000 	.word	0x40010000
 81056e8:	40010400 	.word	0x40010400
 81056ec:	40014000 	.word	0x40014000
 81056f0:	40014400 	.word	0x40014400
 81056f4:	40014800 	.word	0x40014800

081056f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81056f8:	b480      	push	{r7}
 81056fa:	b087      	sub	sp, #28
 81056fc:	af00      	add	r7, sp, #0
 81056fe:	6078      	str	r0, [r7, #4]
 8105700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	6a1b      	ldr	r3, [r3, #32]
 8105706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	6a1b      	ldr	r3, [r3, #32]
 810570c:	f023 0210 	bic.w	r2, r3, #16
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	685b      	ldr	r3, [r3, #4]
 8105718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	699b      	ldr	r3, [r3, #24]
 810571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105720:	68fb      	ldr	r3, [r7, #12]
 8105722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105734:	683b      	ldr	r3, [r7, #0]
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	021b      	lsls	r3, r3, #8
 810573a:	68fa      	ldr	r2, [r7, #12]
 810573c:	4313      	orrs	r3, r2
 810573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105740:	697b      	ldr	r3, [r7, #20]
 8105742:	f023 0320 	bic.w	r3, r3, #32
 8105746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105748:	683b      	ldr	r3, [r7, #0]
 810574a:	689b      	ldr	r3, [r3, #8]
 810574c:	011b      	lsls	r3, r3, #4
 810574e:	697a      	ldr	r2, [r7, #20]
 8105750:	4313      	orrs	r3, r2
 8105752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	4a28      	ldr	r2, [pc, #160]	@ (81057f8 <TIM_OC2_SetConfig+0x100>)
 8105758:	4293      	cmp	r3, r2
 810575a:	d003      	beq.n	8105764 <TIM_OC2_SetConfig+0x6c>
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	4a27      	ldr	r2, [pc, #156]	@ (81057fc <TIM_OC2_SetConfig+0x104>)
 8105760:	4293      	cmp	r3, r2
 8105762:	d10d      	bne.n	8105780 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105764:	697b      	ldr	r3, [r7, #20]
 8105766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810576c:	683b      	ldr	r3, [r7, #0]
 810576e:	68db      	ldr	r3, [r3, #12]
 8105770:	011b      	lsls	r3, r3, #4
 8105772:	697a      	ldr	r2, [r7, #20]
 8105774:	4313      	orrs	r3, r2
 8105776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105778:	697b      	ldr	r3, [r7, #20]
 810577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810577e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	4a1d      	ldr	r2, [pc, #116]	@ (81057f8 <TIM_OC2_SetConfig+0x100>)
 8105784:	4293      	cmp	r3, r2
 8105786:	d00f      	beq.n	81057a8 <TIM_OC2_SetConfig+0xb0>
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	4a1c      	ldr	r2, [pc, #112]	@ (81057fc <TIM_OC2_SetConfig+0x104>)
 810578c:	4293      	cmp	r3, r2
 810578e:	d00b      	beq.n	81057a8 <TIM_OC2_SetConfig+0xb0>
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	4a1b      	ldr	r2, [pc, #108]	@ (8105800 <TIM_OC2_SetConfig+0x108>)
 8105794:	4293      	cmp	r3, r2
 8105796:	d007      	beq.n	81057a8 <TIM_OC2_SetConfig+0xb0>
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	4a1a      	ldr	r2, [pc, #104]	@ (8105804 <TIM_OC2_SetConfig+0x10c>)
 810579c:	4293      	cmp	r3, r2
 810579e:	d003      	beq.n	81057a8 <TIM_OC2_SetConfig+0xb0>
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	4a19      	ldr	r2, [pc, #100]	@ (8105808 <TIM_OC2_SetConfig+0x110>)
 81057a4:	4293      	cmp	r3, r2
 81057a6:	d113      	bne.n	81057d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81057a8:	693b      	ldr	r3, [r7, #16]
 81057aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 81057ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81057b0:	693b      	ldr	r3, [r7, #16]
 81057b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81057b8:	683b      	ldr	r3, [r7, #0]
 81057ba:	695b      	ldr	r3, [r3, #20]
 81057bc:	009b      	lsls	r3, r3, #2
 81057be:	693a      	ldr	r2, [r7, #16]
 81057c0:	4313      	orrs	r3, r2
 81057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81057c4:	683b      	ldr	r3, [r7, #0]
 81057c6:	699b      	ldr	r3, [r3, #24]
 81057c8:	009b      	lsls	r3, r3, #2
 81057ca:	693a      	ldr	r2, [r7, #16]
 81057cc:	4313      	orrs	r3, r2
 81057ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	693a      	ldr	r2, [r7, #16]
 81057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	68fa      	ldr	r2, [r7, #12]
 81057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81057dc:	683b      	ldr	r3, [r7, #0]
 81057de:	685a      	ldr	r2, [r3, #4]
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	697a      	ldr	r2, [r7, #20]
 81057e8:	621a      	str	r2, [r3, #32]
}
 81057ea:	bf00      	nop
 81057ec:	371c      	adds	r7, #28
 81057ee:	46bd      	mov	sp, r7
 81057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057f4:	4770      	bx	lr
 81057f6:	bf00      	nop
 81057f8:	40010000 	.word	0x40010000
 81057fc:	40010400 	.word	0x40010400
 8105800:	40014000 	.word	0x40014000
 8105804:	40014400 	.word	0x40014400
 8105808:	40014800 	.word	0x40014800

0810580c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810580c:	b480      	push	{r7}
 810580e:	b087      	sub	sp, #28
 8105810:	af00      	add	r7, sp, #0
 8105812:	6078      	str	r0, [r7, #4]
 8105814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	6a1b      	ldr	r3, [r3, #32]
 810581a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	6a1b      	ldr	r3, [r3, #32]
 8105820:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	685b      	ldr	r3, [r3, #4]
 810582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	69db      	ldr	r3, [r3, #28]
 8105832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105834:	68fb      	ldr	r3, [r7, #12]
 8105836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105840:	68fb      	ldr	r3, [r7, #12]
 8105842:	f023 0303 	bic.w	r3, r3, #3
 8105846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105848:	683b      	ldr	r3, [r7, #0]
 810584a:	681b      	ldr	r3, [r3, #0]
 810584c:	68fa      	ldr	r2, [r7, #12]
 810584e:	4313      	orrs	r3, r2
 8105850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105852:	697b      	ldr	r3, [r7, #20]
 8105854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8105858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810585a:	683b      	ldr	r3, [r7, #0]
 810585c:	689b      	ldr	r3, [r3, #8]
 810585e:	021b      	lsls	r3, r3, #8
 8105860:	697a      	ldr	r2, [r7, #20]
 8105862:	4313      	orrs	r3, r2
 8105864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	4a27      	ldr	r2, [pc, #156]	@ (8105908 <TIM_OC3_SetConfig+0xfc>)
 810586a:	4293      	cmp	r3, r2
 810586c:	d003      	beq.n	8105876 <TIM_OC3_SetConfig+0x6a>
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	4a26      	ldr	r2, [pc, #152]	@ (810590c <TIM_OC3_SetConfig+0x100>)
 8105872:	4293      	cmp	r3, r2
 8105874:	d10d      	bne.n	8105892 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8105876:	697b      	ldr	r3, [r7, #20]
 8105878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810587c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810587e:	683b      	ldr	r3, [r7, #0]
 8105880:	68db      	ldr	r3, [r3, #12]
 8105882:	021b      	lsls	r3, r3, #8
 8105884:	697a      	ldr	r2, [r7, #20]
 8105886:	4313      	orrs	r3, r2
 8105888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810588a:	697b      	ldr	r3, [r7, #20]
 810588c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8105890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	4a1c      	ldr	r2, [pc, #112]	@ (8105908 <TIM_OC3_SetConfig+0xfc>)
 8105896:	4293      	cmp	r3, r2
 8105898:	d00f      	beq.n	81058ba <TIM_OC3_SetConfig+0xae>
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	4a1b      	ldr	r2, [pc, #108]	@ (810590c <TIM_OC3_SetConfig+0x100>)
 810589e:	4293      	cmp	r3, r2
 81058a0:	d00b      	beq.n	81058ba <TIM_OC3_SetConfig+0xae>
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	4a1a      	ldr	r2, [pc, #104]	@ (8105910 <TIM_OC3_SetConfig+0x104>)
 81058a6:	4293      	cmp	r3, r2
 81058a8:	d007      	beq.n	81058ba <TIM_OC3_SetConfig+0xae>
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	4a19      	ldr	r2, [pc, #100]	@ (8105914 <TIM_OC3_SetConfig+0x108>)
 81058ae:	4293      	cmp	r3, r2
 81058b0:	d003      	beq.n	81058ba <TIM_OC3_SetConfig+0xae>
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	4a18      	ldr	r2, [pc, #96]	@ (8105918 <TIM_OC3_SetConfig+0x10c>)
 81058b6:	4293      	cmp	r3, r2
 81058b8:	d113      	bne.n	81058e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81058ba:	693b      	ldr	r3, [r7, #16]
 81058bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81058c2:	693b      	ldr	r3, [r7, #16]
 81058c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81058ca:	683b      	ldr	r3, [r7, #0]
 81058cc:	695b      	ldr	r3, [r3, #20]
 81058ce:	011b      	lsls	r3, r3, #4
 81058d0:	693a      	ldr	r2, [r7, #16]
 81058d2:	4313      	orrs	r3, r2
 81058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81058d6:	683b      	ldr	r3, [r7, #0]
 81058d8:	699b      	ldr	r3, [r3, #24]
 81058da:	011b      	lsls	r3, r3, #4
 81058dc:	693a      	ldr	r2, [r7, #16]
 81058de:	4313      	orrs	r3, r2
 81058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	693a      	ldr	r2, [r7, #16]
 81058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	68fa      	ldr	r2, [r7, #12]
 81058ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81058ee:	683b      	ldr	r3, [r7, #0]
 81058f0:	685a      	ldr	r2, [r3, #4]
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	697a      	ldr	r2, [r7, #20]
 81058fa:	621a      	str	r2, [r3, #32]
}
 81058fc:	bf00      	nop
 81058fe:	371c      	adds	r7, #28
 8105900:	46bd      	mov	sp, r7
 8105902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105906:	4770      	bx	lr
 8105908:	40010000 	.word	0x40010000
 810590c:	40010400 	.word	0x40010400
 8105910:	40014000 	.word	0x40014000
 8105914:	40014400 	.word	0x40014400
 8105918:	40014800 	.word	0x40014800

0810591c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810591c:	b480      	push	{r7}
 810591e:	b087      	sub	sp, #28
 8105920:	af00      	add	r7, sp, #0
 8105922:	6078      	str	r0, [r7, #4]
 8105924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	6a1b      	ldr	r3, [r3, #32]
 810592a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	6a1b      	ldr	r3, [r3, #32]
 8105930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	685b      	ldr	r3, [r3, #4]
 810593c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	69db      	ldr	r3, [r3, #28]
 8105942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8105944:	68fb      	ldr	r3, [r7, #12]
 8105946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810594a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105950:	68fb      	ldr	r3, [r7, #12]
 8105952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105958:	683b      	ldr	r3, [r7, #0]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	021b      	lsls	r3, r3, #8
 810595e:	68fa      	ldr	r2, [r7, #12]
 8105960:	4313      	orrs	r3, r2
 8105962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8105964:	693b      	ldr	r3, [r7, #16]
 8105966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810596a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810596c:	683b      	ldr	r3, [r7, #0]
 810596e:	689b      	ldr	r3, [r3, #8]
 8105970:	031b      	lsls	r3, r3, #12
 8105972:	693a      	ldr	r2, [r7, #16]
 8105974:	4313      	orrs	r3, r2
 8105976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	4a18      	ldr	r2, [pc, #96]	@ (81059dc <TIM_OC4_SetConfig+0xc0>)
 810597c:	4293      	cmp	r3, r2
 810597e:	d00f      	beq.n	81059a0 <TIM_OC4_SetConfig+0x84>
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	4a17      	ldr	r2, [pc, #92]	@ (81059e0 <TIM_OC4_SetConfig+0xc4>)
 8105984:	4293      	cmp	r3, r2
 8105986:	d00b      	beq.n	81059a0 <TIM_OC4_SetConfig+0x84>
 8105988:	687b      	ldr	r3, [r7, #4]
 810598a:	4a16      	ldr	r2, [pc, #88]	@ (81059e4 <TIM_OC4_SetConfig+0xc8>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d007      	beq.n	81059a0 <TIM_OC4_SetConfig+0x84>
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	4a15      	ldr	r2, [pc, #84]	@ (81059e8 <TIM_OC4_SetConfig+0xcc>)
 8105994:	4293      	cmp	r3, r2
 8105996:	d003      	beq.n	81059a0 <TIM_OC4_SetConfig+0x84>
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	4a14      	ldr	r2, [pc, #80]	@ (81059ec <TIM_OC4_SetConfig+0xd0>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d109      	bne.n	81059b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81059a0:	697b      	ldr	r3, [r7, #20]
 81059a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81059a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81059a8:	683b      	ldr	r3, [r7, #0]
 81059aa:	695b      	ldr	r3, [r3, #20]
 81059ac:	019b      	lsls	r3, r3, #6
 81059ae:	697a      	ldr	r2, [r7, #20]
 81059b0:	4313      	orrs	r3, r2
 81059b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	697a      	ldr	r2, [r7, #20]
 81059b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	68fa      	ldr	r2, [r7, #12]
 81059be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81059c0:	683b      	ldr	r3, [r7, #0]
 81059c2:	685a      	ldr	r2, [r3, #4]
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	693a      	ldr	r2, [r7, #16]
 81059cc:	621a      	str	r2, [r3, #32]
}
 81059ce:	bf00      	nop
 81059d0:	371c      	adds	r7, #28
 81059d2:	46bd      	mov	sp, r7
 81059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d8:	4770      	bx	lr
 81059da:	bf00      	nop
 81059dc:	40010000 	.word	0x40010000
 81059e0:	40010400 	.word	0x40010400
 81059e4:	40014000 	.word	0x40014000
 81059e8:	40014400 	.word	0x40014400
 81059ec:	40014800 	.word	0x40014800

081059f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81059f0:	b480      	push	{r7}
 81059f2:	b087      	sub	sp, #28
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	6078      	str	r0, [r7, #4]
 81059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	6a1b      	ldr	r3, [r3, #32]
 81059fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	6a1b      	ldr	r3, [r3, #32]
 8105a04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	685b      	ldr	r3, [r3, #4]
 8105a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8105a18:	68fb      	ldr	r3, [r7, #12]
 8105a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105a24:	683b      	ldr	r3, [r7, #0]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	68fa      	ldr	r2, [r7, #12]
 8105a2a:	4313      	orrs	r3, r2
 8105a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8105a2e:	693b      	ldr	r3, [r7, #16]
 8105a30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8105a36:	683b      	ldr	r3, [r7, #0]
 8105a38:	689b      	ldr	r3, [r3, #8]
 8105a3a:	041b      	lsls	r3, r3, #16
 8105a3c:	693a      	ldr	r2, [r7, #16]
 8105a3e:	4313      	orrs	r3, r2
 8105a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	4a17      	ldr	r2, [pc, #92]	@ (8105aa4 <TIM_OC5_SetConfig+0xb4>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	d00f      	beq.n	8105a6a <TIM_OC5_SetConfig+0x7a>
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	4a16      	ldr	r2, [pc, #88]	@ (8105aa8 <TIM_OC5_SetConfig+0xb8>)
 8105a4e:	4293      	cmp	r3, r2
 8105a50:	d00b      	beq.n	8105a6a <TIM_OC5_SetConfig+0x7a>
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	4a15      	ldr	r2, [pc, #84]	@ (8105aac <TIM_OC5_SetConfig+0xbc>)
 8105a56:	4293      	cmp	r3, r2
 8105a58:	d007      	beq.n	8105a6a <TIM_OC5_SetConfig+0x7a>
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	4a14      	ldr	r2, [pc, #80]	@ (8105ab0 <TIM_OC5_SetConfig+0xc0>)
 8105a5e:	4293      	cmp	r3, r2
 8105a60:	d003      	beq.n	8105a6a <TIM_OC5_SetConfig+0x7a>
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	4a13      	ldr	r2, [pc, #76]	@ (8105ab4 <TIM_OC5_SetConfig+0xc4>)
 8105a66:	4293      	cmp	r3, r2
 8105a68:	d109      	bne.n	8105a7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8105a6a:	697b      	ldr	r3, [r7, #20]
 8105a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8105a72:	683b      	ldr	r3, [r7, #0]
 8105a74:	695b      	ldr	r3, [r3, #20]
 8105a76:	021b      	lsls	r3, r3, #8
 8105a78:	697a      	ldr	r2, [r7, #20]
 8105a7a:	4313      	orrs	r3, r2
 8105a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	697a      	ldr	r2, [r7, #20]
 8105a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	68fa      	ldr	r2, [r7, #12]
 8105a88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105a8a:	683b      	ldr	r3, [r7, #0]
 8105a8c:	685a      	ldr	r2, [r3, #4]
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	693a      	ldr	r2, [r7, #16]
 8105a96:	621a      	str	r2, [r3, #32]
}
 8105a98:	bf00      	nop
 8105a9a:	371c      	adds	r7, #28
 8105a9c:	46bd      	mov	sp, r7
 8105a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aa2:	4770      	bx	lr
 8105aa4:	40010000 	.word	0x40010000
 8105aa8:	40010400 	.word	0x40010400
 8105aac:	40014000 	.word	0x40014000
 8105ab0:	40014400 	.word	0x40014400
 8105ab4:	40014800 	.word	0x40014800

08105ab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8105ab8:	b480      	push	{r7}
 8105aba:	b087      	sub	sp, #28
 8105abc:	af00      	add	r7, sp, #0
 8105abe:	6078      	str	r0, [r7, #4]
 8105ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6a1b      	ldr	r3, [r3, #32]
 8105ac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	6a1b      	ldr	r3, [r3, #32]
 8105acc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	685b      	ldr	r3, [r3, #4]
 8105ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105ae0:	68fb      	ldr	r3, [r7, #12]
 8105ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8105aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105aec:	683b      	ldr	r3, [r7, #0]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	021b      	lsls	r3, r3, #8
 8105af2:	68fa      	ldr	r2, [r7, #12]
 8105af4:	4313      	orrs	r3, r2
 8105af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8105af8:	693b      	ldr	r3, [r7, #16]
 8105afa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8105afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105b00:	683b      	ldr	r3, [r7, #0]
 8105b02:	689b      	ldr	r3, [r3, #8]
 8105b04:	051b      	lsls	r3, r3, #20
 8105b06:	693a      	ldr	r2, [r7, #16]
 8105b08:	4313      	orrs	r3, r2
 8105b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	4a18      	ldr	r2, [pc, #96]	@ (8105b70 <TIM_OC6_SetConfig+0xb8>)
 8105b10:	4293      	cmp	r3, r2
 8105b12:	d00f      	beq.n	8105b34 <TIM_OC6_SetConfig+0x7c>
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	4a17      	ldr	r2, [pc, #92]	@ (8105b74 <TIM_OC6_SetConfig+0xbc>)
 8105b18:	4293      	cmp	r3, r2
 8105b1a:	d00b      	beq.n	8105b34 <TIM_OC6_SetConfig+0x7c>
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	4a16      	ldr	r2, [pc, #88]	@ (8105b78 <TIM_OC6_SetConfig+0xc0>)
 8105b20:	4293      	cmp	r3, r2
 8105b22:	d007      	beq.n	8105b34 <TIM_OC6_SetConfig+0x7c>
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	4a15      	ldr	r2, [pc, #84]	@ (8105b7c <TIM_OC6_SetConfig+0xc4>)
 8105b28:	4293      	cmp	r3, r2
 8105b2a:	d003      	beq.n	8105b34 <TIM_OC6_SetConfig+0x7c>
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	4a14      	ldr	r2, [pc, #80]	@ (8105b80 <TIM_OC6_SetConfig+0xc8>)
 8105b30:	4293      	cmp	r3, r2
 8105b32:	d109      	bne.n	8105b48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8105b34:	697b      	ldr	r3, [r7, #20]
 8105b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105b3c:	683b      	ldr	r3, [r7, #0]
 8105b3e:	695b      	ldr	r3, [r3, #20]
 8105b40:	029b      	lsls	r3, r3, #10
 8105b42:	697a      	ldr	r2, [r7, #20]
 8105b44:	4313      	orrs	r3, r2
 8105b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	697a      	ldr	r2, [r7, #20]
 8105b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	68fa      	ldr	r2, [r7, #12]
 8105b52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8105b54:	683b      	ldr	r3, [r7, #0]
 8105b56:	685a      	ldr	r2, [r3, #4]
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	693a      	ldr	r2, [r7, #16]
 8105b60:	621a      	str	r2, [r3, #32]
}
 8105b62:	bf00      	nop
 8105b64:	371c      	adds	r7, #28
 8105b66:	46bd      	mov	sp, r7
 8105b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b6c:	4770      	bx	lr
 8105b6e:	bf00      	nop
 8105b70:	40010000 	.word	0x40010000
 8105b74:	40010400 	.word	0x40010400
 8105b78:	40014000 	.word	0x40014000
 8105b7c:	40014400 	.word	0x40014400
 8105b80:	40014800 	.word	0x40014800

08105b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105b84:	b480      	push	{r7}
 8105b86:	b087      	sub	sp, #28
 8105b88:	af00      	add	r7, sp, #0
 8105b8a:	60f8      	str	r0, [r7, #12]
 8105b8c:	60b9      	str	r1, [r7, #8]
 8105b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	6a1b      	ldr	r3, [r3, #32]
 8105b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105b96:	68fb      	ldr	r3, [r7, #12]
 8105b98:	6a1b      	ldr	r3, [r3, #32]
 8105b9a:	f023 0201 	bic.w	r2, r3, #1
 8105b9e:	68fb      	ldr	r3, [r7, #12]
 8105ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105ba2:	68fb      	ldr	r3, [r7, #12]
 8105ba4:	699b      	ldr	r3, [r3, #24]
 8105ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105ba8:	693b      	ldr	r3, [r7, #16]
 8105baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8105bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	011b      	lsls	r3, r3, #4
 8105bb4:	693a      	ldr	r2, [r7, #16]
 8105bb6:	4313      	orrs	r3, r2
 8105bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105bba:	697b      	ldr	r3, [r7, #20]
 8105bbc:	f023 030a 	bic.w	r3, r3, #10
 8105bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8105bc2:	697a      	ldr	r2, [r7, #20]
 8105bc4:	68bb      	ldr	r3, [r7, #8]
 8105bc6:	4313      	orrs	r3, r2
 8105bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8105bca:	68fb      	ldr	r3, [r7, #12]
 8105bcc:	693a      	ldr	r2, [r7, #16]
 8105bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	697a      	ldr	r2, [r7, #20]
 8105bd4:	621a      	str	r2, [r3, #32]
}
 8105bd6:	bf00      	nop
 8105bd8:	371c      	adds	r7, #28
 8105bda:	46bd      	mov	sp, r7
 8105bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105be0:	4770      	bx	lr

08105be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105be2:	b480      	push	{r7}
 8105be4:	b087      	sub	sp, #28
 8105be6:	af00      	add	r7, sp, #0
 8105be8:	60f8      	str	r0, [r7, #12]
 8105bea:	60b9      	str	r1, [r7, #8]
 8105bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8105bee:	68fb      	ldr	r3, [r7, #12]
 8105bf0:	6a1b      	ldr	r3, [r3, #32]
 8105bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105bf4:	68fb      	ldr	r3, [r7, #12]
 8105bf6:	6a1b      	ldr	r3, [r3, #32]
 8105bf8:	f023 0210 	bic.w	r2, r3, #16
 8105bfc:	68fb      	ldr	r3, [r7, #12]
 8105bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	699b      	ldr	r3, [r3, #24]
 8105c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105c06:	693b      	ldr	r3, [r7, #16]
 8105c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8105c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	031b      	lsls	r3, r3, #12
 8105c12:	693a      	ldr	r2, [r7, #16]
 8105c14:	4313      	orrs	r3, r2
 8105c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105c18:	697b      	ldr	r3, [r7, #20]
 8105c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8105c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8105c20:	68bb      	ldr	r3, [r7, #8]
 8105c22:	011b      	lsls	r3, r3, #4
 8105c24:	697a      	ldr	r2, [r7, #20]
 8105c26:	4313      	orrs	r3, r2
 8105c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	693a      	ldr	r2, [r7, #16]
 8105c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105c30:	68fb      	ldr	r3, [r7, #12]
 8105c32:	697a      	ldr	r2, [r7, #20]
 8105c34:	621a      	str	r2, [r3, #32]
}
 8105c36:	bf00      	nop
 8105c38:	371c      	adds	r7, #28
 8105c3a:	46bd      	mov	sp, r7
 8105c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c40:	4770      	bx	lr

08105c42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8105c42:	b480      	push	{r7}
 8105c44:	b085      	sub	sp, #20
 8105c46:	af00      	add	r7, sp, #0
 8105c48:	6078      	str	r0, [r7, #4]
 8105c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	689b      	ldr	r3, [r3, #8]
 8105c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8105c52:	68fb      	ldr	r3, [r7, #12]
 8105c54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8105c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105c5e:	683a      	ldr	r2, [r7, #0]
 8105c60:	68fb      	ldr	r3, [r7, #12]
 8105c62:	4313      	orrs	r3, r2
 8105c64:	f043 0307 	orr.w	r3, r3, #7
 8105c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	68fa      	ldr	r2, [r7, #12]
 8105c6e:	609a      	str	r2, [r3, #8]
}
 8105c70:	bf00      	nop
 8105c72:	3714      	adds	r7, #20
 8105c74:	46bd      	mov	sp, r7
 8105c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c7a:	4770      	bx	lr

08105c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105c7c:	b480      	push	{r7}
 8105c7e:	b087      	sub	sp, #28
 8105c80:	af00      	add	r7, sp, #0
 8105c82:	60f8      	str	r0, [r7, #12]
 8105c84:	60b9      	str	r1, [r7, #8]
 8105c86:	607a      	str	r2, [r7, #4]
 8105c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	689b      	ldr	r3, [r3, #8]
 8105c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105c90:	697b      	ldr	r3, [r7, #20]
 8105c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105c98:	683b      	ldr	r3, [r7, #0]
 8105c9a:	021a      	lsls	r2, r3, #8
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	431a      	orrs	r2, r3
 8105ca0:	68bb      	ldr	r3, [r7, #8]
 8105ca2:	4313      	orrs	r3, r2
 8105ca4:	697a      	ldr	r2, [r7, #20]
 8105ca6:	4313      	orrs	r3, r2
 8105ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105caa:	68fb      	ldr	r3, [r7, #12]
 8105cac:	697a      	ldr	r2, [r7, #20]
 8105cae:	609a      	str	r2, [r3, #8]
}
 8105cb0:	bf00      	nop
 8105cb2:	371c      	adds	r7, #28
 8105cb4:	46bd      	mov	sp, r7
 8105cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cba:	4770      	bx	lr

08105cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8105cbc:	b480      	push	{r7}
 8105cbe:	b087      	sub	sp, #28
 8105cc0:	af00      	add	r7, sp, #0
 8105cc2:	60f8      	str	r0, [r7, #12]
 8105cc4:	60b9      	str	r1, [r7, #8]
 8105cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8105cc8:	68bb      	ldr	r3, [r7, #8]
 8105cca:	f003 031f 	and.w	r3, r3, #31
 8105cce:	2201      	movs	r2, #1
 8105cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8105cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	6a1a      	ldr	r2, [r3, #32]
 8105cda:	697b      	ldr	r3, [r7, #20]
 8105cdc:	43db      	mvns	r3, r3
 8105cde:	401a      	ands	r2, r3
 8105ce0:	68fb      	ldr	r3, [r7, #12]
 8105ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	6a1a      	ldr	r2, [r3, #32]
 8105ce8:	68bb      	ldr	r3, [r7, #8]
 8105cea:	f003 031f 	and.w	r3, r3, #31
 8105cee:	6879      	ldr	r1, [r7, #4]
 8105cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8105cf4:	431a      	orrs	r2, r3
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	621a      	str	r2, [r3, #32]
}
 8105cfa:	bf00      	nop
 8105cfc:	371c      	adds	r7, #28
 8105cfe:	46bd      	mov	sp, r7
 8105d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d04:	4770      	bx	lr
	...

08105d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105d08:	b480      	push	{r7}
 8105d0a:	b085      	sub	sp, #20
 8105d0c:	af00      	add	r7, sp, #0
 8105d0e:	6078      	str	r0, [r7, #4]
 8105d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105d18:	2b01      	cmp	r3, #1
 8105d1a:	d101      	bne.n	8105d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105d1c:	2302      	movs	r3, #2
 8105d1e:	e06d      	b.n	8105dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	2201      	movs	r2, #1
 8105d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	2202      	movs	r2, #2
 8105d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	685b      	ldr	r3, [r3, #4]
 8105d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	681b      	ldr	r3, [r3, #0]
 8105d3c:	689b      	ldr	r3, [r3, #8]
 8105d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	4a30      	ldr	r2, [pc, #192]	@ (8105e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105d46:	4293      	cmp	r3, r2
 8105d48:	d004      	beq.n	8105d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8105e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105d50:	4293      	cmp	r3, r2
 8105d52:	d108      	bne.n	8105d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8105d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105d5c:	683b      	ldr	r3, [r7, #0]
 8105d5e:	685b      	ldr	r3, [r3, #4]
 8105d60:	68fa      	ldr	r2, [r7, #12]
 8105d62:	4313      	orrs	r3, r2
 8105d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105d66:	68fb      	ldr	r3, [r7, #12]
 8105d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105d6e:	683b      	ldr	r3, [r7, #0]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	68fa      	ldr	r2, [r7, #12]
 8105d74:	4313      	orrs	r3, r2
 8105d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	681b      	ldr	r3, [r3, #0]
 8105d7c:	68fa      	ldr	r2, [r7, #12]
 8105d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	4a20      	ldr	r2, [pc, #128]	@ (8105e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105d86:	4293      	cmp	r3, r2
 8105d88:	d022      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	681b      	ldr	r3, [r3, #0]
 8105d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105d92:	d01d      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	4a1d      	ldr	r2, [pc, #116]	@ (8105e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105d9a:	4293      	cmp	r3, r2
 8105d9c:	d018      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	4a1c      	ldr	r2, [pc, #112]	@ (8105e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105da4:	4293      	cmp	r3, r2
 8105da6:	d013      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	4a1a      	ldr	r2, [pc, #104]	@ (8105e18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8105dae:	4293      	cmp	r3, r2
 8105db0:	d00e      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	681b      	ldr	r3, [r3, #0]
 8105db6:	4a15      	ldr	r2, [pc, #84]	@ (8105e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105db8:	4293      	cmp	r3, r2
 8105dba:	d009      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	4a16      	ldr	r2, [pc, #88]	@ (8105e1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8105dc2:	4293      	cmp	r3, r2
 8105dc4:	d004      	beq.n	8105dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105dc6:	687b      	ldr	r3, [r7, #4]
 8105dc8:	681b      	ldr	r3, [r3, #0]
 8105dca:	4a15      	ldr	r2, [pc, #84]	@ (8105e20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8105dcc:	4293      	cmp	r3, r2
 8105dce:	d10c      	bne.n	8105dea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105dd0:	68bb      	ldr	r3, [r7, #8]
 8105dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105dd8:	683b      	ldr	r3, [r7, #0]
 8105dda:	689b      	ldr	r3, [r3, #8]
 8105ddc:	68ba      	ldr	r2, [r7, #8]
 8105dde:	4313      	orrs	r3, r2
 8105de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	681b      	ldr	r3, [r3, #0]
 8105de6:	68ba      	ldr	r2, [r7, #8]
 8105de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	2201      	movs	r2, #1
 8105dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	2200      	movs	r2, #0
 8105df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8105dfa:	2300      	movs	r3, #0
}
 8105dfc:	4618      	mov	r0, r3
 8105dfe:	3714      	adds	r7, #20
 8105e00:	46bd      	mov	sp, r7
 8105e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e06:	4770      	bx	lr
 8105e08:	40010000 	.word	0x40010000
 8105e0c:	40010400 	.word	0x40010400
 8105e10:	40000400 	.word	0x40000400
 8105e14:	40000800 	.word	0x40000800
 8105e18:	40000c00 	.word	0x40000c00
 8105e1c:	40001800 	.word	0x40001800
 8105e20:	40014000 	.word	0x40014000

08105e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8105e24:	b480      	push	{r7}
 8105e26:	b085      	sub	sp, #20
 8105e28:	af00      	add	r7, sp, #0
 8105e2a:	6078      	str	r0, [r7, #4]
 8105e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8105e2e:	2300      	movs	r3, #0
 8105e30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105e38:	2b01      	cmp	r3, #1
 8105e3a:	d101      	bne.n	8105e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8105e3c:	2302      	movs	r3, #2
 8105e3e:	e065      	b.n	8105f0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	2201      	movs	r2, #1
 8105e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8105e48:	68fb      	ldr	r3, [r7, #12]
 8105e4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8105e4e:	683b      	ldr	r3, [r7, #0]
 8105e50:	68db      	ldr	r3, [r3, #12]
 8105e52:	4313      	orrs	r3, r2
 8105e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105e5c:	683b      	ldr	r3, [r7, #0]
 8105e5e:	689b      	ldr	r3, [r3, #8]
 8105e60:	4313      	orrs	r3, r2
 8105e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8105e64:	68fb      	ldr	r3, [r7, #12]
 8105e66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8105e6a:	683b      	ldr	r3, [r7, #0]
 8105e6c:	685b      	ldr	r3, [r3, #4]
 8105e6e:	4313      	orrs	r3, r2
 8105e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8105e72:	68fb      	ldr	r3, [r7, #12]
 8105e74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8105e78:	683b      	ldr	r3, [r7, #0]
 8105e7a:	681b      	ldr	r3, [r3, #0]
 8105e7c:	4313      	orrs	r3, r2
 8105e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8105e86:	683b      	ldr	r3, [r7, #0]
 8105e88:	691b      	ldr	r3, [r3, #16]
 8105e8a:	4313      	orrs	r3, r2
 8105e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8105e94:	683b      	ldr	r3, [r7, #0]
 8105e96:	695b      	ldr	r3, [r3, #20]
 8105e98:	4313      	orrs	r3, r2
 8105e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8105ea2:	683b      	ldr	r3, [r7, #0]
 8105ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ea6:	4313      	orrs	r3, r2
 8105ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8105eaa:	68fb      	ldr	r3, [r7, #12]
 8105eac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8105eb0:	683b      	ldr	r3, [r7, #0]
 8105eb2:	699b      	ldr	r3, [r3, #24]
 8105eb4:	041b      	lsls	r3, r3, #16
 8105eb6:	4313      	orrs	r3, r2
 8105eb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	4a16      	ldr	r2, [pc, #88]	@ (8105f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8105ec0:	4293      	cmp	r3, r2
 8105ec2:	d004      	beq.n	8105ece <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	4a14      	ldr	r2, [pc, #80]	@ (8105f1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8105eca:	4293      	cmp	r3, r2
 8105ecc:	d115      	bne.n	8105efa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8105ed4:	683b      	ldr	r3, [r7, #0]
 8105ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105ed8:	051b      	lsls	r3, r3, #20
 8105eda:	4313      	orrs	r3, r2
 8105edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8105ede:	68fb      	ldr	r3, [r7, #12]
 8105ee0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8105ee4:	683b      	ldr	r3, [r7, #0]
 8105ee6:	69db      	ldr	r3, [r3, #28]
 8105ee8:	4313      	orrs	r3, r2
 8105eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8105eec:	68fb      	ldr	r3, [r7, #12]
 8105eee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8105ef2:	683b      	ldr	r3, [r7, #0]
 8105ef4:	6a1b      	ldr	r3, [r3, #32]
 8105ef6:	4313      	orrs	r3, r2
 8105ef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	68fa      	ldr	r2, [r7, #12]
 8105f00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	2200      	movs	r2, #0
 8105f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8105f0a:	2300      	movs	r3, #0
}
 8105f0c:	4618      	mov	r0, r3
 8105f0e:	3714      	adds	r7, #20
 8105f10:	46bd      	mov	sp, r7
 8105f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f16:	4770      	bx	lr
 8105f18:	40010000 	.word	0x40010000
 8105f1c:	40010400 	.word	0x40010400

08105f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8105f20:	b480      	push	{r7}
 8105f22:	b083      	sub	sp, #12
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8105f28:	bf00      	nop
 8105f2a:	370c      	adds	r7, #12
 8105f2c:	46bd      	mov	sp, r7
 8105f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f32:	4770      	bx	lr

08105f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105f34:	b480      	push	{r7}
 8105f36:	b083      	sub	sp, #12
 8105f38:	af00      	add	r7, sp, #0
 8105f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8105f3c:	bf00      	nop
 8105f3e:	370c      	adds	r7, #12
 8105f40:	46bd      	mov	sp, r7
 8105f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f46:	4770      	bx	lr

08105f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8105f48:	b480      	push	{r7}
 8105f4a:	b083      	sub	sp, #12
 8105f4c:	af00      	add	r7, sp, #0
 8105f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8105f50:	bf00      	nop
 8105f52:	370c      	adds	r7, #12
 8105f54:	46bd      	mov	sp, r7
 8105f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f5a:	4770      	bx	lr

08105f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105f5c:	b580      	push	{r7, lr}
 8105f5e:	b082      	sub	sp, #8
 8105f60:	af00      	add	r7, sp, #0
 8105f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	2b00      	cmp	r3, #0
 8105f68:	d101      	bne.n	8105f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105f6a:	2301      	movs	r3, #1
 8105f6c:	e042      	b.n	8105ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d106      	bne.n	8105f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	2200      	movs	r2, #0
 8105f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105f80:	6878      	ldr	r0, [r7, #4]
 8105f82:	f7fb fda5 	bl	8101ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	2224      	movs	r2, #36	@ 0x24
 8105f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	681a      	ldr	r2, [r3, #0]
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	f022 0201 	bic.w	r2, r2, #1
 8105f9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fa2:	2b00      	cmp	r3, #0
 8105fa4:	d002      	beq.n	8105fac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8105fa6:	6878      	ldr	r0, [r7, #4]
 8105fa8:	f000 fe1e 	bl	8106be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105fac:	6878      	ldr	r0, [r7, #4]
 8105fae:	f000 f8b3 	bl	8106118 <UART_SetConfig>
 8105fb2:	4603      	mov	r3, r0
 8105fb4:	2b01      	cmp	r3, #1
 8105fb6:	d101      	bne.n	8105fbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8105fb8:	2301      	movs	r3, #1
 8105fba:	e01b      	b.n	8105ff4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	685a      	ldr	r2, [r3, #4]
 8105fc2:	687b      	ldr	r3, [r7, #4]
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8105fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	689a      	ldr	r2, [r3, #8]
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8105fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	681a      	ldr	r2, [r3, #0]
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	f042 0201 	orr.w	r2, r2, #1
 8105fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105fec:	6878      	ldr	r0, [r7, #4]
 8105fee:	f000 fe9d 	bl	8106d2c <UART_CheckIdleState>
 8105ff2:	4603      	mov	r3, r0
}
 8105ff4:	4618      	mov	r0, r3
 8105ff6:	3708      	adds	r7, #8
 8105ff8:	46bd      	mov	sp, r7
 8105ffa:	bd80      	pop	{r7, pc}

08105ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105ffc:	b580      	push	{r7, lr}
 8105ffe:	b08a      	sub	sp, #40	@ 0x28
 8106000:	af02      	add	r7, sp, #8
 8106002:	60f8      	str	r0, [r7, #12]
 8106004:	60b9      	str	r1, [r7, #8]
 8106006:	603b      	str	r3, [r7, #0]
 8106008:	4613      	mov	r3, r2
 810600a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810600c:	68fb      	ldr	r3, [r7, #12]
 810600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106012:	2b20      	cmp	r3, #32
 8106014:	d17b      	bne.n	810610e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8106016:	68bb      	ldr	r3, [r7, #8]
 8106018:	2b00      	cmp	r3, #0
 810601a:	d002      	beq.n	8106022 <HAL_UART_Transmit+0x26>
 810601c:	88fb      	ldrh	r3, [r7, #6]
 810601e:	2b00      	cmp	r3, #0
 8106020:	d101      	bne.n	8106026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106022:	2301      	movs	r3, #1
 8106024:	e074      	b.n	8106110 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106026:	68fb      	ldr	r3, [r7, #12]
 8106028:	2200      	movs	r2, #0
 810602a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810602e:	68fb      	ldr	r3, [r7, #12]
 8106030:	2221      	movs	r2, #33	@ 0x21
 8106032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106036:	f7fb ff91 	bl	8101f5c <HAL_GetTick>
 810603a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	88fa      	ldrh	r2, [r7, #6]
 8106040:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106044:	68fb      	ldr	r3, [r7, #12]
 8106046:	88fa      	ldrh	r2, [r7, #6]
 8106048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810604c:	68fb      	ldr	r3, [r7, #12]
 810604e:	689b      	ldr	r3, [r3, #8]
 8106050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106054:	d108      	bne.n	8106068 <HAL_UART_Transmit+0x6c>
 8106056:	68fb      	ldr	r3, [r7, #12]
 8106058:	691b      	ldr	r3, [r3, #16]
 810605a:	2b00      	cmp	r3, #0
 810605c:	d104      	bne.n	8106068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810605e:	2300      	movs	r3, #0
 8106060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106062:	68bb      	ldr	r3, [r7, #8]
 8106064:	61bb      	str	r3, [r7, #24]
 8106066:	e003      	b.n	8106070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8106068:	68bb      	ldr	r3, [r7, #8]
 810606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810606c:	2300      	movs	r3, #0
 810606e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106070:	e030      	b.n	81060d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106072:	683b      	ldr	r3, [r7, #0]
 8106074:	9300      	str	r3, [sp, #0]
 8106076:	697b      	ldr	r3, [r7, #20]
 8106078:	2200      	movs	r2, #0
 810607a:	2180      	movs	r1, #128	@ 0x80
 810607c:	68f8      	ldr	r0, [r7, #12]
 810607e:	f000 feff 	bl	8106e80 <UART_WaitOnFlagUntilTimeout>
 8106082:	4603      	mov	r3, r0
 8106084:	2b00      	cmp	r3, #0
 8106086:	d005      	beq.n	8106094 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	2220      	movs	r2, #32
 810608c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106090:	2303      	movs	r3, #3
 8106092:	e03d      	b.n	8106110 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106094:	69fb      	ldr	r3, [r7, #28]
 8106096:	2b00      	cmp	r3, #0
 8106098:	d10b      	bne.n	81060b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810609a:	69bb      	ldr	r3, [r7, #24]
 810609c:	881b      	ldrh	r3, [r3, #0]
 810609e:	461a      	mov	r2, r3
 81060a0:	68fb      	ldr	r3, [r7, #12]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81060a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81060aa:	69bb      	ldr	r3, [r7, #24]
 81060ac:	3302      	adds	r3, #2
 81060ae:	61bb      	str	r3, [r7, #24]
 81060b0:	e007      	b.n	81060c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81060b2:	69fb      	ldr	r3, [r7, #28]
 81060b4:	781a      	ldrb	r2, [r3, #0]
 81060b6:	68fb      	ldr	r3, [r7, #12]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81060bc:	69fb      	ldr	r3, [r7, #28]
 81060be:	3301      	adds	r3, #1
 81060c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81060c2:	68fb      	ldr	r3, [r7, #12]
 81060c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81060c8:	b29b      	uxth	r3, r3
 81060ca:	3b01      	subs	r3, #1
 81060cc:	b29a      	uxth	r2, r3
 81060ce:	68fb      	ldr	r3, [r7, #12]
 81060d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81060d4:	68fb      	ldr	r3, [r7, #12]
 81060d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81060da:	b29b      	uxth	r3, r3
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d1c8      	bne.n	8106072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81060e0:	683b      	ldr	r3, [r7, #0]
 81060e2:	9300      	str	r3, [sp, #0]
 81060e4:	697b      	ldr	r3, [r7, #20]
 81060e6:	2200      	movs	r2, #0
 81060e8:	2140      	movs	r1, #64	@ 0x40
 81060ea:	68f8      	ldr	r0, [r7, #12]
 81060ec:	f000 fec8 	bl	8106e80 <UART_WaitOnFlagUntilTimeout>
 81060f0:	4603      	mov	r3, r0
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d005      	beq.n	8106102 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81060f6:	68fb      	ldr	r3, [r7, #12]
 81060f8:	2220      	movs	r2, #32
 81060fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81060fe:	2303      	movs	r3, #3
 8106100:	e006      	b.n	8106110 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106102:	68fb      	ldr	r3, [r7, #12]
 8106104:	2220      	movs	r2, #32
 8106106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810610a:	2300      	movs	r3, #0
 810610c:	e000      	b.n	8106110 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810610e:	2302      	movs	r3, #2
  }
}
 8106110:	4618      	mov	r0, r3
 8106112:	3720      	adds	r7, #32
 8106114:	46bd      	mov	sp, r7
 8106116:	bd80      	pop	{r7, pc}

08106118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810611c:	b092      	sub	sp, #72	@ 0x48
 810611e:	af00      	add	r7, sp, #0
 8106120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106122:	2300      	movs	r3, #0
 8106124:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106128:	697b      	ldr	r3, [r7, #20]
 810612a:	689a      	ldr	r2, [r3, #8]
 810612c:	697b      	ldr	r3, [r7, #20]
 810612e:	691b      	ldr	r3, [r3, #16]
 8106130:	431a      	orrs	r2, r3
 8106132:	697b      	ldr	r3, [r7, #20]
 8106134:	695b      	ldr	r3, [r3, #20]
 8106136:	431a      	orrs	r2, r3
 8106138:	697b      	ldr	r3, [r7, #20]
 810613a:	69db      	ldr	r3, [r3, #28]
 810613c:	4313      	orrs	r3, r2
 810613e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106140:	697b      	ldr	r3, [r7, #20]
 8106142:	681b      	ldr	r3, [r3, #0]
 8106144:	681a      	ldr	r2, [r3, #0]
 8106146:	4bbd      	ldr	r3, [pc, #756]	@ (810643c <UART_SetConfig+0x324>)
 8106148:	4013      	ands	r3, r2
 810614a:	697a      	ldr	r2, [r7, #20]
 810614c:	6812      	ldr	r2, [r2, #0]
 810614e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8106150:	430b      	orrs	r3, r1
 8106152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106154:	697b      	ldr	r3, [r7, #20]
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	685b      	ldr	r3, [r3, #4]
 810615a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810615e:	697b      	ldr	r3, [r7, #20]
 8106160:	68da      	ldr	r2, [r3, #12]
 8106162:	697b      	ldr	r3, [r7, #20]
 8106164:	681b      	ldr	r3, [r3, #0]
 8106166:	430a      	orrs	r2, r1
 8106168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810616a:	697b      	ldr	r3, [r7, #20]
 810616c:	699b      	ldr	r3, [r3, #24]
 810616e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106170:	697b      	ldr	r3, [r7, #20]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	4ab2      	ldr	r2, [pc, #712]	@ (8106440 <UART_SetConfig+0x328>)
 8106176:	4293      	cmp	r3, r2
 8106178:	d004      	beq.n	8106184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810617a:	697b      	ldr	r3, [r7, #20]
 810617c:	6a1b      	ldr	r3, [r3, #32]
 810617e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8106180:	4313      	orrs	r3, r2
 8106182:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106184:	697b      	ldr	r3, [r7, #20]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	689b      	ldr	r3, [r3, #8]
 810618a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810618e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8106192:	697a      	ldr	r2, [r7, #20]
 8106194:	6812      	ldr	r2, [r2, #0]
 8106196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8106198:	430b      	orrs	r3, r1
 810619a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810619c:	697b      	ldr	r3, [r7, #20]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81061a2:	f023 010f 	bic.w	r1, r3, #15
 81061a6:	697b      	ldr	r3, [r7, #20]
 81061a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81061aa:	697b      	ldr	r3, [r7, #20]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	430a      	orrs	r2, r1
 81061b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81061b2:	697b      	ldr	r3, [r7, #20]
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	4aa3      	ldr	r2, [pc, #652]	@ (8106444 <UART_SetConfig+0x32c>)
 81061b8:	4293      	cmp	r3, r2
 81061ba:	d177      	bne.n	81062ac <UART_SetConfig+0x194>
 81061bc:	4ba2      	ldr	r3, [pc, #648]	@ (8106448 <UART_SetConfig+0x330>)
 81061be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81061c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81061c4:	2b28      	cmp	r3, #40	@ 0x28
 81061c6:	d86d      	bhi.n	81062a4 <UART_SetConfig+0x18c>
 81061c8:	a201      	add	r2, pc, #4	@ (adr r2, 81061d0 <UART_SetConfig+0xb8>)
 81061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061ce:	bf00      	nop
 81061d0:	08106275 	.word	0x08106275
 81061d4:	081062a5 	.word	0x081062a5
 81061d8:	081062a5 	.word	0x081062a5
 81061dc:	081062a5 	.word	0x081062a5
 81061e0:	081062a5 	.word	0x081062a5
 81061e4:	081062a5 	.word	0x081062a5
 81061e8:	081062a5 	.word	0x081062a5
 81061ec:	081062a5 	.word	0x081062a5
 81061f0:	0810627d 	.word	0x0810627d
 81061f4:	081062a5 	.word	0x081062a5
 81061f8:	081062a5 	.word	0x081062a5
 81061fc:	081062a5 	.word	0x081062a5
 8106200:	081062a5 	.word	0x081062a5
 8106204:	081062a5 	.word	0x081062a5
 8106208:	081062a5 	.word	0x081062a5
 810620c:	081062a5 	.word	0x081062a5
 8106210:	08106285 	.word	0x08106285
 8106214:	081062a5 	.word	0x081062a5
 8106218:	081062a5 	.word	0x081062a5
 810621c:	081062a5 	.word	0x081062a5
 8106220:	081062a5 	.word	0x081062a5
 8106224:	081062a5 	.word	0x081062a5
 8106228:	081062a5 	.word	0x081062a5
 810622c:	081062a5 	.word	0x081062a5
 8106230:	0810628d 	.word	0x0810628d
 8106234:	081062a5 	.word	0x081062a5
 8106238:	081062a5 	.word	0x081062a5
 810623c:	081062a5 	.word	0x081062a5
 8106240:	081062a5 	.word	0x081062a5
 8106244:	081062a5 	.word	0x081062a5
 8106248:	081062a5 	.word	0x081062a5
 810624c:	081062a5 	.word	0x081062a5
 8106250:	08106295 	.word	0x08106295
 8106254:	081062a5 	.word	0x081062a5
 8106258:	081062a5 	.word	0x081062a5
 810625c:	081062a5 	.word	0x081062a5
 8106260:	081062a5 	.word	0x081062a5
 8106264:	081062a5 	.word	0x081062a5
 8106268:	081062a5 	.word	0x081062a5
 810626c:	081062a5 	.word	0x081062a5
 8106270:	0810629d 	.word	0x0810629d
 8106274:	2301      	movs	r3, #1
 8106276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810627a:	e220      	b.n	81066be <UART_SetConfig+0x5a6>
 810627c:	2304      	movs	r3, #4
 810627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106282:	e21c      	b.n	81066be <UART_SetConfig+0x5a6>
 8106284:	2308      	movs	r3, #8
 8106286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810628a:	e218      	b.n	81066be <UART_SetConfig+0x5a6>
 810628c:	2310      	movs	r3, #16
 810628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106292:	e214      	b.n	81066be <UART_SetConfig+0x5a6>
 8106294:	2320      	movs	r3, #32
 8106296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810629a:	e210      	b.n	81066be <UART_SetConfig+0x5a6>
 810629c:	2340      	movs	r3, #64	@ 0x40
 810629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062a2:	e20c      	b.n	81066be <UART_SetConfig+0x5a6>
 81062a4:	2380      	movs	r3, #128	@ 0x80
 81062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062aa:	e208      	b.n	81066be <UART_SetConfig+0x5a6>
 81062ac:	697b      	ldr	r3, [r7, #20]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a66      	ldr	r2, [pc, #408]	@ (810644c <UART_SetConfig+0x334>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d130      	bne.n	8106318 <UART_SetConfig+0x200>
 81062b6:	4b64      	ldr	r3, [pc, #400]	@ (8106448 <UART_SetConfig+0x330>)
 81062b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062ba:	f003 0307 	and.w	r3, r3, #7
 81062be:	2b05      	cmp	r3, #5
 81062c0:	d826      	bhi.n	8106310 <UART_SetConfig+0x1f8>
 81062c2:	a201      	add	r2, pc, #4	@ (adr r2, 81062c8 <UART_SetConfig+0x1b0>)
 81062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062c8:	081062e1 	.word	0x081062e1
 81062cc:	081062e9 	.word	0x081062e9
 81062d0:	081062f1 	.word	0x081062f1
 81062d4:	081062f9 	.word	0x081062f9
 81062d8:	08106301 	.word	0x08106301
 81062dc:	08106309 	.word	0x08106309
 81062e0:	2300      	movs	r3, #0
 81062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062e6:	e1ea      	b.n	81066be <UART_SetConfig+0x5a6>
 81062e8:	2304      	movs	r3, #4
 81062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062ee:	e1e6      	b.n	81066be <UART_SetConfig+0x5a6>
 81062f0:	2308      	movs	r3, #8
 81062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062f6:	e1e2      	b.n	81066be <UART_SetConfig+0x5a6>
 81062f8:	2310      	movs	r3, #16
 81062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81062fe:	e1de      	b.n	81066be <UART_SetConfig+0x5a6>
 8106300:	2320      	movs	r3, #32
 8106302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106306:	e1da      	b.n	81066be <UART_SetConfig+0x5a6>
 8106308:	2340      	movs	r3, #64	@ 0x40
 810630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810630e:	e1d6      	b.n	81066be <UART_SetConfig+0x5a6>
 8106310:	2380      	movs	r3, #128	@ 0x80
 8106312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106316:	e1d2      	b.n	81066be <UART_SetConfig+0x5a6>
 8106318:	697b      	ldr	r3, [r7, #20]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	4a4c      	ldr	r2, [pc, #304]	@ (8106450 <UART_SetConfig+0x338>)
 810631e:	4293      	cmp	r3, r2
 8106320:	d130      	bne.n	8106384 <UART_SetConfig+0x26c>
 8106322:	4b49      	ldr	r3, [pc, #292]	@ (8106448 <UART_SetConfig+0x330>)
 8106324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106326:	f003 0307 	and.w	r3, r3, #7
 810632a:	2b05      	cmp	r3, #5
 810632c:	d826      	bhi.n	810637c <UART_SetConfig+0x264>
 810632e:	a201      	add	r2, pc, #4	@ (adr r2, 8106334 <UART_SetConfig+0x21c>)
 8106330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106334:	0810634d 	.word	0x0810634d
 8106338:	08106355 	.word	0x08106355
 810633c:	0810635d 	.word	0x0810635d
 8106340:	08106365 	.word	0x08106365
 8106344:	0810636d 	.word	0x0810636d
 8106348:	08106375 	.word	0x08106375
 810634c:	2300      	movs	r3, #0
 810634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106352:	e1b4      	b.n	81066be <UART_SetConfig+0x5a6>
 8106354:	2304      	movs	r3, #4
 8106356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810635a:	e1b0      	b.n	81066be <UART_SetConfig+0x5a6>
 810635c:	2308      	movs	r3, #8
 810635e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106362:	e1ac      	b.n	81066be <UART_SetConfig+0x5a6>
 8106364:	2310      	movs	r3, #16
 8106366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810636a:	e1a8      	b.n	81066be <UART_SetConfig+0x5a6>
 810636c:	2320      	movs	r3, #32
 810636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106372:	e1a4      	b.n	81066be <UART_SetConfig+0x5a6>
 8106374:	2340      	movs	r3, #64	@ 0x40
 8106376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810637a:	e1a0      	b.n	81066be <UART_SetConfig+0x5a6>
 810637c:	2380      	movs	r3, #128	@ 0x80
 810637e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106382:	e19c      	b.n	81066be <UART_SetConfig+0x5a6>
 8106384:	697b      	ldr	r3, [r7, #20]
 8106386:	681b      	ldr	r3, [r3, #0]
 8106388:	4a32      	ldr	r2, [pc, #200]	@ (8106454 <UART_SetConfig+0x33c>)
 810638a:	4293      	cmp	r3, r2
 810638c:	d130      	bne.n	81063f0 <UART_SetConfig+0x2d8>
 810638e:	4b2e      	ldr	r3, [pc, #184]	@ (8106448 <UART_SetConfig+0x330>)
 8106390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106392:	f003 0307 	and.w	r3, r3, #7
 8106396:	2b05      	cmp	r3, #5
 8106398:	d826      	bhi.n	81063e8 <UART_SetConfig+0x2d0>
 810639a:	a201      	add	r2, pc, #4	@ (adr r2, 81063a0 <UART_SetConfig+0x288>)
 810639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063a0:	081063b9 	.word	0x081063b9
 81063a4:	081063c1 	.word	0x081063c1
 81063a8:	081063c9 	.word	0x081063c9
 81063ac:	081063d1 	.word	0x081063d1
 81063b0:	081063d9 	.word	0x081063d9
 81063b4:	081063e1 	.word	0x081063e1
 81063b8:	2300      	movs	r3, #0
 81063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063be:	e17e      	b.n	81066be <UART_SetConfig+0x5a6>
 81063c0:	2304      	movs	r3, #4
 81063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063c6:	e17a      	b.n	81066be <UART_SetConfig+0x5a6>
 81063c8:	2308      	movs	r3, #8
 81063ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063ce:	e176      	b.n	81066be <UART_SetConfig+0x5a6>
 81063d0:	2310      	movs	r3, #16
 81063d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063d6:	e172      	b.n	81066be <UART_SetConfig+0x5a6>
 81063d8:	2320      	movs	r3, #32
 81063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063de:	e16e      	b.n	81066be <UART_SetConfig+0x5a6>
 81063e0:	2340      	movs	r3, #64	@ 0x40
 81063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063e6:	e16a      	b.n	81066be <UART_SetConfig+0x5a6>
 81063e8:	2380      	movs	r3, #128	@ 0x80
 81063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81063ee:	e166      	b.n	81066be <UART_SetConfig+0x5a6>
 81063f0:	697b      	ldr	r3, [r7, #20]
 81063f2:	681b      	ldr	r3, [r3, #0]
 81063f4:	4a18      	ldr	r2, [pc, #96]	@ (8106458 <UART_SetConfig+0x340>)
 81063f6:	4293      	cmp	r3, r2
 81063f8:	d140      	bne.n	810647c <UART_SetConfig+0x364>
 81063fa:	4b13      	ldr	r3, [pc, #76]	@ (8106448 <UART_SetConfig+0x330>)
 81063fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81063fe:	f003 0307 	and.w	r3, r3, #7
 8106402:	2b05      	cmp	r3, #5
 8106404:	d836      	bhi.n	8106474 <UART_SetConfig+0x35c>
 8106406:	a201      	add	r2, pc, #4	@ (adr r2, 810640c <UART_SetConfig+0x2f4>)
 8106408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810640c:	08106425 	.word	0x08106425
 8106410:	0810642d 	.word	0x0810642d
 8106414:	08106435 	.word	0x08106435
 8106418:	0810645d 	.word	0x0810645d
 810641c:	08106465 	.word	0x08106465
 8106420:	0810646d 	.word	0x0810646d
 8106424:	2300      	movs	r3, #0
 8106426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810642a:	e148      	b.n	81066be <UART_SetConfig+0x5a6>
 810642c:	2304      	movs	r3, #4
 810642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106432:	e144      	b.n	81066be <UART_SetConfig+0x5a6>
 8106434:	2308      	movs	r3, #8
 8106436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810643a:	e140      	b.n	81066be <UART_SetConfig+0x5a6>
 810643c:	cfff69f3 	.word	0xcfff69f3
 8106440:	58000c00 	.word	0x58000c00
 8106444:	40011000 	.word	0x40011000
 8106448:	58024400 	.word	0x58024400
 810644c:	40004400 	.word	0x40004400
 8106450:	40004800 	.word	0x40004800
 8106454:	40004c00 	.word	0x40004c00
 8106458:	40005000 	.word	0x40005000
 810645c:	2310      	movs	r3, #16
 810645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106462:	e12c      	b.n	81066be <UART_SetConfig+0x5a6>
 8106464:	2320      	movs	r3, #32
 8106466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810646a:	e128      	b.n	81066be <UART_SetConfig+0x5a6>
 810646c:	2340      	movs	r3, #64	@ 0x40
 810646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106472:	e124      	b.n	81066be <UART_SetConfig+0x5a6>
 8106474:	2380      	movs	r3, #128	@ 0x80
 8106476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810647a:	e120      	b.n	81066be <UART_SetConfig+0x5a6>
 810647c:	697b      	ldr	r3, [r7, #20]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	4acb      	ldr	r2, [pc, #812]	@ (81067b0 <UART_SetConfig+0x698>)
 8106482:	4293      	cmp	r3, r2
 8106484:	d176      	bne.n	8106574 <UART_SetConfig+0x45c>
 8106486:	4bcb      	ldr	r3, [pc, #812]	@ (81067b4 <UART_SetConfig+0x69c>)
 8106488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810648a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810648e:	2b28      	cmp	r3, #40	@ 0x28
 8106490:	d86c      	bhi.n	810656c <UART_SetConfig+0x454>
 8106492:	a201      	add	r2, pc, #4	@ (adr r2, 8106498 <UART_SetConfig+0x380>)
 8106494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106498:	0810653d 	.word	0x0810653d
 810649c:	0810656d 	.word	0x0810656d
 81064a0:	0810656d 	.word	0x0810656d
 81064a4:	0810656d 	.word	0x0810656d
 81064a8:	0810656d 	.word	0x0810656d
 81064ac:	0810656d 	.word	0x0810656d
 81064b0:	0810656d 	.word	0x0810656d
 81064b4:	0810656d 	.word	0x0810656d
 81064b8:	08106545 	.word	0x08106545
 81064bc:	0810656d 	.word	0x0810656d
 81064c0:	0810656d 	.word	0x0810656d
 81064c4:	0810656d 	.word	0x0810656d
 81064c8:	0810656d 	.word	0x0810656d
 81064cc:	0810656d 	.word	0x0810656d
 81064d0:	0810656d 	.word	0x0810656d
 81064d4:	0810656d 	.word	0x0810656d
 81064d8:	0810654d 	.word	0x0810654d
 81064dc:	0810656d 	.word	0x0810656d
 81064e0:	0810656d 	.word	0x0810656d
 81064e4:	0810656d 	.word	0x0810656d
 81064e8:	0810656d 	.word	0x0810656d
 81064ec:	0810656d 	.word	0x0810656d
 81064f0:	0810656d 	.word	0x0810656d
 81064f4:	0810656d 	.word	0x0810656d
 81064f8:	08106555 	.word	0x08106555
 81064fc:	0810656d 	.word	0x0810656d
 8106500:	0810656d 	.word	0x0810656d
 8106504:	0810656d 	.word	0x0810656d
 8106508:	0810656d 	.word	0x0810656d
 810650c:	0810656d 	.word	0x0810656d
 8106510:	0810656d 	.word	0x0810656d
 8106514:	0810656d 	.word	0x0810656d
 8106518:	0810655d 	.word	0x0810655d
 810651c:	0810656d 	.word	0x0810656d
 8106520:	0810656d 	.word	0x0810656d
 8106524:	0810656d 	.word	0x0810656d
 8106528:	0810656d 	.word	0x0810656d
 810652c:	0810656d 	.word	0x0810656d
 8106530:	0810656d 	.word	0x0810656d
 8106534:	0810656d 	.word	0x0810656d
 8106538:	08106565 	.word	0x08106565
 810653c:	2301      	movs	r3, #1
 810653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106542:	e0bc      	b.n	81066be <UART_SetConfig+0x5a6>
 8106544:	2304      	movs	r3, #4
 8106546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810654a:	e0b8      	b.n	81066be <UART_SetConfig+0x5a6>
 810654c:	2308      	movs	r3, #8
 810654e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106552:	e0b4      	b.n	81066be <UART_SetConfig+0x5a6>
 8106554:	2310      	movs	r3, #16
 8106556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810655a:	e0b0      	b.n	81066be <UART_SetConfig+0x5a6>
 810655c:	2320      	movs	r3, #32
 810655e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106562:	e0ac      	b.n	81066be <UART_SetConfig+0x5a6>
 8106564:	2340      	movs	r3, #64	@ 0x40
 8106566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810656a:	e0a8      	b.n	81066be <UART_SetConfig+0x5a6>
 810656c:	2380      	movs	r3, #128	@ 0x80
 810656e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106572:	e0a4      	b.n	81066be <UART_SetConfig+0x5a6>
 8106574:	697b      	ldr	r3, [r7, #20]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	4a8f      	ldr	r2, [pc, #572]	@ (81067b8 <UART_SetConfig+0x6a0>)
 810657a:	4293      	cmp	r3, r2
 810657c:	d130      	bne.n	81065e0 <UART_SetConfig+0x4c8>
 810657e:	4b8d      	ldr	r3, [pc, #564]	@ (81067b4 <UART_SetConfig+0x69c>)
 8106580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106582:	f003 0307 	and.w	r3, r3, #7
 8106586:	2b05      	cmp	r3, #5
 8106588:	d826      	bhi.n	81065d8 <UART_SetConfig+0x4c0>
 810658a:	a201      	add	r2, pc, #4	@ (adr r2, 8106590 <UART_SetConfig+0x478>)
 810658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106590:	081065a9 	.word	0x081065a9
 8106594:	081065b1 	.word	0x081065b1
 8106598:	081065b9 	.word	0x081065b9
 810659c:	081065c1 	.word	0x081065c1
 81065a0:	081065c9 	.word	0x081065c9
 81065a4:	081065d1 	.word	0x081065d1
 81065a8:	2300      	movs	r3, #0
 81065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065ae:	e086      	b.n	81066be <UART_SetConfig+0x5a6>
 81065b0:	2304      	movs	r3, #4
 81065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065b6:	e082      	b.n	81066be <UART_SetConfig+0x5a6>
 81065b8:	2308      	movs	r3, #8
 81065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065be:	e07e      	b.n	81066be <UART_SetConfig+0x5a6>
 81065c0:	2310      	movs	r3, #16
 81065c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065c6:	e07a      	b.n	81066be <UART_SetConfig+0x5a6>
 81065c8:	2320      	movs	r3, #32
 81065ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065ce:	e076      	b.n	81066be <UART_SetConfig+0x5a6>
 81065d0:	2340      	movs	r3, #64	@ 0x40
 81065d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065d6:	e072      	b.n	81066be <UART_SetConfig+0x5a6>
 81065d8:	2380      	movs	r3, #128	@ 0x80
 81065da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81065de:	e06e      	b.n	81066be <UART_SetConfig+0x5a6>
 81065e0:	697b      	ldr	r3, [r7, #20]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	4a75      	ldr	r2, [pc, #468]	@ (81067bc <UART_SetConfig+0x6a4>)
 81065e6:	4293      	cmp	r3, r2
 81065e8:	d130      	bne.n	810664c <UART_SetConfig+0x534>
 81065ea:	4b72      	ldr	r3, [pc, #456]	@ (81067b4 <UART_SetConfig+0x69c>)
 81065ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81065ee:	f003 0307 	and.w	r3, r3, #7
 81065f2:	2b05      	cmp	r3, #5
 81065f4:	d826      	bhi.n	8106644 <UART_SetConfig+0x52c>
 81065f6:	a201      	add	r2, pc, #4	@ (adr r2, 81065fc <UART_SetConfig+0x4e4>)
 81065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065fc:	08106615 	.word	0x08106615
 8106600:	0810661d 	.word	0x0810661d
 8106604:	08106625 	.word	0x08106625
 8106608:	0810662d 	.word	0x0810662d
 810660c:	08106635 	.word	0x08106635
 8106610:	0810663d 	.word	0x0810663d
 8106614:	2300      	movs	r3, #0
 8106616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810661a:	e050      	b.n	81066be <UART_SetConfig+0x5a6>
 810661c:	2304      	movs	r3, #4
 810661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106622:	e04c      	b.n	81066be <UART_SetConfig+0x5a6>
 8106624:	2308      	movs	r3, #8
 8106626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810662a:	e048      	b.n	81066be <UART_SetConfig+0x5a6>
 810662c:	2310      	movs	r3, #16
 810662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106632:	e044      	b.n	81066be <UART_SetConfig+0x5a6>
 8106634:	2320      	movs	r3, #32
 8106636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810663a:	e040      	b.n	81066be <UART_SetConfig+0x5a6>
 810663c:	2340      	movs	r3, #64	@ 0x40
 810663e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106642:	e03c      	b.n	81066be <UART_SetConfig+0x5a6>
 8106644:	2380      	movs	r3, #128	@ 0x80
 8106646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810664a:	e038      	b.n	81066be <UART_SetConfig+0x5a6>
 810664c:	697b      	ldr	r3, [r7, #20]
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	4a5b      	ldr	r2, [pc, #364]	@ (81067c0 <UART_SetConfig+0x6a8>)
 8106652:	4293      	cmp	r3, r2
 8106654:	d130      	bne.n	81066b8 <UART_SetConfig+0x5a0>
 8106656:	4b57      	ldr	r3, [pc, #348]	@ (81067b4 <UART_SetConfig+0x69c>)
 8106658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810665a:	f003 0307 	and.w	r3, r3, #7
 810665e:	2b05      	cmp	r3, #5
 8106660:	d826      	bhi.n	81066b0 <UART_SetConfig+0x598>
 8106662:	a201      	add	r2, pc, #4	@ (adr r2, 8106668 <UART_SetConfig+0x550>)
 8106664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106668:	08106681 	.word	0x08106681
 810666c:	08106689 	.word	0x08106689
 8106670:	08106691 	.word	0x08106691
 8106674:	08106699 	.word	0x08106699
 8106678:	081066a1 	.word	0x081066a1
 810667c:	081066a9 	.word	0x081066a9
 8106680:	2302      	movs	r3, #2
 8106682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106686:	e01a      	b.n	81066be <UART_SetConfig+0x5a6>
 8106688:	2304      	movs	r3, #4
 810668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810668e:	e016      	b.n	81066be <UART_SetConfig+0x5a6>
 8106690:	2308      	movs	r3, #8
 8106692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106696:	e012      	b.n	81066be <UART_SetConfig+0x5a6>
 8106698:	2310      	movs	r3, #16
 810669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810669e:	e00e      	b.n	81066be <UART_SetConfig+0x5a6>
 81066a0:	2320      	movs	r3, #32
 81066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81066a6:	e00a      	b.n	81066be <UART_SetConfig+0x5a6>
 81066a8:	2340      	movs	r3, #64	@ 0x40
 81066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81066ae:	e006      	b.n	81066be <UART_SetConfig+0x5a6>
 81066b0:	2380      	movs	r3, #128	@ 0x80
 81066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81066b6:	e002      	b.n	81066be <UART_SetConfig+0x5a6>
 81066b8:	2380      	movs	r3, #128	@ 0x80
 81066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81066be:	697b      	ldr	r3, [r7, #20]
 81066c0:	681b      	ldr	r3, [r3, #0]
 81066c2:	4a3f      	ldr	r2, [pc, #252]	@ (81067c0 <UART_SetConfig+0x6a8>)
 81066c4:	4293      	cmp	r3, r2
 81066c6:	f040 80f8 	bne.w	81068ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81066ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81066ce:	2b20      	cmp	r3, #32
 81066d0:	dc46      	bgt.n	8106760 <UART_SetConfig+0x648>
 81066d2:	2b02      	cmp	r3, #2
 81066d4:	f2c0 8082 	blt.w	81067dc <UART_SetConfig+0x6c4>
 81066d8:	3b02      	subs	r3, #2
 81066da:	2b1e      	cmp	r3, #30
 81066dc:	d87e      	bhi.n	81067dc <UART_SetConfig+0x6c4>
 81066de:	a201      	add	r2, pc, #4	@ (adr r2, 81066e4 <UART_SetConfig+0x5cc>)
 81066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066e4:	08106767 	.word	0x08106767
 81066e8:	081067dd 	.word	0x081067dd
 81066ec:	0810676f 	.word	0x0810676f
 81066f0:	081067dd 	.word	0x081067dd
 81066f4:	081067dd 	.word	0x081067dd
 81066f8:	081067dd 	.word	0x081067dd
 81066fc:	0810677f 	.word	0x0810677f
 8106700:	081067dd 	.word	0x081067dd
 8106704:	081067dd 	.word	0x081067dd
 8106708:	081067dd 	.word	0x081067dd
 810670c:	081067dd 	.word	0x081067dd
 8106710:	081067dd 	.word	0x081067dd
 8106714:	081067dd 	.word	0x081067dd
 8106718:	081067dd 	.word	0x081067dd
 810671c:	0810678f 	.word	0x0810678f
 8106720:	081067dd 	.word	0x081067dd
 8106724:	081067dd 	.word	0x081067dd
 8106728:	081067dd 	.word	0x081067dd
 810672c:	081067dd 	.word	0x081067dd
 8106730:	081067dd 	.word	0x081067dd
 8106734:	081067dd 	.word	0x081067dd
 8106738:	081067dd 	.word	0x081067dd
 810673c:	081067dd 	.word	0x081067dd
 8106740:	081067dd 	.word	0x081067dd
 8106744:	081067dd 	.word	0x081067dd
 8106748:	081067dd 	.word	0x081067dd
 810674c:	081067dd 	.word	0x081067dd
 8106750:	081067dd 	.word	0x081067dd
 8106754:	081067dd 	.word	0x081067dd
 8106758:	081067dd 	.word	0x081067dd
 810675c:	081067cf 	.word	0x081067cf
 8106760:	2b40      	cmp	r3, #64	@ 0x40
 8106762:	d037      	beq.n	81067d4 <UART_SetConfig+0x6bc>
 8106764:	e03a      	b.n	81067dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106766:	f7fd fbc5 	bl	8103ef4 <HAL_RCCEx_GetD3PCLK1Freq>
 810676a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810676c:	e03c      	b.n	81067e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810676e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106772:	4618      	mov	r0, r3
 8106774:	f7fd fbd4 	bl	8103f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810677c:	e034      	b.n	81067e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810677e:	f107 0318 	add.w	r3, r7, #24
 8106782:	4618      	mov	r0, r3
 8106784:	f7fd fd20 	bl	81041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106788:	69fb      	ldr	r3, [r7, #28]
 810678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810678c:	e02c      	b.n	81067e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810678e:	4b09      	ldr	r3, [pc, #36]	@ (81067b4 <UART_SetConfig+0x69c>)
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	f003 0320 	and.w	r3, r3, #32
 8106796:	2b00      	cmp	r3, #0
 8106798:	d016      	beq.n	81067c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810679a:	4b06      	ldr	r3, [pc, #24]	@ (81067b4 <UART_SetConfig+0x69c>)
 810679c:	681b      	ldr	r3, [r3, #0]
 810679e:	08db      	lsrs	r3, r3, #3
 81067a0:	f003 0303 	and.w	r3, r3, #3
 81067a4:	4a07      	ldr	r2, [pc, #28]	@ (81067c4 <UART_SetConfig+0x6ac>)
 81067a6:	fa22 f303 	lsr.w	r3, r2, r3
 81067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81067ac:	e01c      	b.n	81067e8 <UART_SetConfig+0x6d0>
 81067ae:	bf00      	nop
 81067b0:	40011400 	.word	0x40011400
 81067b4:	58024400 	.word	0x58024400
 81067b8:	40007800 	.word	0x40007800
 81067bc:	40007c00 	.word	0x40007c00
 81067c0:	58000c00 	.word	0x58000c00
 81067c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81067c8:	4b9d      	ldr	r3, [pc, #628]	@ (8106a40 <UART_SetConfig+0x928>)
 81067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067cc:	e00c      	b.n	81067e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81067ce:	4b9d      	ldr	r3, [pc, #628]	@ (8106a44 <UART_SetConfig+0x92c>)
 81067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067d2:	e009      	b.n	81067e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81067d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067da:	e005      	b.n	81067e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81067dc:	2300      	movs	r3, #0
 81067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81067e0:	2301      	movs	r3, #1
 81067e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81067e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81067ea:	2b00      	cmp	r3, #0
 81067ec:	f000 81de 	beq.w	8106bac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81067f0:	697b      	ldr	r3, [r7, #20]
 81067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81067f4:	4a94      	ldr	r2, [pc, #592]	@ (8106a48 <UART_SetConfig+0x930>)
 81067f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81067fa:	461a      	mov	r2, r3
 81067fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81067fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8106802:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106804:	697b      	ldr	r3, [r7, #20]
 8106806:	685a      	ldr	r2, [r3, #4]
 8106808:	4613      	mov	r3, r2
 810680a:	005b      	lsls	r3, r3, #1
 810680c:	4413      	add	r3, r2
 810680e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106810:	429a      	cmp	r2, r3
 8106812:	d305      	bcc.n	8106820 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8106814:	697b      	ldr	r3, [r7, #20]
 8106816:	685b      	ldr	r3, [r3, #4]
 8106818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810681a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810681c:	429a      	cmp	r2, r3
 810681e:	d903      	bls.n	8106828 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8106820:	2301      	movs	r3, #1
 8106822:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8106826:	e1c1      	b.n	8106bac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810682a:	2200      	movs	r2, #0
 810682c:	60bb      	str	r3, [r7, #8]
 810682e:	60fa      	str	r2, [r7, #12]
 8106830:	697b      	ldr	r3, [r7, #20]
 8106832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106834:	4a84      	ldr	r2, [pc, #528]	@ (8106a48 <UART_SetConfig+0x930>)
 8106836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810683a:	b29b      	uxth	r3, r3
 810683c:	2200      	movs	r2, #0
 810683e:	603b      	str	r3, [r7, #0]
 8106840:	607a      	str	r2, [r7, #4]
 8106842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810684a:	f7fa faa5 	bl	8100d98 <__aeabi_uldivmod>
 810684e:	4602      	mov	r2, r0
 8106850:	460b      	mov	r3, r1
 8106852:	4610      	mov	r0, r2
 8106854:	4619      	mov	r1, r3
 8106856:	f04f 0200 	mov.w	r2, #0
 810685a:	f04f 0300 	mov.w	r3, #0
 810685e:	020b      	lsls	r3, r1, #8
 8106860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106864:	0202      	lsls	r2, r0, #8
 8106866:	6979      	ldr	r1, [r7, #20]
 8106868:	6849      	ldr	r1, [r1, #4]
 810686a:	0849      	lsrs	r1, r1, #1
 810686c:	2000      	movs	r0, #0
 810686e:	460c      	mov	r4, r1
 8106870:	4605      	mov	r5, r0
 8106872:	eb12 0804 	adds.w	r8, r2, r4
 8106876:	eb43 0905 	adc.w	r9, r3, r5
 810687a:	697b      	ldr	r3, [r7, #20]
 810687c:	685b      	ldr	r3, [r3, #4]
 810687e:	2200      	movs	r2, #0
 8106880:	469a      	mov	sl, r3
 8106882:	4693      	mov	fp, r2
 8106884:	4652      	mov	r2, sl
 8106886:	465b      	mov	r3, fp
 8106888:	4640      	mov	r0, r8
 810688a:	4649      	mov	r1, r9
 810688c:	f7fa fa84 	bl	8100d98 <__aeabi_uldivmod>
 8106890:	4602      	mov	r2, r0
 8106892:	460b      	mov	r3, r1
 8106894:	4613      	mov	r3, r2
 8106896:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810689a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810689e:	d308      	bcc.n	81068b2 <UART_SetConfig+0x79a>
 81068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81068a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81068a6:	d204      	bcs.n	81068b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81068a8:	697b      	ldr	r3, [r7, #20]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81068ae:	60da      	str	r2, [r3, #12]
 81068b0:	e17c      	b.n	8106bac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81068b2:	2301      	movs	r3, #1
 81068b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81068b8:	e178      	b.n	8106bac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81068ba:	697b      	ldr	r3, [r7, #20]
 81068bc:	69db      	ldr	r3, [r3, #28]
 81068be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81068c2:	f040 80c5 	bne.w	8106a50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81068c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81068ca:	2b20      	cmp	r3, #32
 81068cc:	dc48      	bgt.n	8106960 <UART_SetConfig+0x848>
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	db7b      	blt.n	81069ca <UART_SetConfig+0x8b2>
 81068d2:	2b20      	cmp	r3, #32
 81068d4:	d879      	bhi.n	81069ca <UART_SetConfig+0x8b2>
 81068d6:	a201      	add	r2, pc, #4	@ (adr r2, 81068dc <UART_SetConfig+0x7c4>)
 81068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068dc:	08106967 	.word	0x08106967
 81068e0:	0810696f 	.word	0x0810696f
 81068e4:	081069cb 	.word	0x081069cb
 81068e8:	081069cb 	.word	0x081069cb
 81068ec:	08106977 	.word	0x08106977
 81068f0:	081069cb 	.word	0x081069cb
 81068f4:	081069cb 	.word	0x081069cb
 81068f8:	081069cb 	.word	0x081069cb
 81068fc:	08106987 	.word	0x08106987
 8106900:	081069cb 	.word	0x081069cb
 8106904:	081069cb 	.word	0x081069cb
 8106908:	081069cb 	.word	0x081069cb
 810690c:	081069cb 	.word	0x081069cb
 8106910:	081069cb 	.word	0x081069cb
 8106914:	081069cb 	.word	0x081069cb
 8106918:	081069cb 	.word	0x081069cb
 810691c:	08106997 	.word	0x08106997
 8106920:	081069cb 	.word	0x081069cb
 8106924:	081069cb 	.word	0x081069cb
 8106928:	081069cb 	.word	0x081069cb
 810692c:	081069cb 	.word	0x081069cb
 8106930:	081069cb 	.word	0x081069cb
 8106934:	081069cb 	.word	0x081069cb
 8106938:	081069cb 	.word	0x081069cb
 810693c:	081069cb 	.word	0x081069cb
 8106940:	081069cb 	.word	0x081069cb
 8106944:	081069cb 	.word	0x081069cb
 8106948:	081069cb 	.word	0x081069cb
 810694c:	081069cb 	.word	0x081069cb
 8106950:	081069cb 	.word	0x081069cb
 8106954:	081069cb 	.word	0x081069cb
 8106958:	081069cb 	.word	0x081069cb
 810695c:	081069bd 	.word	0x081069bd
 8106960:	2b40      	cmp	r3, #64	@ 0x40
 8106962:	d02e      	beq.n	81069c2 <UART_SetConfig+0x8aa>
 8106964:	e031      	b.n	81069ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106966:	f7fc f88f 	bl	8102a88 <HAL_RCC_GetPCLK1Freq>
 810696a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810696c:	e033      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810696e:	f7fc f8a1 	bl	8102ab4 <HAL_RCC_GetPCLK2Freq>
 8106972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106974:	e02f      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810697a:	4618      	mov	r0, r3
 810697c:	f7fd fad0 	bl	8103f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106984:	e027      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106986:	f107 0318 	add.w	r3, r7, #24
 810698a:	4618      	mov	r0, r3
 810698c:	f7fd fc1c 	bl	81041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106990:	69fb      	ldr	r3, [r7, #28]
 8106992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106994:	e01f      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106996:	4b2d      	ldr	r3, [pc, #180]	@ (8106a4c <UART_SetConfig+0x934>)
 8106998:	681b      	ldr	r3, [r3, #0]
 810699a:	f003 0320 	and.w	r3, r3, #32
 810699e:	2b00      	cmp	r3, #0
 81069a0:	d009      	beq.n	81069b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81069a2:	4b2a      	ldr	r3, [pc, #168]	@ (8106a4c <UART_SetConfig+0x934>)
 81069a4:	681b      	ldr	r3, [r3, #0]
 81069a6:	08db      	lsrs	r3, r3, #3
 81069a8:	f003 0303 	and.w	r3, r3, #3
 81069ac:	4a24      	ldr	r2, [pc, #144]	@ (8106a40 <UART_SetConfig+0x928>)
 81069ae:	fa22 f303 	lsr.w	r3, r2, r3
 81069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81069b4:	e00f      	b.n	81069d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81069b6:	4b22      	ldr	r3, [pc, #136]	@ (8106a40 <UART_SetConfig+0x928>)
 81069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069ba:	e00c      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81069bc:	4b21      	ldr	r3, [pc, #132]	@ (8106a44 <UART_SetConfig+0x92c>)
 81069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069c0:	e009      	b.n	81069d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81069c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069c8:	e005      	b.n	81069d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81069ca:	2300      	movs	r3, #0
 81069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81069ce:	2301      	movs	r3, #1
 81069d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81069d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81069d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81069d8:	2b00      	cmp	r3, #0
 81069da:	f000 80e7 	beq.w	8106bac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81069de:	697b      	ldr	r3, [r7, #20]
 81069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81069e2:	4a19      	ldr	r2, [pc, #100]	@ (8106a48 <UART_SetConfig+0x930>)
 81069e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81069e8:	461a      	mov	r2, r3
 81069ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81069ec:	fbb3 f3f2 	udiv	r3, r3, r2
 81069f0:	005a      	lsls	r2, r3, #1
 81069f2:	697b      	ldr	r3, [r7, #20]
 81069f4:	685b      	ldr	r3, [r3, #4]
 81069f6:	085b      	lsrs	r3, r3, #1
 81069f8:	441a      	add	r2, r3
 81069fa:	697b      	ldr	r3, [r7, #20]
 81069fc:	685b      	ldr	r3, [r3, #4]
 81069fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8106a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a06:	2b0f      	cmp	r3, #15
 8106a08:	d916      	bls.n	8106a38 <UART_SetConfig+0x920>
 8106a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106a10:	d212      	bcs.n	8106a38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a14:	b29b      	uxth	r3, r3
 8106a16:	f023 030f 	bic.w	r3, r3, #15
 8106a1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a1e:	085b      	lsrs	r3, r3, #1
 8106a20:	b29b      	uxth	r3, r3
 8106a22:	f003 0307 	and.w	r3, r3, #7
 8106a26:	b29a      	uxth	r2, r3
 8106a28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8106a2a:	4313      	orrs	r3, r2
 8106a2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8106a2e:	697b      	ldr	r3, [r7, #20]
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8106a34:	60da      	str	r2, [r3, #12]
 8106a36:	e0b9      	b.n	8106bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8106a38:	2301      	movs	r3, #1
 8106a3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8106a3e:	e0b5      	b.n	8106bac <UART_SetConfig+0xa94>
 8106a40:	03d09000 	.word	0x03d09000
 8106a44:	003d0900 	.word	0x003d0900
 8106a48:	0810b990 	.word	0x0810b990
 8106a4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8106a50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8106a54:	2b20      	cmp	r3, #32
 8106a56:	dc49      	bgt.n	8106aec <UART_SetConfig+0x9d4>
 8106a58:	2b00      	cmp	r3, #0
 8106a5a:	db7c      	blt.n	8106b56 <UART_SetConfig+0xa3e>
 8106a5c:	2b20      	cmp	r3, #32
 8106a5e:	d87a      	bhi.n	8106b56 <UART_SetConfig+0xa3e>
 8106a60:	a201      	add	r2, pc, #4	@ (adr r2, 8106a68 <UART_SetConfig+0x950>)
 8106a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a66:	bf00      	nop
 8106a68:	08106af3 	.word	0x08106af3
 8106a6c:	08106afb 	.word	0x08106afb
 8106a70:	08106b57 	.word	0x08106b57
 8106a74:	08106b57 	.word	0x08106b57
 8106a78:	08106b03 	.word	0x08106b03
 8106a7c:	08106b57 	.word	0x08106b57
 8106a80:	08106b57 	.word	0x08106b57
 8106a84:	08106b57 	.word	0x08106b57
 8106a88:	08106b13 	.word	0x08106b13
 8106a8c:	08106b57 	.word	0x08106b57
 8106a90:	08106b57 	.word	0x08106b57
 8106a94:	08106b57 	.word	0x08106b57
 8106a98:	08106b57 	.word	0x08106b57
 8106a9c:	08106b57 	.word	0x08106b57
 8106aa0:	08106b57 	.word	0x08106b57
 8106aa4:	08106b57 	.word	0x08106b57
 8106aa8:	08106b23 	.word	0x08106b23
 8106aac:	08106b57 	.word	0x08106b57
 8106ab0:	08106b57 	.word	0x08106b57
 8106ab4:	08106b57 	.word	0x08106b57
 8106ab8:	08106b57 	.word	0x08106b57
 8106abc:	08106b57 	.word	0x08106b57
 8106ac0:	08106b57 	.word	0x08106b57
 8106ac4:	08106b57 	.word	0x08106b57
 8106ac8:	08106b57 	.word	0x08106b57
 8106acc:	08106b57 	.word	0x08106b57
 8106ad0:	08106b57 	.word	0x08106b57
 8106ad4:	08106b57 	.word	0x08106b57
 8106ad8:	08106b57 	.word	0x08106b57
 8106adc:	08106b57 	.word	0x08106b57
 8106ae0:	08106b57 	.word	0x08106b57
 8106ae4:	08106b57 	.word	0x08106b57
 8106ae8:	08106b49 	.word	0x08106b49
 8106aec:	2b40      	cmp	r3, #64	@ 0x40
 8106aee:	d02e      	beq.n	8106b4e <UART_SetConfig+0xa36>
 8106af0:	e031      	b.n	8106b56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106af2:	f7fb ffc9 	bl	8102a88 <HAL_RCC_GetPCLK1Freq>
 8106af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106af8:	e033      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106afa:	f7fb ffdb 	bl	8102ab4 <HAL_RCC_GetPCLK2Freq>
 8106afe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106b00:	e02f      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106b06:	4618      	mov	r0, r3
 8106b08:	f7fd fa0a 	bl	8103f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b10:	e027      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106b12:	f107 0318 	add.w	r3, r7, #24
 8106b16:	4618      	mov	r0, r3
 8106b18:	f7fd fb56 	bl	81041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106b1c:	69fb      	ldr	r3, [r7, #28]
 8106b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b20:	e01f      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b22:	4b2d      	ldr	r3, [pc, #180]	@ (8106bd8 <UART_SetConfig+0xac0>)
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f003 0320 	and.w	r3, r3, #32
 8106b2a:	2b00      	cmp	r3, #0
 8106b2c:	d009      	beq.n	8106b42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8106bd8 <UART_SetConfig+0xac0>)
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	08db      	lsrs	r3, r3, #3
 8106b34:	f003 0303 	and.w	r3, r3, #3
 8106b38:	4a28      	ldr	r2, [pc, #160]	@ (8106bdc <UART_SetConfig+0xac4>)
 8106b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8106b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106b40:	e00f      	b.n	8106b62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8106b42:	4b26      	ldr	r3, [pc, #152]	@ (8106bdc <UART_SetConfig+0xac4>)
 8106b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b46:	e00c      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106b48:	4b25      	ldr	r3, [pc, #148]	@ (8106be0 <UART_SetConfig+0xac8>)
 8106b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b4c:	e009      	b.n	8106b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b54:	e005      	b.n	8106b62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8106b56:	2300      	movs	r3, #0
 8106b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8106b5a:	2301      	movs	r3, #1
 8106b5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8106b60:	bf00      	nop
    }

    if (pclk != 0U)
 8106b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106b64:	2b00      	cmp	r3, #0
 8106b66:	d021      	beq.n	8106bac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106b68:	697b      	ldr	r3, [r7, #20]
 8106b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8106be4 <UART_SetConfig+0xacc>)
 8106b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106b72:	461a      	mov	r2, r3
 8106b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8106b7a:	697b      	ldr	r3, [r7, #20]
 8106b7c:	685b      	ldr	r3, [r3, #4]
 8106b7e:	085b      	lsrs	r3, r3, #1
 8106b80:	441a      	add	r2, r3
 8106b82:	697b      	ldr	r3, [r7, #20]
 8106b84:	685b      	ldr	r3, [r3, #4]
 8106b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8106b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b8e:	2b0f      	cmp	r3, #15
 8106b90:	d909      	bls.n	8106ba6 <UART_SetConfig+0xa8e>
 8106b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106b98:	d205      	bcs.n	8106ba6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b9c:	b29a      	uxth	r2, r3
 8106b9e:	697b      	ldr	r3, [r7, #20]
 8106ba0:	681b      	ldr	r3, [r3, #0]
 8106ba2:	60da      	str	r2, [r3, #12]
 8106ba4:	e002      	b.n	8106bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8106ba6:	2301      	movs	r3, #1
 8106ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106bac:	697b      	ldr	r3, [r7, #20]
 8106bae:	2201      	movs	r2, #1
 8106bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8106bb4:	697b      	ldr	r3, [r7, #20]
 8106bb6:	2201      	movs	r2, #1
 8106bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106bbc:	697b      	ldr	r3, [r7, #20]
 8106bbe:	2200      	movs	r2, #0
 8106bc0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8106bc2:	697b      	ldr	r3, [r7, #20]
 8106bc4:	2200      	movs	r2, #0
 8106bc6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8106bc8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8106bcc:	4618      	mov	r0, r3
 8106bce:	3748      	adds	r7, #72	@ 0x48
 8106bd0:	46bd      	mov	sp, r7
 8106bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106bd6:	bf00      	nop
 8106bd8:	58024400 	.word	0x58024400
 8106bdc:	03d09000 	.word	0x03d09000
 8106be0:	003d0900 	.word	0x003d0900
 8106be4:	0810b990 	.word	0x0810b990

08106be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106be8:	b480      	push	{r7}
 8106bea:	b083      	sub	sp, #12
 8106bec:	af00      	add	r7, sp, #0
 8106bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106bf4:	f003 0308 	and.w	r3, r3, #8
 8106bf8:	2b00      	cmp	r3, #0
 8106bfa:	d00a      	beq.n	8106c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	685b      	ldr	r3, [r3, #4]
 8106c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	681b      	ldr	r3, [r3, #0]
 8106c0e:	430a      	orrs	r2, r1
 8106c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c16:	f003 0301 	and.w	r3, r3, #1
 8106c1a:	2b00      	cmp	r3, #0
 8106c1c:	d00a      	beq.n	8106c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	681b      	ldr	r3, [r3, #0]
 8106c22:	685b      	ldr	r3, [r3, #4]
 8106c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	430a      	orrs	r2, r1
 8106c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c38:	f003 0302 	and.w	r3, r3, #2
 8106c3c:	2b00      	cmp	r3, #0
 8106c3e:	d00a      	beq.n	8106c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	685b      	ldr	r3, [r3, #4]
 8106c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	430a      	orrs	r2, r1
 8106c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c5a:	f003 0304 	and.w	r3, r3, #4
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d00a      	beq.n	8106c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	685b      	ldr	r3, [r3, #4]
 8106c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	430a      	orrs	r2, r1
 8106c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c7c:	f003 0310 	and.w	r3, r3, #16
 8106c80:	2b00      	cmp	r3, #0
 8106c82:	d00a      	beq.n	8106c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	681b      	ldr	r3, [r3, #0]
 8106c88:	689b      	ldr	r3, [r3, #8]
 8106c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	430a      	orrs	r2, r1
 8106c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c9e:	f003 0320 	and.w	r3, r3, #32
 8106ca2:	2b00      	cmp	r3, #0
 8106ca4:	d00a      	beq.n	8106cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	689b      	ldr	r3, [r3, #8]
 8106cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	430a      	orrs	r2, r1
 8106cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106cc4:	2b00      	cmp	r3, #0
 8106cc6:	d01a      	beq.n	8106cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	681b      	ldr	r3, [r3, #0]
 8106ccc:	685b      	ldr	r3, [r3, #4]
 8106cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8106cd2:	687b      	ldr	r3, [r7, #4]
 8106cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	430a      	orrs	r2, r1
 8106cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106ce6:	d10a      	bne.n	8106cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	685b      	ldr	r3, [r3, #4]
 8106cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	430a      	orrs	r2, r1
 8106cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106d06:	2b00      	cmp	r3, #0
 8106d08:	d00a      	beq.n	8106d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	681b      	ldr	r3, [r3, #0]
 8106d0e:	685b      	ldr	r3, [r3, #4]
 8106d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	681b      	ldr	r3, [r3, #0]
 8106d1c:	430a      	orrs	r2, r1
 8106d1e:	605a      	str	r2, [r3, #4]
  }
}
 8106d20:	bf00      	nop
 8106d22:	370c      	adds	r7, #12
 8106d24:	46bd      	mov	sp, r7
 8106d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d2a:	4770      	bx	lr

08106d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106d2c:	b580      	push	{r7, lr}
 8106d2e:	b098      	sub	sp, #96	@ 0x60
 8106d30:	af02      	add	r7, sp, #8
 8106d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	2200      	movs	r2, #0
 8106d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106d3c:	f7fb f90e 	bl	8101f5c <HAL_GetTick>
 8106d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106d42:	687b      	ldr	r3, [r7, #4]
 8106d44:	681b      	ldr	r3, [r3, #0]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	f003 0308 	and.w	r3, r3, #8
 8106d4c:	2b08      	cmp	r3, #8
 8106d4e:	d12f      	bne.n	8106db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8106d54:	9300      	str	r3, [sp, #0]
 8106d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8106d58:	2200      	movs	r2, #0
 8106d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8106d5e:	6878      	ldr	r0, [r7, #4]
 8106d60:	f000 f88e 	bl	8106e80 <UART_WaitOnFlagUntilTimeout>
 8106d64:	4603      	mov	r3, r0
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d022      	beq.n	8106db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	681b      	ldr	r3, [r3, #0]
 8106d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106d72:	e853 3f00 	ldrex	r3, [r3]
 8106d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8106d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8106d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	461a      	mov	r2, r3
 8106d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8106d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8106d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8106d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8106d90:	e841 2300 	strex	r3, r2, [r1]
 8106d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8106d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106d98:	2b00      	cmp	r3, #0
 8106d9a:	d1e6      	bne.n	8106d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	2220      	movs	r2, #32
 8106da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	2200      	movs	r2, #0
 8106da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106dac:	2303      	movs	r3, #3
 8106dae:	e063      	b.n	8106e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	f003 0304 	and.w	r3, r3, #4
 8106dba:	2b04      	cmp	r3, #4
 8106dbc:	d149      	bne.n	8106e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106dbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8106dc2:	9300      	str	r3, [sp, #0]
 8106dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8106dc6:	2200      	movs	r2, #0
 8106dc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8106dcc:	6878      	ldr	r0, [r7, #4]
 8106dce:	f000 f857 	bl	8106e80 <UART_WaitOnFlagUntilTimeout>
 8106dd2:	4603      	mov	r3, r0
 8106dd4:	2b00      	cmp	r3, #0
 8106dd6:	d03c      	beq.n	8106e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	681b      	ldr	r3, [r3, #0]
 8106ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106de0:	e853 3f00 	ldrex	r3, [r3]
 8106de4:	623b      	str	r3, [r7, #32]
   return(result);
 8106de6:	6a3b      	ldr	r3, [r7, #32]
 8106de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	681b      	ldr	r3, [r3, #0]
 8106df2:	461a      	mov	r2, r3
 8106df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8106df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8106dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106dfe:	e841 2300 	strex	r3, r2, [r1]
 8106e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8106e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e06:	2b00      	cmp	r3, #0
 8106e08:	d1e6      	bne.n	8106dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	3308      	adds	r3, #8
 8106e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e12:	693b      	ldr	r3, [r7, #16]
 8106e14:	e853 3f00 	ldrex	r3, [r3]
 8106e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8106e1a:	68fb      	ldr	r3, [r7, #12]
 8106e1c:	f023 0301 	bic.w	r3, r3, #1
 8106e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	3308      	adds	r3, #8
 8106e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106e2a:	61fa      	str	r2, [r7, #28]
 8106e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e2e:	69b9      	ldr	r1, [r7, #24]
 8106e30:	69fa      	ldr	r2, [r7, #28]
 8106e32:	e841 2300 	strex	r3, r2, [r1]
 8106e36:	617b      	str	r3, [r7, #20]
   return(result);
 8106e38:	697b      	ldr	r3, [r7, #20]
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d1e5      	bne.n	8106e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	2220      	movs	r2, #32
 8106e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	2200      	movs	r2, #0
 8106e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106e4e:	2303      	movs	r3, #3
 8106e50:	e012      	b.n	8106e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106e52:	687b      	ldr	r3, [r7, #4]
 8106e54:	2220      	movs	r2, #32
 8106e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	2220      	movs	r2, #32
 8106e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	2200      	movs	r2, #0
 8106e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	2200      	movs	r2, #0
 8106e6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	2200      	movs	r2, #0
 8106e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106e76:	2300      	movs	r3, #0
}
 8106e78:	4618      	mov	r0, r3
 8106e7a:	3758      	adds	r7, #88	@ 0x58
 8106e7c:	46bd      	mov	sp, r7
 8106e7e:	bd80      	pop	{r7, pc}

08106e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106e80:	b580      	push	{r7, lr}
 8106e82:	b084      	sub	sp, #16
 8106e84:	af00      	add	r7, sp, #0
 8106e86:	60f8      	str	r0, [r7, #12]
 8106e88:	60b9      	str	r1, [r7, #8]
 8106e8a:	603b      	str	r3, [r7, #0]
 8106e8c:	4613      	mov	r3, r2
 8106e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106e90:	e04f      	b.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106e92:	69bb      	ldr	r3, [r7, #24]
 8106e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e98:	d04b      	beq.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106e9a:	f7fb f85f 	bl	8101f5c <HAL_GetTick>
 8106e9e:	4602      	mov	r2, r0
 8106ea0:	683b      	ldr	r3, [r7, #0]
 8106ea2:	1ad3      	subs	r3, r2, r3
 8106ea4:	69ba      	ldr	r2, [r7, #24]
 8106ea6:	429a      	cmp	r2, r3
 8106ea8:	d302      	bcc.n	8106eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8106eaa:	69bb      	ldr	r3, [r7, #24]
 8106eac:	2b00      	cmp	r3, #0
 8106eae:	d101      	bne.n	8106eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106eb0:	2303      	movs	r3, #3
 8106eb2:	e04e      	b.n	8106f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106eb4:	68fb      	ldr	r3, [r7, #12]
 8106eb6:	681b      	ldr	r3, [r3, #0]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	f003 0304 	and.w	r3, r3, #4
 8106ebe:	2b00      	cmp	r3, #0
 8106ec0:	d037      	beq.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106ec2:	68bb      	ldr	r3, [r7, #8]
 8106ec4:	2b80      	cmp	r3, #128	@ 0x80
 8106ec6:	d034      	beq.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106ec8:	68bb      	ldr	r3, [r7, #8]
 8106eca:	2b40      	cmp	r3, #64	@ 0x40
 8106ecc:	d031      	beq.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106ece:	68fb      	ldr	r3, [r7, #12]
 8106ed0:	681b      	ldr	r3, [r3, #0]
 8106ed2:	69db      	ldr	r3, [r3, #28]
 8106ed4:	f003 0308 	and.w	r3, r3, #8
 8106ed8:	2b08      	cmp	r3, #8
 8106eda:	d110      	bne.n	8106efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106edc:	68fb      	ldr	r3, [r7, #12]
 8106ede:	681b      	ldr	r3, [r3, #0]
 8106ee0:	2208      	movs	r2, #8
 8106ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106ee4:	68f8      	ldr	r0, [r7, #12]
 8106ee6:	f000 f838 	bl	8106f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	2208      	movs	r2, #8
 8106eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106ef2:	68fb      	ldr	r3, [r7, #12]
 8106ef4:	2200      	movs	r2, #0
 8106ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8106efa:	2301      	movs	r3, #1
 8106efc:	e029      	b.n	8106f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106efe:	68fb      	ldr	r3, [r7, #12]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	69db      	ldr	r3, [r3, #28]
 8106f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8106f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106f0c:	d111      	bne.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106f0e:	68fb      	ldr	r3, [r7, #12]
 8106f10:	681b      	ldr	r3, [r3, #0]
 8106f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8106f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106f18:	68f8      	ldr	r0, [r7, #12]
 8106f1a:	f000 f81e 	bl	8106f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106f1e:	68fb      	ldr	r3, [r7, #12]
 8106f20:	2220      	movs	r2, #32
 8106f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106f26:	68fb      	ldr	r3, [r7, #12]
 8106f28:	2200      	movs	r2, #0
 8106f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8106f2e:	2303      	movs	r3, #3
 8106f30:	e00f      	b.n	8106f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106f32:	68fb      	ldr	r3, [r7, #12]
 8106f34:	681b      	ldr	r3, [r3, #0]
 8106f36:	69da      	ldr	r2, [r3, #28]
 8106f38:	68bb      	ldr	r3, [r7, #8]
 8106f3a:	4013      	ands	r3, r2
 8106f3c:	68ba      	ldr	r2, [r7, #8]
 8106f3e:	429a      	cmp	r2, r3
 8106f40:	bf0c      	ite	eq
 8106f42:	2301      	moveq	r3, #1
 8106f44:	2300      	movne	r3, #0
 8106f46:	b2db      	uxtb	r3, r3
 8106f48:	461a      	mov	r2, r3
 8106f4a:	79fb      	ldrb	r3, [r7, #7]
 8106f4c:	429a      	cmp	r2, r3
 8106f4e:	d0a0      	beq.n	8106e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106f50:	2300      	movs	r3, #0
}
 8106f52:	4618      	mov	r0, r3
 8106f54:	3710      	adds	r7, #16
 8106f56:	46bd      	mov	sp, r7
 8106f58:	bd80      	pop	{r7, pc}

08106f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106f5a:	b480      	push	{r7}
 8106f5c:	b095      	sub	sp, #84	@ 0x54
 8106f5e:	af00      	add	r7, sp, #0
 8106f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f6a:	e853 3f00 	ldrex	r3, [r3]
 8106f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8106f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	461a      	mov	r2, r3
 8106f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8106f82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106f88:	e841 2300 	strex	r3, r2, [r1]
 8106f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f90:	2b00      	cmp	r3, #0
 8106f92:	d1e6      	bne.n	8106f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	681b      	ldr	r3, [r3, #0]
 8106f98:	3308      	adds	r3, #8
 8106f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106f9c:	6a3b      	ldr	r3, [r7, #32]
 8106f9e:	e853 3f00 	ldrex	r3, [r3]
 8106fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8106fa4:	69fb      	ldr	r3, [r7, #28]
 8106fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106faa:	f023 0301 	bic.w	r3, r3, #1
 8106fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	3308      	adds	r3, #8
 8106fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106fc0:	e841 2300 	strex	r3, r2, [r1]
 8106fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8106fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106fc8:	2b00      	cmp	r3, #0
 8106fca:	d1e3      	bne.n	8106f94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106fd0:	2b01      	cmp	r3, #1
 8106fd2:	d118      	bne.n	8107006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106fda:	68fb      	ldr	r3, [r7, #12]
 8106fdc:	e853 3f00 	ldrex	r3, [r3]
 8106fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8106fe2:	68bb      	ldr	r3, [r7, #8]
 8106fe4:	f023 0310 	bic.w	r3, r3, #16
 8106fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	681b      	ldr	r3, [r3, #0]
 8106fee:	461a      	mov	r2, r3
 8106ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106ff2:	61bb      	str	r3, [r7, #24]
 8106ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ff6:	6979      	ldr	r1, [r7, #20]
 8106ff8:	69ba      	ldr	r2, [r7, #24]
 8106ffa:	e841 2300 	strex	r3, r2, [r1]
 8106ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8107000:	693b      	ldr	r3, [r7, #16]
 8107002:	2b00      	cmp	r3, #0
 8107004:	d1e6      	bne.n	8106fd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	2220      	movs	r2, #32
 810700a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	2200      	movs	r2, #0
 8107012:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	2200      	movs	r2, #0
 8107018:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810701a:	bf00      	nop
 810701c:	3754      	adds	r7, #84	@ 0x54
 810701e:	46bd      	mov	sp, r7
 8107020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107024:	4770      	bx	lr

08107026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8107026:	b480      	push	{r7}
 8107028:	b085      	sub	sp, #20
 810702a:	af00      	add	r7, sp, #0
 810702c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8107034:	2b01      	cmp	r3, #1
 8107036:	d101      	bne.n	810703c <HAL_UARTEx_DisableFifoMode+0x16>
 8107038:	2302      	movs	r3, #2
 810703a:	e027      	b.n	810708c <HAL_UARTEx_DisableFifoMode+0x66>
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	2201      	movs	r2, #1
 8107040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	2224      	movs	r2, #36	@ 0x24
 8107048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	681b      	ldr	r3, [r3, #0]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	681b      	ldr	r3, [r3, #0]
 8107058:	681a      	ldr	r2, [r3, #0]
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	f022 0201 	bic.w	r2, r2, #1
 8107062:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107064:	68fb      	ldr	r3, [r7, #12]
 8107066:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810706a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	2200      	movs	r2, #0
 8107070:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	681b      	ldr	r3, [r3, #0]
 8107076:	68fa      	ldr	r2, [r7, #12]
 8107078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	2220      	movs	r2, #32
 810707e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	2200      	movs	r2, #0
 8107086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810708a:	2300      	movs	r3, #0
}
 810708c:	4618      	mov	r0, r3
 810708e:	3714      	adds	r7, #20
 8107090:	46bd      	mov	sp, r7
 8107092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107096:	4770      	bx	lr

08107098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107098:	b580      	push	{r7, lr}
 810709a:	b084      	sub	sp, #16
 810709c:	af00      	add	r7, sp, #0
 810709e:	6078      	str	r0, [r7, #4]
 81070a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81070a8:	2b01      	cmp	r3, #1
 81070aa:	d101      	bne.n	81070b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81070ac:	2302      	movs	r3, #2
 81070ae:	e02d      	b.n	810710c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	2201      	movs	r2, #1
 81070b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	2224      	movs	r2, #36	@ 0x24
 81070bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	681b      	ldr	r3, [r3, #0]
 81070c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	681a      	ldr	r2, [r3, #0]
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f022 0201 	bic.w	r2, r2, #1
 81070d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	689b      	ldr	r3, [r3, #8]
 81070de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	683a      	ldr	r2, [r7, #0]
 81070e8:	430a      	orrs	r2, r1
 81070ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81070ec:	6878      	ldr	r0, [r7, #4]
 81070ee:	f000 f84f 	bl	8107190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	68fa      	ldr	r2, [r7, #12]
 81070f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81070fa:	687b      	ldr	r3, [r7, #4]
 81070fc:	2220      	movs	r2, #32
 81070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	2200      	movs	r2, #0
 8107106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810710a:	2300      	movs	r3, #0
}
 810710c:	4618      	mov	r0, r3
 810710e:	3710      	adds	r7, #16
 8107110:	46bd      	mov	sp, r7
 8107112:	bd80      	pop	{r7, pc}

08107114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107114:	b580      	push	{r7, lr}
 8107116:	b084      	sub	sp, #16
 8107118:	af00      	add	r7, sp, #0
 810711a:	6078      	str	r0, [r7, #4]
 810711c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8107124:	2b01      	cmp	r3, #1
 8107126:	d101      	bne.n	810712c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107128:	2302      	movs	r3, #2
 810712a:	e02d      	b.n	8107188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	2201      	movs	r2, #1
 8107130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	2224      	movs	r2, #36	@ 0x24
 8107138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	681b      	ldr	r3, [r3, #0]
 8107142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	681a      	ldr	r2, [r3, #0]
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	f022 0201 	bic.w	r2, r2, #1
 8107152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	689b      	ldr	r3, [r3, #8]
 810715a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	683a      	ldr	r2, [r7, #0]
 8107164:	430a      	orrs	r2, r1
 8107166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107168:	6878      	ldr	r0, [r7, #4]
 810716a:	f000 f811 	bl	8107190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	681b      	ldr	r3, [r3, #0]
 8107172:	68fa      	ldr	r2, [r7, #12]
 8107174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	2220      	movs	r2, #32
 810717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	2200      	movs	r2, #0
 8107182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8107186:	2300      	movs	r3, #0
}
 8107188:	4618      	mov	r0, r3
 810718a:	3710      	adds	r7, #16
 810718c:	46bd      	mov	sp, r7
 810718e:	bd80      	pop	{r7, pc}

08107190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8107190:	b480      	push	{r7}
 8107192:	b085      	sub	sp, #20
 8107194:	af00      	add	r7, sp, #0
 8107196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810719c:	2b00      	cmp	r3, #0
 810719e:	d108      	bne.n	81071b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	2201      	movs	r2, #1
 81071a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	2201      	movs	r2, #1
 81071ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81071b0:	e031      	b.n	8107216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81071b2:	2310      	movs	r3, #16
 81071b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81071b6:	2310      	movs	r3, #16
 81071b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	681b      	ldr	r3, [r3, #0]
 81071be:	689b      	ldr	r3, [r3, #8]
 81071c0:	0e5b      	lsrs	r3, r3, #25
 81071c2:	b2db      	uxtb	r3, r3
 81071c4:	f003 0307 	and.w	r3, r3, #7
 81071c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	681b      	ldr	r3, [r3, #0]
 81071ce:	689b      	ldr	r3, [r3, #8]
 81071d0:	0f5b      	lsrs	r3, r3, #29
 81071d2:	b2db      	uxtb	r3, r3
 81071d4:	f003 0307 	and.w	r3, r3, #7
 81071d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81071da:	7bbb      	ldrb	r3, [r7, #14]
 81071dc:	7b3a      	ldrb	r2, [r7, #12]
 81071de:	4911      	ldr	r1, [pc, #68]	@ (8107224 <UARTEx_SetNbDataToProcess+0x94>)
 81071e0:	5c8a      	ldrb	r2, [r1, r2]
 81071e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81071e6:	7b3a      	ldrb	r2, [r7, #12]
 81071e8:	490f      	ldr	r1, [pc, #60]	@ (8107228 <UARTEx_SetNbDataToProcess+0x98>)
 81071ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81071ec:	fb93 f3f2 	sdiv	r3, r3, r2
 81071f0:	b29a      	uxth	r2, r3
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81071f8:	7bfb      	ldrb	r3, [r7, #15]
 81071fa:	7b7a      	ldrb	r2, [r7, #13]
 81071fc:	4909      	ldr	r1, [pc, #36]	@ (8107224 <UARTEx_SetNbDataToProcess+0x94>)
 81071fe:	5c8a      	ldrb	r2, [r1, r2]
 8107200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8107204:	7b7a      	ldrb	r2, [r7, #13]
 8107206:	4908      	ldr	r1, [pc, #32]	@ (8107228 <UARTEx_SetNbDataToProcess+0x98>)
 8107208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810720a:	fb93 f3f2 	sdiv	r3, r3, r2
 810720e:	b29a      	uxth	r2, r3
 8107210:	687b      	ldr	r3, [r7, #4]
 8107212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8107216:	bf00      	nop
 8107218:	3714      	adds	r7, #20
 810721a:	46bd      	mov	sp, r7
 810721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107220:	4770      	bx	lr
 8107222:	bf00      	nop
 8107224:	0810b9a8 	.word	0x0810b9a8
 8107228:	0810b9b0 	.word	0x0810b9b0

0810722c <__cvt>:
 810722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107230:	ec57 6b10 	vmov	r6, r7, d0
 8107234:	2f00      	cmp	r7, #0
 8107236:	460c      	mov	r4, r1
 8107238:	4619      	mov	r1, r3
 810723a:	463b      	mov	r3, r7
 810723c:	bfbb      	ittet	lt
 810723e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8107242:	461f      	movlt	r7, r3
 8107244:	2300      	movge	r3, #0
 8107246:	232d      	movlt	r3, #45	@ 0x2d
 8107248:	700b      	strb	r3, [r1, #0]
 810724a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810724c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8107250:	4691      	mov	r9, r2
 8107252:	f023 0820 	bic.w	r8, r3, #32
 8107256:	bfbc      	itt	lt
 8107258:	4632      	movlt	r2, r6
 810725a:	4616      	movlt	r6, r2
 810725c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8107260:	d005      	beq.n	810726e <__cvt+0x42>
 8107262:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8107266:	d100      	bne.n	810726a <__cvt+0x3e>
 8107268:	3401      	adds	r4, #1
 810726a:	2102      	movs	r1, #2
 810726c:	e000      	b.n	8107270 <__cvt+0x44>
 810726e:	2103      	movs	r1, #3
 8107270:	ab03      	add	r3, sp, #12
 8107272:	9301      	str	r3, [sp, #4]
 8107274:	ab02      	add	r3, sp, #8
 8107276:	9300      	str	r3, [sp, #0]
 8107278:	ec47 6b10 	vmov	d0, r6, r7
 810727c:	4653      	mov	r3, sl
 810727e:	4622      	mov	r2, r4
 8107280:	f001 f882 	bl	8108388 <_dtoa_r>
 8107284:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8107288:	4605      	mov	r5, r0
 810728a:	d119      	bne.n	81072c0 <__cvt+0x94>
 810728c:	f019 0f01 	tst.w	r9, #1
 8107290:	d00e      	beq.n	81072b0 <__cvt+0x84>
 8107292:	eb00 0904 	add.w	r9, r0, r4
 8107296:	2200      	movs	r2, #0
 8107298:	2300      	movs	r3, #0
 810729a:	4630      	mov	r0, r6
 810729c:	4639      	mov	r1, r7
 810729e:	f7f9 fc9b 	bl	8100bd8 <__aeabi_dcmpeq>
 81072a2:	b108      	cbz	r0, 81072a8 <__cvt+0x7c>
 81072a4:	f8cd 900c 	str.w	r9, [sp, #12]
 81072a8:	2230      	movs	r2, #48	@ 0x30
 81072aa:	9b03      	ldr	r3, [sp, #12]
 81072ac:	454b      	cmp	r3, r9
 81072ae:	d31e      	bcc.n	81072ee <__cvt+0xc2>
 81072b0:	9b03      	ldr	r3, [sp, #12]
 81072b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81072b4:	1b5b      	subs	r3, r3, r5
 81072b6:	4628      	mov	r0, r5
 81072b8:	6013      	str	r3, [r2, #0]
 81072ba:	b004      	add	sp, #16
 81072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81072c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81072c4:	eb00 0904 	add.w	r9, r0, r4
 81072c8:	d1e5      	bne.n	8107296 <__cvt+0x6a>
 81072ca:	7803      	ldrb	r3, [r0, #0]
 81072cc:	2b30      	cmp	r3, #48	@ 0x30
 81072ce:	d10a      	bne.n	81072e6 <__cvt+0xba>
 81072d0:	2200      	movs	r2, #0
 81072d2:	2300      	movs	r3, #0
 81072d4:	4630      	mov	r0, r6
 81072d6:	4639      	mov	r1, r7
 81072d8:	f7f9 fc7e 	bl	8100bd8 <__aeabi_dcmpeq>
 81072dc:	b918      	cbnz	r0, 81072e6 <__cvt+0xba>
 81072de:	f1c4 0401 	rsb	r4, r4, #1
 81072e2:	f8ca 4000 	str.w	r4, [sl]
 81072e6:	f8da 3000 	ldr.w	r3, [sl]
 81072ea:	4499      	add	r9, r3
 81072ec:	e7d3      	b.n	8107296 <__cvt+0x6a>
 81072ee:	1c59      	adds	r1, r3, #1
 81072f0:	9103      	str	r1, [sp, #12]
 81072f2:	701a      	strb	r2, [r3, #0]
 81072f4:	e7d9      	b.n	81072aa <__cvt+0x7e>

081072f6 <__exponent>:
 81072f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81072f8:	2900      	cmp	r1, #0
 81072fa:	bfba      	itte	lt
 81072fc:	4249      	neglt	r1, r1
 81072fe:	232d      	movlt	r3, #45	@ 0x2d
 8107300:	232b      	movge	r3, #43	@ 0x2b
 8107302:	2909      	cmp	r1, #9
 8107304:	7002      	strb	r2, [r0, #0]
 8107306:	7043      	strb	r3, [r0, #1]
 8107308:	dd29      	ble.n	810735e <__exponent+0x68>
 810730a:	f10d 0307 	add.w	r3, sp, #7
 810730e:	461d      	mov	r5, r3
 8107310:	270a      	movs	r7, #10
 8107312:	461a      	mov	r2, r3
 8107314:	fbb1 f6f7 	udiv	r6, r1, r7
 8107318:	fb07 1416 	mls	r4, r7, r6, r1
 810731c:	3430      	adds	r4, #48	@ 0x30
 810731e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8107322:	460c      	mov	r4, r1
 8107324:	2c63      	cmp	r4, #99	@ 0x63
 8107326:	f103 33ff 	add.w	r3, r3, #4294967295
 810732a:	4631      	mov	r1, r6
 810732c:	dcf1      	bgt.n	8107312 <__exponent+0x1c>
 810732e:	3130      	adds	r1, #48	@ 0x30
 8107330:	1e94      	subs	r4, r2, #2
 8107332:	f803 1c01 	strb.w	r1, [r3, #-1]
 8107336:	1c41      	adds	r1, r0, #1
 8107338:	4623      	mov	r3, r4
 810733a:	42ab      	cmp	r3, r5
 810733c:	d30a      	bcc.n	8107354 <__exponent+0x5e>
 810733e:	f10d 0309 	add.w	r3, sp, #9
 8107342:	1a9b      	subs	r3, r3, r2
 8107344:	42ac      	cmp	r4, r5
 8107346:	bf88      	it	hi
 8107348:	2300      	movhi	r3, #0
 810734a:	3302      	adds	r3, #2
 810734c:	4403      	add	r3, r0
 810734e:	1a18      	subs	r0, r3, r0
 8107350:	b003      	add	sp, #12
 8107352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107354:	f813 6b01 	ldrb.w	r6, [r3], #1
 8107358:	f801 6f01 	strb.w	r6, [r1, #1]!
 810735c:	e7ed      	b.n	810733a <__exponent+0x44>
 810735e:	2330      	movs	r3, #48	@ 0x30
 8107360:	3130      	adds	r1, #48	@ 0x30
 8107362:	7083      	strb	r3, [r0, #2]
 8107364:	70c1      	strb	r1, [r0, #3]
 8107366:	1d03      	adds	r3, r0, #4
 8107368:	e7f1      	b.n	810734e <__exponent+0x58>
	...

0810736c <_printf_float>:
 810736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107370:	b08d      	sub	sp, #52	@ 0x34
 8107372:	460c      	mov	r4, r1
 8107374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8107378:	4616      	mov	r6, r2
 810737a:	461f      	mov	r7, r3
 810737c:	4605      	mov	r5, r0
 810737e:	f000 fefb 	bl	8108178 <_localeconv_r>
 8107382:	6803      	ldr	r3, [r0, #0]
 8107384:	9304      	str	r3, [sp, #16]
 8107386:	4618      	mov	r0, r3
 8107388:	f7f8 fffa 	bl	8100380 <strlen>
 810738c:	2300      	movs	r3, #0
 810738e:	930a      	str	r3, [sp, #40]	@ 0x28
 8107390:	f8d8 3000 	ldr.w	r3, [r8]
 8107394:	9005      	str	r0, [sp, #20]
 8107396:	3307      	adds	r3, #7
 8107398:	f023 0307 	bic.w	r3, r3, #7
 810739c:	f103 0208 	add.w	r2, r3, #8
 81073a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 81073a4:	f8d4 b000 	ldr.w	fp, [r4]
 81073a8:	f8c8 2000 	str.w	r2, [r8]
 81073ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 81073b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 81073b4:	9307      	str	r3, [sp, #28]
 81073b6:	f8cd 8018 	str.w	r8, [sp, #24]
 81073ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 81073be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81073c2:	4b9c      	ldr	r3, [pc, #624]	@ (8107634 <_printf_float+0x2c8>)
 81073c4:	f04f 32ff 	mov.w	r2, #4294967295
 81073c8:	f7f9 fc38 	bl	8100c3c <__aeabi_dcmpun>
 81073cc:	bb70      	cbnz	r0, 810742c <_printf_float+0xc0>
 81073ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81073d2:	4b98      	ldr	r3, [pc, #608]	@ (8107634 <_printf_float+0x2c8>)
 81073d4:	f04f 32ff 	mov.w	r2, #4294967295
 81073d8:	f7f9 fc12 	bl	8100c00 <__aeabi_dcmple>
 81073dc:	bb30      	cbnz	r0, 810742c <_printf_float+0xc0>
 81073de:	2200      	movs	r2, #0
 81073e0:	2300      	movs	r3, #0
 81073e2:	4640      	mov	r0, r8
 81073e4:	4649      	mov	r1, r9
 81073e6:	f7f9 fc01 	bl	8100bec <__aeabi_dcmplt>
 81073ea:	b110      	cbz	r0, 81073f2 <_printf_float+0x86>
 81073ec:	232d      	movs	r3, #45	@ 0x2d
 81073ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81073f2:	4a91      	ldr	r2, [pc, #580]	@ (8107638 <_printf_float+0x2cc>)
 81073f4:	4b91      	ldr	r3, [pc, #580]	@ (810763c <_printf_float+0x2d0>)
 81073f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81073fa:	bf8c      	ite	hi
 81073fc:	4690      	movhi	r8, r2
 81073fe:	4698      	movls	r8, r3
 8107400:	2303      	movs	r3, #3
 8107402:	6123      	str	r3, [r4, #16]
 8107404:	f02b 0304 	bic.w	r3, fp, #4
 8107408:	6023      	str	r3, [r4, #0]
 810740a:	f04f 0900 	mov.w	r9, #0
 810740e:	9700      	str	r7, [sp, #0]
 8107410:	4633      	mov	r3, r6
 8107412:	aa0b      	add	r2, sp, #44	@ 0x2c
 8107414:	4621      	mov	r1, r4
 8107416:	4628      	mov	r0, r5
 8107418:	f000 f9d2 	bl	81077c0 <_printf_common>
 810741c:	3001      	adds	r0, #1
 810741e:	f040 808d 	bne.w	810753c <_printf_float+0x1d0>
 8107422:	f04f 30ff 	mov.w	r0, #4294967295
 8107426:	b00d      	add	sp, #52	@ 0x34
 8107428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810742c:	4642      	mov	r2, r8
 810742e:	464b      	mov	r3, r9
 8107430:	4640      	mov	r0, r8
 8107432:	4649      	mov	r1, r9
 8107434:	f7f9 fc02 	bl	8100c3c <__aeabi_dcmpun>
 8107438:	b140      	cbz	r0, 810744c <_printf_float+0xe0>
 810743a:	464b      	mov	r3, r9
 810743c:	2b00      	cmp	r3, #0
 810743e:	bfbc      	itt	lt
 8107440:	232d      	movlt	r3, #45	@ 0x2d
 8107442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8107446:	4a7e      	ldr	r2, [pc, #504]	@ (8107640 <_printf_float+0x2d4>)
 8107448:	4b7e      	ldr	r3, [pc, #504]	@ (8107644 <_printf_float+0x2d8>)
 810744a:	e7d4      	b.n	81073f6 <_printf_float+0x8a>
 810744c:	6863      	ldr	r3, [r4, #4]
 810744e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8107452:	9206      	str	r2, [sp, #24]
 8107454:	1c5a      	adds	r2, r3, #1
 8107456:	d13b      	bne.n	81074d0 <_printf_float+0x164>
 8107458:	2306      	movs	r3, #6
 810745a:	6063      	str	r3, [r4, #4]
 810745c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8107460:	2300      	movs	r3, #0
 8107462:	6022      	str	r2, [r4, #0]
 8107464:	9303      	str	r3, [sp, #12]
 8107466:	ab0a      	add	r3, sp, #40	@ 0x28
 8107468:	e9cd a301 	strd	sl, r3, [sp, #4]
 810746c:	ab09      	add	r3, sp, #36	@ 0x24
 810746e:	9300      	str	r3, [sp, #0]
 8107470:	6861      	ldr	r1, [r4, #4]
 8107472:	ec49 8b10 	vmov	d0, r8, r9
 8107476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810747a:	4628      	mov	r0, r5
 810747c:	f7ff fed6 	bl	810722c <__cvt>
 8107480:	9b06      	ldr	r3, [sp, #24]
 8107482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8107484:	2b47      	cmp	r3, #71	@ 0x47
 8107486:	4680      	mov	r8, r0
 8107488:	d129      	bne.n	81074de <_printf_float+0x172>
 810748a:	1cc8      	adds	r0, r1, #3
 810748c:	db02      	blt.n	8107494 <_printf_float+0x128>
 810748e:	6863      	ldr	r3, [r4, #4]
 8107490:	4299      	cmp	r1, r3
 8107492:	dd41      	ble.n	8107518 <_printf_float+0x1ac>
 8107494:	f1aa 0a02 	sub.w	sl, sl, #2
 8107498:	fa5f fa8a 	uxtb.w	sl, sl
 810749c:	3901      	subs	r1, #1
 810749e:	4652      	mov	r2, sl
 81074a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 81074a4:	9109      	str	r1, [sp, #36]	@ 0x24
 81074a6:	f7ff ff26 	bl	81072f6 <__exponent>
 81074aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 81074ac:	1813      	adds	r3, r2, r0
 81074ae:	2a01      	cmp	r2, #1
 81074b0:	4681      	mov	r9, r0
 81074b2:	6123      	str	r3, [r4, #16]
 81074b4:	dc02      	bgt.n	81074bc <_printf_float+0x150>
 81074b6:	6822      	ldr	r2, [r4, #0]
 81074b8:	07d2      	lsls	r2, r2, #31
 81074ba:	d501      	bpl.n	81074c0 <_printf_float+0x154>
 81074bc:	3301      	adds	r3, #1
 81074be:	6123      	str	r3, [r4, #16]
 81074c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 81074c4:	2b00      	cmp	r3, #0
 81074c6:	d0a2      	beq.n	810740e <_printf_float+0xa2>
 81074c8:	232d      	movs	r3, #45	@ 0x2d
 81074ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81074ce:	e79e      	b.n	810740e <_printf_float+0xa2>
 81074d0:	9a06      	ldr	r2, [sp, #24]
 81074d2:	2a47      	cmp	r2, #71	@ 0x47
 81074d4:	d1c2      	bne.n	810745c <_printf_float+0xf0>
 81074d6:	2b00      	cmp	r3, #0
 81074d8:	d1c0      	bne.n	810745c <_printf_float+0xf0>
 81074da:	2301      	movs	r3, #1
 81074dc:	e7bd      	b.n	810745a <_printf_float+0xee>
 81074de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81074e2:	d9db      	bls.n	810749c <_printf_float+0x130>
 81074e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 81074e8:	d118      	bne.n	810751c <_printf_float+0x1b0>
 81074ea:	2900      	cmp	r1, #0
 81074ec:	6863      	ldr	r3, [r4, #4]
 81074ee:	dd0b      	ble.n	8107508 <_printf_float+0x19c>
 81074f0:	6121      	str	r1, [r4, #16]
 81074f2:	b913      	cbnz	r3, 81074fa <_printf_float+0x18e>
 81074f4:	6822      	ldr	r2, [r4, #0]
 81074f6:	07d0      	lsls	r0, r2, #31
 81074f8:	d502      	bpl.n	8107500 <_printf_float+0x194>
 81074fa:	3301      	adds	r3, #1
 81074fc:	440b      	add	r3, r1
 81074fe:	6123      	str	r3, [r4, #16]
 8107500:	65a1      	str	r1, [r4, #88]	@ 0x58
 8107502:	f04f 0900 	mov.w	r9, #0
 8107506:	e7db      	b.n	81074c0 <_printf_float+0x154>
 8107508:	b913      	cbnz	r3, 8107510 <_printf_float+0x1a4>
 810750a:	6822      	ldr	r2, [r4, #0]
 810750c:	07d2      	lsls	r2, r2, #31
 810750e:	d501      	bpl.n	8107514 <_printf_float+0x1a8>
 8107510:	3302      	adds	r3, #2
 8107512:	e7f4      	b.n	81074fe <_printf_float+0x192>
 8107514:	2301      	movs	r3, #1
 8107516:	e7f2      	b.n	81074fe <_printf_float+0x192>
 8107518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810751c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810751e:	4299      	cmp	r1, r3
 8107520:	db05      	blt.n	810752e <_printf_float+0x1c2>
 8107522:	6823      	ldr	r3, [r4, #0]
 8107524:	6121      	str	r1, [r4, #16]
 8107526:	07d8      	lsls	r0, r3, #31
 8107528:	d5ea      	bpl.n	8107500 <_printf_float+0x194>
 810752a:	1c4b      	adds	r3, r1, #1
 810752c:	e7e7      	b.n	81074fe <_printf_float+0x192>
 810752e:	2900      	cmp	r1, #0
 8107530:	bfd4      	ite	le
 8107532:	f1c1 0202 	rsble	r2, r1, #2
 8107536:	2201      	movgt	r2, #1
 8107538:	4413      	add	r3, r2
 810753a:	e7e0      	b.n	81074fe <_printf_float+0x192>
 810753c:	6823      	ldr	r3, [r4, #0]
 810753e:	055a      	lsls	r2, r3, #21
 8107540:	d407      	bmi.n	8107552 <_printf_float+0x1e6>
 8107542:	6923      	ldr	r3, [r4, #16]
 8107544:	4642      	mov	r2, r8
 8107546:	4631      	mov	r1, r6
 8107548:	4628      	mov	r0, r5
 810754a:	47b8      	blx	r7
 810754c:	3001      	adds	r0, #1
 810754e:	d12b      	bne.n	81075a8 <_printf_float+0x23c>
 8107550:	e767      	b.n	8107422 <_printf_float+0xb6>
 8107552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8107556:	f240 80dd 	bls.w	8107714 <_printf_float+0x3a8>
 810755a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810755e:	2200      	movs	r2, #0
 8107560:	2300      	movs	r3, #0
 8107562:	f7f9 fb39 	bl	8100bd8 <__aeabi_dcmpeq>
 8107566:	2800      	cmp	r0, #0
 8107568:	d033      	beq.n	81075d2 <_printf_float+0x266>
 810756a:	4a37      	ldr	r2, [pc, #220]	@ (8107648 <_printf_float+0x2dc>)
 810756c:	2301      	movs	r3, #1
 810756e:	4631      	mov	r1, r6
 8107570:	4628      	mov	r0, r5
 8107572:	47b8      	blx	r7
 8107574:	3001      	adds	r0, #1
 8107576:	f43f af54 	beq.w	8107422 <_printf_float+0xb6>
 810757a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810757e:	4543      	cmp	r3, r8
 8107580:	db02      	blt.n	8107588 <_printf_float+0x21c>
 8107582:	6823      	ldr	r3, [r4, #0]
 8107584:	07d8      	lsls	r0, r3, #31
 8107586:	d50f      	bpl.n	81075a8 <_printf_float+0x23c>
 8107588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810758c:	4631      	mov	r1, r6
 810758e:	4628      	mov	r0, r5
 8107590:	47b8      	blx	r7
 8107592:	3001      	adds	r0, #1
 8107594:	f43f af45 	beq.w	8107422 <_printf_float+0xb6>
 8107598:	f04f 0900 	mov.w	r9, #0
 810759c:	f108 38ff 	add.w	r8, r8, #4294967295
 81075a0:	f104 0a1a 	add.w	sl, r4, #26
 81075a4:	45c8      	cmp	r8, r9
 81075a6:	dc09      	bgt.n	81075bc <_printf_float+0x250>
 81075a8:	6823      	ldr	r3, [r4, #0]
 81075aa:	079b      	lsls	r3, r3, #30
 81075ac:	f100 8103 	bmi.w	81077b6 <_printf_float+0x44a>
 81075b0:	68e0      	ldr	r0, [r4, #12]
 81075b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81075b4:	4298      	cmp	r0, r3
 81075b6:	bfb8      	it	lt
 81075b8:	4618      	movlt	r0, r3
 81075ba:	e734      	b.n	8107426 <_printf_float+0xba>
 81075bc:	2301      	movs	r3, #1
 81075be:	4652      	mov	r2, sl
 81075c0:	4631      	mov	r1, r6
 81075c2:	4628      	mov	r0, r5
 81075c4:	47b8      	blx	r7
 81075c6:	3001      	adds	r0, #1
 81075c8:	f43f af2b 	beq.w	8107422 <_printf_float+0xb6>
 81075cc:	f109 0901 	add.w	r9, r9, #1
 81075d0:	e7e8      	b.n	81075a4 <_printf_float+0x238>
 81075d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81075d4:	2b00      	cmp	r3, #0
 81075d6:	dc39      	bgt.n	810764c <_printf_float+0x2e0>
 81075d8:	4a1b      	ldr	r2, [pc, #108]	@ (8107648 <_printf_float+0x2dc>)
 81075da:	2301      	movs	r3, #1
 81075dc:	4631      	mov	r1, r6
 81075de:	4628      	mov	r0, r5
 81075e0:	47b8      	blx	r7
 81075e2:	3001      	adds	r0, #1
 81075e4:	f43f af1d 	beq.w	8107422 <_printf_float+0xb6>
 81075e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 81075ec:	ea59 0303 	orrs.w	r3, r9, r3
 81075f0:	d102      	bne.n	81075f8 <_printf_float+0x28c>
 81075f2:	6823      	ldr	r3, [r4, #0]
 81075f4:	07d9      	lsls	r1, r3, #31
 81075f6:	d5d7      	bpl.n	81075a8 <_printf_float+0x23c>
 81075f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81075fc:	4631      	mov	r1, r6
 81075fe:	4628      	mov	r0, r5
 8107600:	47b8      	blx	r7
 8107602:	3001      	adds	r0, #1
 8107604:	f43f af0d 	beq.w	8107422 <_printf_float+0xb6>
 8107608:	f04f 0a00 	mov.w	sl, #0
 810760c:	f104 0b1a 	add.w	fp, r4, #26
 8107610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107612:	425b      	negs	r3, r3
 8107614:	4553      	cmp	r3, sl
 8107616:	dc01      	bgt.n	810761c <_printf_float+0x2b0>
 8107618:	464b      	mov	r3, r9
 810761a:	e793      	b.n	8107544 <_printf_float+0x1d8>
 810761c:	2301      	movs	r3, #1
 810761e:	465a      	mov	r2, fp
 8107620:	4631      	mov	r1, r6
 8107622:	4628      	mov	r0, r5
 8107624:	47b8      	blx	r7
 8107626:	3001      	adds	r0, #1
 8107628:	f43f aefb 	beq.w	8107422 <_printf_float+0xb6>
 810762c:	f10a 0a01 	add.w	sl, sl, #1
 8107630:	e7ee      	b.n	8107610 <_printf_float+0x2a4>
 8107632:	bf00      	nop
 8107634:	7fefffff 	.word	0x7fefffff
 8107638:	0810b9bc 	.word	0x0810b9bc
 810763c:	0810b9b8 	.word	0x0810b9b8
 8107640:	0810b9c4 	.word	0x0810b9c4
 8107644:	0810b9c0 	.word	0x0810b9c0
 8107648:	0810b9c8 	.word	0x0810b9c8
 810764c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810764e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8107652:	4553      	cmp	r3, sl
 8107654:	bfa8      	it	ge
 8107656:	4653      	movge	r3, sl
 8107658:	2b00      	cmp	r3, #0
 810765a:	4699      	mov	r9, r3
 810765c:	dc36      	bgt.n	81076cc <_printf_float+0x360>
 810765e:	f04f 0b00 	mov.w	fp, #0
 8107662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107666:	f104 021a 	add.w	r2, r4, #26
 810766a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810766c:	9306      	str	r3, [sp, #24]
 810766e:	eba3 0309 	sub.w	r3, r3, r9
 8107672:	455b      	cmp	r3, fp
 8107674:	dc31      	bgt.n	81076da <_printf_float+0x36e>
 8107676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107678:	459a      	cmp	sl, r3
 810767a:	dc3a      	bgt.n	81076f2 <_printf_float+0x386>
 810767c:	6823      	ldr	r3, [r4, #0]
 810767e:	07da      	lsls	r2, r3, #31
 8107680:	d437      	bmi.n	81076f2 <_printf_float+0x386>
 8107682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107684:	ebaa 0903 	sub.w	r9, sl, r3
 8107688:	9b06      	ldr	r3, [sp, #24]
 810768a:	ebaa 0303 	sub.w	r3, sl, r3
 810768e:	4599      	cmp	r9, r3
 8107690:	bfa8      	it	ge
 8107692:	4699      	movge	r9, r3
 8107694:	f1b9 0f00 	cmp.w	r9, #0
 8107698:	dc33      	bgt.n	8107702 <_printf_float+0x396>
 810769a:	f04f 0800 	mov.w	r8, #0
 810769e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81076a2:	f104 0b1a 	add.w	fp, r4, #26
 81076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81076a8:	ebaa 0303 	sub.w	r3, sl, r3
 81076ac:	eba3 0309 	sub.w	r3, r3, r9
 81076b0:	4543      	cmp	r3, r8
 81076b2:	f77f af79 	ble.w	81075a8 <_printf_float+0x23c>
 81076b6:	2301      	movs	r3, #1
 81076b8:	465a      	mov	r2, fp
 81076ba:	4631      	mov	r1, r6
 81076bc:	4628      	mov	r0, r5
 81076be:	47b8      	blx	r7
 81076c0:	3001      	adds	r0, #1
 81076c2:	f43f aeae 	beq.w	8107422 <_printf_float+0xb6>
 81076c6:	f108 0801 	add.w	r8, r8, #1
 81076ca:	e7ec      	b.n	81076a6 <_printf_float+0x33a>
 81076cc:	4642      	mov	r2, r8
 81076ce:	4631      	mov	r1, r6
 81076d0:	4628      	mov	r0, r5
 81076d2:	47b8      	blx	r7
 81076d4:	3001      	adds	r0, #1
 81076d6:	d1c2      	bne.n	810765e <_printf_float+0x2f2>
 81076d8:	e6a3      	b.n	8107422 <_printf_float+0xb6>
 81076da:	2301      	movs	r3, #1
 81076dc:	4631      	mov	r1, r6
 81076de:	4628      	mov	r0, r5
 81076e0:	9206      	str	r2, [sp, #24]
 81076e2:	47b8      	blx	r7
 81076e4:	3001      	adds	r0, #1
 81076e6:	f43f ae9c 	beq.w	8107422 <_printf_float+0xb6>
 81076ea:	9a06      	ldr	r2, [sp, #24]
 81076ec:	f10b 0b01 	add.w	fp, fp, #1
 81076f0:	e7bb      	b.n	810766a <_printf_float+0x2fe>
 81076f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81076f6:	4631      	mov	r1, r6
 81076f8:	4628      	mov	r0, r5
 81076fa:	47b8      	blx	r7
 81076fc:	3001      	adds	r0, #1
 81076fe:	d1c0      	bne.n	8107682 <_printf_float+0x316>
 8107700:	e68f      	b.n	8107422 <_printf_float+0xb6>
 8107702:	9a06      	ldr	r2, [sp, #24]
 8107704:	464b      	mov	r3, r9
 8107706:	4442      	add	r2, r8
 8107708:	4631      	mov	r1, r6
 810770a:	4628      	mov	r0, r5
 810770c:	47b8      	blx	r7
 810770e:	3001      	adds	r0, #1
 8107710:	d1c3      	bne.n	810769a <_printf_float+0x32e>
 8107712:	e686      	b.n	8107422 <_printf_float+0xb6>
 8107714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8107718:	f1ba 0f01 	cmp.w	sl, #1
 810771c:	dc01      	bgt.n	8107722 <_printf_float+0x3b6>
 810771e:	07db      	lsls	r3, r3, #31
 8107720:	d536      	bpl.n	8107790 <_printf_float+0x424>
 8107722:	2301      	movs	r3, #1
 8107724:	4642      	mov	r2, r8
 8107726:	4631      	mov	r1, r6
 8107728:	4628      	mov	r0, r5
 810772a:	47b8      	blx	r7
 810772c:	3001      	adds	r0, #1
 810772e:	f43f ae78 	beq.w	8107422 <_printf_float+0xb6>
 8107732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8107736:	4631      	mov	r1, r6
 8107738:	4628      	mov	r0, r5
 810773a:	47b8      	blx	r7
 810773c:	3001      	adds	r0, #1
 810773e:	f43f ae70 	beq.w	8107422 <_printf_float+0xb6>
 8107742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8107746:	2200      	movs	r2, #0
 8107748:	2300      	movs	r3, #0
 810774a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810774e:	f7f9 fa43 	bl	8100bd8 <__aeabi_dcmpeq>
 8107752:	b9c0      	cbnz	r0, 8107786 <_printf_float+0x41a>
 8107754:	4653      	mov	r3, sl
 8107756:	f108 0201 	add.w	r2, r8, #1
 810775a:	4631      	mov	r1, r6
 810775c:	4628      	mov	r0, r5
 810775e:	47b8      	blx	r7
 8107760:	3001      	adds	r0, #1
 8107762:	d10c      	bne.n	810777e <_printf_float+0x412>
 8107764:	e65d      	b.n	8107422 <_printf_float+0xb6>
 8107766:	2301      	movs	r3, #1
 8107768:	465a      	mov	r2, fp
 810776a:	4631      	mov	r1, r6
 810776c:	4628      	mov	r0, r5
 810776e:	47b8      	blx	r7
 8107770:	3001      	adds	r0, #1
 8107772:	f43f ae56 	beq.w	8107422 <_printf_float+0xb6>
 8107776:	f108 0801 	add.w	r8, r8, #1
 810777a:	45d0      	cmp	r8, sl
 810777c:	dbf3      	blt.n	8107766 <_printf_float+0x3fa>
 810777e:	464b      	mov	r3, r9
 8107780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8107784:	e6df      	b.n	8107546 <_printf_float+0x1da>
 8107786:	f04f 0800 	mov.w	r8, #0
 810778a:	f104 0b1a 	add.w	fp, r4, #26
 810778e:	e7f4      	b.n	810777a <_printf_float+0x40e>
 8107790:	2301      	movs	r3, #1
 8107792:	4642      	mov	r2, r8
 8107794:	e7e1      	b.n	810775a <_printf_float+0x3ee>
 8107796:	2301      	movs	r3, #1
 8107798:	464a      	mov	r2, r9
 810779a:	4631      	mov	r1, r6
 810779c:	4628      	mov	r0, r5
 810779e:	47b8      	blx	r7
 81077a0:	3001      	adds	r0, #1
 81077a2:	f43f ae3e 	beq.w	8107422 <_printf_float+0xb6>
 81077a6:	f108 0801 	add.w	r8, r8, #1
 81077aa:	68e3      	ldr	r3, [r4, #12]
 81077ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81077ae:	1a5b      	subs	r3, r3, r1
 81077b0:	4543      	cmp	r3, r8
 81077b2:	dcf0      	bgt.n	8107796 <_printf_float+0x42a>
 81077b4:	e6fc      	b.n	81075b0 <_printf_float+0x244>
 81077b6:	f04f 0800 	mov.w	r8, #0
 81077ba:	f104 0919 	add.w	r9, r4, #25
 81077be:	e7f4      	b.n	81077aa <_printf_float+0x43e>

081077c0 <_printf_common>:
 81077c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81077c4:	4616      	mov	r6, r2
 81077c6:	4698      	mov	r8, r3
 81077c8:	688a      	ldr	r2, [r1, #8]
 81077ca:	690b      	ldr	r3, [r1, #16]
 81077cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81077d0:	4293      	cmp	r3, r2
 81077d2:	bfb8      	it	lt
 81077d4:	4613      	movlt	r3, r2
 81077d6:	6033      	str	r3, [r6, #0]
 81077d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 81077dc:	4607      	mov	r7, r0
 81077de:	460c      	mov	r4, r1
 81077e0:	b10a      	cbz	r2, 81077e6 <_printf_common+0x26>
 81077e2:	3301      	adds	r3, #1
 81077e4:	6033      	str	r3, [r6, #0]
 81077e6:	6823      	ldr	r3, [r4, #0]
 81077e8:	0699      	lsls	r1, r3, #26
 81077ea:	bf42      	ittt	mi
 81077ec:	6833      	ldrmi	r3, [r6, #0]
 81077ee:	3302      	addmi	r3, #2
 81077f0:	6033      	strmi	r3, [r6, #0]
 81077f2:	6825      	ldr	r5, [r4, #0]
 81077f4:	f015 0506 	ands.w	r5, r5, #6
 81077f8:	d106      	bne.n	8107808 <_printf_common+0x48>
 81077fa:	f104 0a19 	add.w	sl, r4, #25
 81077fe:	68e3      	ldr	r3, [r4, #12]
 8107800:	6832      	ldr	r2, [r6, #0]
 8107802:	1a9b      	subs	r3, r3, r2
 8107804:	42ab      	cmp	r3, r5
 8107806:	dc26      	bgt.n	8107856 <_printf_common+0x96>
 8107808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810780c:	6822      	ldr	r2, [r4, #0]
 810780e:	3b00      	subs	r3, #0
 8107810:	bf18      	it	ne
 8107812:	2301      	movne	r3, #1
 8107814:	0692      	lsls	r2, r2, #26
 8107816:	d42b      	bmi.n	8107870 <_printf_common+0xb0>
 8107818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810781c:	4641      	mov	r1, r8
 810781e:	4638      	mov	r0, r7
 8107820:	47c8      	blx	r9
 8107822:	3001      	adds	r0, #1
 8107824:	d01e      	beq.n	8107864 <_printf_common+0xa4>
 8107826:	6823      	ldr	r3, [r4, #0]
 8107828:	6922      	ldr	r2, [r4, #16]
 810782a:	f003 0306 	and.w	r3, r3, #6
 810782e:	2b04      	cmp	r3, #4
 8107830:	bf02      	ittt	eq
 8107832:	68e5      	ldreq	r5, [r4, #12]
 8107834:	6833      	ldreq	r3, [r6, #0]
 8107836:	1aed      	subeq	r5, r5, r3
 8107838:	68a3      	ldr	r3, [r4, #8]
 810783a:	bf0c      	ite	eq
 810783c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107840:	2500      	movne	r5, #0
 8107842:	4293      	cmp	r3, r2
 8107844:	bfc4      	itt	gt
 8107846:	1a9b      	subgt	r3, r3, r2
 8107848:	18ed      	addgt	r5, r5, r3
 810784a:	2600      	movs	r6, #0
 810784c:	341a      	adds	r4, #26
 810784e:	42b5      	cmp	r5, r6
 8107850:	d11a      	bne.n	8107888 <_printf_common+0xc8>
 8107852:	2000      	movs	r0, #0
 8107854:	e008      	b.n	8107868 <_printf_common+0xa8>
 8107856:	2301      	movs	r3, #1
 8107858:	4652      	mov	r2, sl
 810785a:	4641      	mov	r1, r8
 810785c:	4638      	mov	r0, r7
 810785e:	47c8      	blx	r9
 8107860:	3001      	adds	r0, #1
 8107862:	d103      	bne.n	810786c <_printf_common+0xac>
 8107864:	f04f 30ff 	mov.w	r0, #4294967295
 8107868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810786c:	3501      	adds	r5, #1
 810786e:	e7c6      	b.n	81077fe <_printf_common+0x3e>
 8107870:	18e1      	adds	r1, r4, r3
 8107872:	1c5a      	adds	r2, r3, #1
 8107874:	2030      	movs	r0, #48	@ 0x30
 8107876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810787a:	4422      	add	r2, r4
 810787c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8107880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8107884:	3302      	adds	r3, #2
 8107886:	e7c7      	b.n	8107818 <_printf_common+0x58>
 8107888:	2301      	movs	r3, #1
 810788a:	4622      	mov	r2, r4
 810788c:	4641      	mov	r1, r8
 810788e:	4638      	mov	r0, r7
 8107890:	47c8      	blx	r9
 8107892:	3001      	adds	r0, #1
 8107894:	d0e6      	beq.n	8107864 <_printf_common+0xa4>
 8107896:	3601      	adds	r6, #1
 8107898:	e7d9      	b.n	810784e <_printf_common+0x8e>
	...

0810789c <_printf_i>:
 810789c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81078a0:	7e0f      	ldrb	r7, [r1, #24]
 81078a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 81078a4:	2f78      	cmp	r7, #120	@ 0x78
 81078a6:	4691      	mov	r9, r2
 81078a8:	4680      	mov	r8, r0
 81078aa:	460c      	mov	r4, r1
 81078ac:	469a      	mov	sl, r3
 81078ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 81078b2:	d807      	bhi.n	81078c4 <_printf_i+0x28>
 81078b4:	2f62      	cmp	r7, #98	@ 0x62
 81078b6:	d80a      	bhi.n	81078ce <_printf_i+0x32>
 81078b8:	2f00      	cmp	r7, #0
 81078ba:	f000 80d1 	beq.w	8107a60 <_printf_i+0x1c4>
 81078be:	2f58      	cmp	r7, #88	@ 0x58
 81078c0:	f000 80b8 	beq.w	8107a34 <_printf_i+0x198>
 81078c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81078c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 81078cc:	e03a      	b.n	8107944 <_printf_i+0xa8>
 81078ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 81078d2:	2b15      	cmp	r3, #21
 81078d4:	d8f6      	bhi.n	81078c4 <_printf_i+0x28>
 81078d6:	a101      	add	r1, pc, #4	@ (adr r1, 81078dc <_printf_i+0x40>)
 81078d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81078dc:	08107935 	.word	0x08107935
 81078e0:	08107949 	.word	0x08107949
 81078e4:	081078c5 	.word	0x081078c5
 81078e8:	081078c5 	.word	0x081078c5
 81078ec:	081078c5 	.word	0x081078c5
 81078f0:	081078c5 	.word	0x081078c5
 81078f4:	08107949 	.word	0x08107949
 81078f8:	081078c5 	.word	0x081078c5
 81078fc:	081078c5 	.word	0x081078c5
 8107900:	081078c5 	.word	0x081078c5
 8107904:	081078c5 	.word	0x081078c5
 8107908:	08107a47 	.word	0x08107a47
 810790c:	08107973 	.word	0x08107973
 8107910:	08107a01 	.word	0x08107a01
 8107914:	081078c5 	.word	0x081078c5
 8107918:	081078c5 	.word	0x081078c5
 810791c:	08107a69 	.word	0x08107a69
 8107920:	081078c5 	.word	0x081078c5
 8107924:	08107973 	.word	0x08107973
 8107928:	081078c5 	.word	0x081078c5
 810792c:	081078c5 	.word	0x081078c5
 8107930:	08107a09 	.word	0x08107a09
 8107934:	6833      	ldr	r3, [r6, #0]
 8107936:	1d1a      	adds	r2, r3, #4
 8107938:	681b      	ldr	r3, [r3, #0]
 810793a:	6032      	str	r2, [r6, #0]
 810793c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8107940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8107944:	2301      	movs	r3, #1
 8107946:	e09c      	b.n	8107a82 <_printf_i+0x1e6>
 8107948:	6833      	ldr	r3, [r6, #0]
 810794a:	6820      	ldr	r0, [r4, #0]
 810794c:	1d19      	adds	r1, r3, #4
 810794e:	6031      	str	r1, [r6, #0]
 8107950:	0606      	lsls	r6, r0, #24
 8107952:	d501      	bpl.n	8107958 <_printf_i+0xbc>
 8107954:	681d      	ldr	r5, [r3, #0]
 8107956:	e003      	b.n	8107960 <_printf_i+0xc4>
 8107958:	0645      	lsls	r5, r0, #25
 810795a:	d5fb      	bpl.n	8107954 <_printf_i+0xb8>
 810795c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8107960:	2d00      	cmp	r5, #0
 8107962:	da03      	bge.n	810796c <_printf_i+0xd0>
 8107964:	232d      	movs	r3, #45	@ 0x2d
 8107966:	426d      	negs	r5, r5
 8107968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810796c:	4858      	ldr	r0, [pc, #352]	@ (8107ad0 <_printf_i+0x234>)
 810796e:	230a      	movs	r3, #10
 8107970:	e011      	b.n	8107996 <_printf_i+0xfa>
 8107972:	6821      	ldr	r1, [r4, #0]
 8107974:	6833      	ldr	r3, [r6, #0]
 8107976:	0608      	lsls	r0, r1, #24
 8107978:	f853 5b04 	ldr.w	r5, [r3], #4
 810797c:	d402      	bmi.n	8107984 <_printf_i+0xe8>
 810797e:	0649      	lsls	r1, r1, #25
 8107980:	bf48      	it	mi
 8107982:	b2ad      	uxthmi	r5, r5
 8107984:	2f6f      	cmp	r7, #111	@ 0x6f
 8107986:	4852      	ldr	r0, [pc, #328]	@ (8107ad0 <_printf_i+0x234>)
 8107988:	6033      	str	r3, [r6, #0]
 810798a:	bf14      	ite	ne
 810798c:	230a      	movne	r3, #10
 810798e:	2308      	moveq	r3, #8
 8107990:	2100      	movs	r1, #0
 8107992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8107996:	6866      	ldr	r6, [r4, #4]
 8107998:	60a6      	str	r6, [r4, #8]
 810799a:	2e00      	cmp	r6, #0
 810799c:	db05      	blt.n	81079aa <_printf_i+0x10e>
 810799e:	6821      	ldr	r1, [r4, #0]
 81079a0:	432e      	orrs	r6, r5
 81079a2:	f021 0104 	bic.w	r1, r1, #4
 81079a6:	6021      	str	r1, [r4, #0]
 81079a8:	d04b      	beq.n	8107a42 <_printf_i+0x1a6>
 81079aa:	4616      	mov	r6, r2
 81079ac:	fbb5 f1f3 	udiv	r1, r5, r3
 81079b0:	fb03 5711 	mls	r7, r3, r1, r5
 81079b4:	5dc7      	ldrb	r7, [r0, r7]
 81079b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81079ba:	462f      	mov	r7, r5
 81079bc:	42bb      	cmp	r3, r7
 81079be:	460d      	mov	r5, r1
 81079c0:	d9f4      	bls.n	81079ac <_printf_i+0x110>
 81079c2:	2b08      	cmp	r3, #8
 81079c4:	d10b      	bne.n	81079de <_printf_i+0x142>
 81079c6:	6823      	ldr	r3, [r4, #0]
 81079c8:	07df      	lsls	r7, r3, #31
 81079ca:	d508      	bpl.n	81079de <_printf_i+0x142>
 81079cc:	6923      	ldr	r3, [r4, #16]
 81079ce:	6861      	ldr	r1, [r4, #4]
 81079d0:	4299      	cmp	r1, r3
 81079d2:	bfde      	ittt	le
 81079d4:	2330      	movle	r3, #48	@ 0x30
 81079d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 81079da:	f106 36ff 	addle.w	r6, r6, #4294967295
 81079de:	1b92      	subs	r2, r2, r6
 81079e0:	6122      	str	r2, [r4, #16]
 81079e2:	f8cd a000 	str.w	sl, [sp]
 81079e6:	464b      	mov	r3, r9
 81079e8:	aa03      	add	r2, sp, #12
 81079ea:	4621      	mov	r1, r4
 81079ec:	4640      	mov	r0, r8
 81079ee:	f7ff fee7 	bl	81077c0 <_printf_common>
 81079f2:	3001      	adds	r0, #1
 81079f4:	d14a      	bne.n	8107a8c <_printf_i+0x1f0>
 81079f6:	f04f 30ff 	mov.w	r0, #4294967295
 81079fa:	b004      	add	sp, #16
 81079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107a00:	6823      	ldr	r3, [r4, #0]
 8107a02:	f043 0320 	orr.w	r3, r3, #32
 8107a06:	6023      	str	r3, [r4, #0]
 8107a08:	4832      	ldr	r0, [pc, #200]	@ (8107ad4 <_printf_i+0x238>)
 8107a0a:	2778      	movs	r7, #120	@ 0x78
 8107a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8107a10:	6823      	ldr	r3, [r4, #0]
 8107a12:	6831      	ldr	r1, [r6, #0]
 8107a14:	061f      	lsls	r7, r3, #24
 8107a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8107a1a:	d402      	bmi.n	8107a22 <_printf_i+0x186>
 8107a1c:	065f      	lsls	r7, r3, #25
 8107a1e:	bf48      	it	mi
 8107a20:	b2ad      	uxthmi	r5, r5
 8107a22:	6031      	str	r1, [r6, #0]
 8107a24:	07d9      	lsls	r1, r3, #31
 8107a26:	bf44      	itt	mi
 8107a28:	f043 0320 	orrmi.w	r3, r3, #32
 8107a2c:	6023      	strmi	r3, [r4, #0]
 8107a2e:	b11d      	cbz	r5, 8107a38 <_printf_i+0x19c>
 8107a30:	2310      	movs	r3, #16
 8107a32:	e7ad      	b.n	8107990 <_printf_i+0xf4>
 8107a34:	4826      	ldr	r0, [pc, #152]	@ (8107ad0 <_printf_i+0x234>)
 8107a36:	e7e9      	b.n	8107a0c <_printf_i+0x170>
 8107a38:	6823      	ldr	r3, [r4, #0]
 8107a3a:	f023 0320 	bic.w	r3, r3, #32
 8107a3e:	6023      	str	r3, [r4, #0]
 8107a40:	e7f6      	b.n	8107a30 <_printf_i+0x194>
 8107a42:	4616      	mov	r6, r2
 8107a44:	e7bd      	b.n	81079c2 <_printf_i+0x126>
 8107a46:	6833      	ldr	r3, [r6, #0]
 8107a48:	6825      	ldr	r5, [r4, #0]
 8107a4a:	6961      	ldr	r1, [r4, #20]
 8107a4c:	1d18      	adds	r0, r3, #4
 8107a4e:	6030      	str	r0, [r6, #0]
 8107a50:	062e      	lsls	r6, r5, #24
 8107a52:	681b      	ldr	r3, [r3, #0]
 8107a54:	d501      	bpl.n	8107a5a <_printf_i+0x1be>
 8107a56:	6019      	str	r1, [r3, #0]
 8107a58:	e002      	b.n	8107a60 <_printf_i+0x1c4>
 8107a5a:	0668      	lsls	r0, r5, #25
 8107a5c:	d5fb      	bpl.n	8107a56 <_printf_i+0x1ba>
 8107a5e:	8019      	strh	r1, [r3, #0]
 8107a60:	2300      	movs	r3, #0
 8107a62:	6123      	str	r3, [r4, #16]
 8107a64:	4616      	mov	r6, r2
 8107a66:	e7bc      	b.n	81079e2 <_printf_i+0x146>
 8107a68:	6833      	ldr	r3, [r6, #0]
 8107a6a:	1d1a      	adds	r2, r3, #4
 8107a6c:	6032      	str	r2, [r6, #0]
 8107a6e:	681e      	ldr	r6, [r3, #0]
 8107a70:	6862      	ldr	r2, [r4, #4]
 8107a72:	2100      	movs	r1, #0
 8107a74:	4630      	mov	r0, r6
 8107a76:	f7f8 fc33 	bl	81002e0 <memchr>
 8107a7a:	b108      	cbz	r0, 8107a80 <_printf_i+0x1e4>
 8107a7c:	1b80      	subs	r0, r0, r6
 8107a7e:	6060      	str	r0, [r4, #4]
 8107a80:	6863      	ldr	r3, [r4, #4]
 8107a82:	6123      	str	r3, [r4, #16]
 8107a84:	2300      	movs	r3, #0
 8107a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8107a8a:	e7aa      	b.n	81079e2 <_printf_i+0x146>
 8107a8c:	6923      	ldr	r3, [r4, #16]
 8107a8e:	4632      	mov	r2, r6
 8107a90:	4649      	mov	r1, r9
 8107a92:	4640      	mov	r0, r8
 8107a94:	47d0      	blx	sl
 8107a96:	3001      	adds	r0, #1
 8107a98:	d0ad      	beq.n	81079f6 <_printf_i+0x15a>
 8107a9a:	6823      	ldr	r3, [r4, #0]
 8107a9c:	079b      	lsls	r3, r3, #30
 8107a9e:	d413      	bmi.n	8107ac8 <_printf_i+0x22c>
 8107aa0:	68e0      	ldr	r0, [r4, #12]
 8107aa2:	9b03      	ldr	r3, [sp, #12]
 8107aa4:	4298      	cmp	r0, r3
 8107aa6:	bfb8      	it	lt
 8107aa8:	4618      	movlt	r0, r3
 8107aaa:	e7a6      	b.n	81079fa <_printf_i+0x15e>
 8107aac:	2301      	movs	r3, #1
 8107aae:	4632      	mov	r2, r6
 8107ab0:	4649      	mov	r1, r9
 8107ab2:	4640      	mov	r0, r8
 8107ab4:	47d0      	blx	sl
 8107ab6:	3001      	adds	r0, #1
 8107ab8:	d09d      	beq.n	81079f6 <_printf_i+0x15a>
 8107aba:	3501      	adds	r5, #1
 8107abc:	68e3      	ldr	r3, [r4, #12]
 8107abe:	9903      	ldr	r1, [sp, #12]
 8107ac0:	1a5b      	subs	r3, r3, r1
 8107ac2:	42ab      	cmp	r3, r5
 8107ac4:	dcf2      	bgt.n	8107aac <_printf_i+0x210>
 8107ac6:	e7eb      	b.n	8107aa0 <_printf_i+0x204>
 8107ac8:	2500      	movs	r5, #0
 8107aca:	f104 0619 	add.w	r6, r4, #25
 8107ace:	e7f5      	b.n	8107abc <_printf_i+0x220>
 8107ad0:	0810b9ca 	.word	0x0810b9ca
 8107ad4:	0810b9db 	.word	0x0810b9db

08107ad8 <_scanf_float>:
 8107ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107adc:	b087      	sub	sp, #28
 8107ade:	4691      	mov	r9, r2
 8107ae0:	9303      	str	r3, [sp, #12]
 8107ae2:	688b      	ldr	r3, [r1, #8]
 8107ae4:	1e5a      	subs	r2, r3, #1
 8107ae6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8107aea:	bf81      	itttt	hi
 8107aec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8107af0:	eb03 0b05 	addhi.w	fp, r3, r5
 8107af4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8107af8:	608b      	strhi	r3, [r1, #8]
 8107afa:	680b      	ldr	r3, [r1, #0]
 8107afc:	460a      	mov	r2, r1
 8107afe:	f04f 0500 	mov.w	r5, #0
 8107b02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8107b06:	f842 3b1c 	str.w	r3, [r2], #28
 8107b0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107b0e:	4680      	mov	r8, r0
 8107b10:	460c      	mov	r4, r1
 8107b12:	bf98      	it	ls
 8107b14:	f04f 0b00 	movls.w	fp, #0
 8107b18:	9201      	str	r2, [sp, #4]
 8107b1a:	4616      	mov	r6, r2
 8107b1c:	46aa      	mov	sl, r5
 8107b1e:	462f      	mov	r7, r5
 8107b20:	9502      	str	r5, [sp, #8]
 8107b22:	68a2      	ldr	r2, [r4, #8]
 8107b24:	b15a      	cbz	r2, 8107b3e <_scanf_float+0x66>
 8107b26:	f8d9 3000 	ldr.w	r3, [r9]
 8107b2a:	781b      	ldrb	r3, [r3, #0]
 8107b2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8107b2e:	d863      	bhi.n	8107bf8 <_scanf_float+0x120>
 8107b30:	2b40      	cmp	r3, #64	@ 0x40
 8107b32:	d83b      	bhi.n	8107bac <_scanf_float+0xd4>
 8107b34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8107b38:	b2c8      	uxtb	r0, r1
 8107b3a:	280e      	cmp	r0, #14
 8107b3c:	d939      	bls.n	8107bb2 <_scanf_float+0xda>
 8107b3e:	b11f      	cbz	r7, 8107b48 <_scanf_float+0x70>
 8107b40:	6823      	ldr	r3, [r4, #0]
 8107b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107b46:	6023      	str	r3, [r4, #0]
 8107b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107b4c:	f1ba 0f01 	cmp.w	sl, #1
 8107b50:	f200 8114 	bhi.w	8107d7c <_scanf_float+0x2a4>
 8107b54:	9b01      	ldr	r3, [sp, #4]
 8107b56:	429e      	cmp	r6, r3
 8107b58:	f200 8105 	bhi.w	8107d66 <_scanf_float+0x28e>
 8107b5c:	2001      	movs	r0, #1
 8107b5e:	b007      	add	sp, #28
 8107b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107b64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8107b68:	2a0d      	cmp	r2, #13
 8107b6a:	d8e8      	bhi.n	8107b3e <_scanf_float+0x66>
 8107b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8107b74 <_scanf_float+0x9c>)
 8107b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8107b72:	bf00      	nop
 8107b74:	08107cbd 	.word	0x08107cbd
 8107b78:	08107b3f 	.word	0x08107b3f
 8107b7c:	08107b3f 	.word	0x08107b3f
 8107b80:	08107b3f 	.word	0x08107b3f
 8107b84:	08107d19 	.word	0x08107d19
 8107b88:	08107cf3 	.word	0x08107cf3
 8107b8c:	08107b3f 	.word	0x08107b3f
 8107b90:	08107b3f 	.word	0x08107b3f
 8107b94:	08107ccb 	.word	0x08107ccb
 8107b98:	08107b3f 	.word	0x08107b3f
 8107b9c:	08107b3f 	.word	0x08107b3f
 8107ba0:	08107b3f 	.word	0x08107b3f
 8107ba4:	08107b3f 	.word	0x08107b3f
 8107ba8:	08107c87 	.word	0x08107c87
 8107bac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8107bb0:	e7da      	b.n	8107b68 <_scanf_float+0x90>
 8107bb2:	290e      	cmp	r1, #14
 8107bb4:	d8c3      	bhi.n	8107b3e <_scanf_float+0x66>
 8107bb6:	a001      	add	r0, pc, #4	@ (adr r0, 8107bbc <_scanf_float+0xe4>)
 8107bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8107bbc:	08107c77 	.word	0x08107c77
 8107bc0:	08107b3f 	.word	0x08107b3f
 8107bc4:	08107c77 	.word	0x08107c77
 8107bc8:	08107d07 	.word	0x08107d07
 8107bcc:	08107b3f 	.word	0x08107b3f
 8107bd0:	08107c19 	.word	0x08107c19
 8107bd4:	08107c5d 	.word	0x08107c5d
 8107bd8:	08107c5d 	.word	0x08107c5d
 8107bdc:	08107c5d 	.word	0x08107c5d
 8107be0:	08107c5d 	.word	0x08107c5d
 8107be4:	08107c5d 	.word	0x08107c5d
 8107be8:	08107c5d 	.word	0x08107c5d
 8107bec:	08107c5d 	.word	0x08107c5d
 8107bf0:	08107c5d 	.word	0x08107c5d
 8107bf4:	08107c5d 	.word	0x08107c5d
 8107bf8:	2b6e      	cmp	r3, #110	@ 0x6e
 8107bfa:	d809      	bhi.n	8107c10 <_scanf_float+0x138>
 8107bfc:	2b60      	cmp	r3, #96	@ 0x60
 8107bfe:	d8b1      	bhi.n	8107b64 <_scanf_float+0x8c>
 8107c00:	2b54      	cmp	r3, #84	@ 0x54
 8107c02:	d07b      	beq.n	8107cfc <_scanf_float+0x224>
 8107c04:	2b59      	cmp	r3, #89	@ 0x59
 8107c06:	d19a      	bne.n	8107b3e <_scanf_float+0x66>
 8107c08:	2d07      	cmp	r5, #7
 8107c0a:	d198      	bne.n	8107b3e <_scanf_float+0x66>
 8107c0c:	2508      	movs	r5, #8
 8107c0e:	e02f      	b.n	8107c70 <_scanf_float+0x198>
 8107c10:	2b74      	cmp	r3, #116	@ 0x74
 8107c12:	d073      	beq.n	8107cfc <_scanf_float+0x224>
 8107c14:	2b79      	cmp	r3, #121	@ 0x79
 8107c16:	e7f6      	b.n	8107c06 <_scanf_float+0x12e>
 8107c18:	6821      	ldr	r1, [r4, #0]
 8107c1a:	05c8      	lsls	r0, r1, #23
 8107c1c:	d51e      	bpl.n	8107c5c <_scanf_float+0x184>
 8107c1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8107c22:	6021      	str	r1, [r4, #0]
 8107c24:	3701      	adds	r7, #1
 8107c26:	f1bb 0f00 	cmp.w	fp, #0
 8107c2a:	d003      	beq.n	8107c34 <_scanf_float+0x15c>
 8107c2c:	3201      	adds	r2, #1
 8107c2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8107c32:	60a2      	str	r2, [r4, #8]
 8107c34:	68a3      	ldr	r3, [r4, #8]
 8107c36:	3b01      	subs	r3, #1
 8107c38:	60a3      	str	r3, [r4, #8]
 8107c3a:	6923      	ldr	r3, [r4, #16]
 8107c3c:	3301      	adds	r3, #1
 8107c3e:	6123      	str	r3, [r4, #16]
 8107c40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8107c44:	3b01      	subs	r3, #1
 8107c46:	2b00      	cmp	r3, #0
 8107c48:	f8c9 3004 	str.w	r3, [r9, #4]
 8107c4c:	f340 8082 	ble.w	8107d54 <_scanf_float+0x27c>
 8107c50:	f8d9 3000 	ldr.w	r3, [r9]
 8107c54:	3301      	adds	r3, #1
 8107c56:	f8c9 3000 	str.w	r3, [r9]
 8107c5a:	e762      	b.n	8107b22 <_scanf_float+0x4a>
 8107c5c:	eb1a 0105 	adds.w	r1, sl, r5
 8107c60:	f47f af6d 	bne.w	8107b3e <_scanf_float+0x66>
 8107c64:	6822      	ldr	r2, [r4, #0]
 8107c66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8107c6a:	6022      	str	r2, [r4, #0]
 8107c6c:	460d      	mov	r5, r1
 8107c6e:	468a      	mov	sl, r1
 8107c70:	f806 3b01 	strb.w	r3, [r6], #1
 8107c74:	e7de      	b.n	8107c34 <_scanf_float+0x15c>
 8107c76:	6822      	ldr	r2, [r4, #0]
 8107c78:	0610      	lsls	r0, r2, #24
 8107c7a:	f57f af60 	bpl.w	8107b3e <_scanf_float+0x66>
 8107c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8107c82:	6022      	str	r2, [r4, #0]
 8107c84:	e7f4      	b.n	8107c70 <_scanf_float+0x198>
 8107c86:	f1ba 0f00 	cmp.w	sl, #0
 8107c8a:	d10c      	bne.n	8107ca6 <_scanf_float+0x1ce>
 8107c8c:	b977      	cbnz	r7, 8107cac <_scanf_float+0x1d4>
 8107c8e:	6822      	ldr	r2, [r4, #0]
 8107c90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8107c94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8107c98:	d108      	bne.n	8107cac <_scanf_float+0x1d4>
 8107c9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8107c9e:	6022      	str	r2, [r4, #0]
 8107ca0:	f04f 0a01 	mov.w	sl, #1
 8107ca4:	e7e4      	b.n	8107c70 <_scanf_float+0x198>
 8107ca6:	f1ba 0f02 	cmp.w	sl, #2
 8107caa:	d050      	beq.n	8107d4e <_scanf_float+0x276>
 8107cac:	2d01      	cmp	r5, #1
 8107cae:	d002      	beq.n	8107cb6 <_scanf_float+0x1de>
 8107cb0:	2d04      	cmp	r5, #4
 8107cb2:	f47f af44 	bne.w	8107b3e <_scanf_float+0x66>
 8107cb6:	3501      	adds	r5, #1
 8107cb8:	b2ed      	uxtb	r5, r5
 8107cba:	e7d9      	b.n	8107c70 <_scanf_float+0x198>
 8107cbc:	f1ba 0f01 	cmp.w	sl, #1
 8107cc0:	f47f af3d 	bne.w	8107b3e <_scanf_float+0x66>
 8107cc4:	f04f 0a02 	mov.w	sl, #2
 8107cc8:	e7d2      	b.n	8107c70 <_scanf_float+0x198>
 8107cca:	b975      	cbnz	r5, 8107cea <_scanf_float+0x212>
 8107ccc:	2f00      	cmp	r7, #0
 8107cce:	f47f af37 	bne.w	8107b40 <_scanf_float+0x68>
 8107cd2:	6822      	ldr	r2, [r4, #0]
 8107cd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8107cd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8107cdc:	f040 8103 	bne.w	8107ee6 <_scanf_float+0x40e>
 8107ce0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8107ce4:	6022      	str	r2, [r4, #0]
 8107ce6:	2501      	movs	r5, #1
 8107ce8:	e7c2      	b.n	8107c70 <_scanf_float+0x198>
 8107cea:	2d03      	cmp	r5, #3
 8107cec:	d0e3      	beq.n	8107cb6 <_scanf_float+0x1de>
 8107cee:	2d05      	cmp	r5, #5
 8107cf0:	e7df      	b.n	8107cb2 <_scanf_float+0x1da>
 8107cf2:	2d02      	cmp	r5, #2
 8107cf4:	f47f af23 	bne.w	8107b3e <_scanf_float+0x66>
 8107cf8:	2503      	movs	r5, #3
 8107cfa:	e7b9      	b.n	8107c70 <_scanf_float+0x198>
 8107cfc:	2d06      	cmp	r5, #6
 8107cfe:	f47f af1e 	bne.w	8107b3e <_scanf_float+0x66>
 8107d02:	2507      	movs	r5, #7
 8107d04:	e7b4      	b.n	8107c70 <_scanf_float+0x198>
 8107d06:	6822      	ldr	r2, [r4, #0]
 8107d08:	0591      	lsls	r1, r2, #22
 8107d0a:	f57f af18 	bpl.w	8107b3e <_scanf_float+0x66>
 8107d0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8107d12:	6022      	str	r2, [r4, #0]
 8107d14:	9702      	str	r7, [sp, #8]
 8107d16:	e7ab      	b.n	8107c70 <_scanf_float+0x198>
 8107d18:	6822      	ldr	r2, [r4, #0]
 8107d1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8107d1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8107d22:	d005      	beq.n	8107d30 <_scanf_float+0x258>
 8107d24:	0550      	lsls	r0, r2, #21
 8107d26:	f57f af0a 	bpl.w	8107b3e <_scanf_float+0x66>
 8107d2a:	2f00      	cmp	r7, #0
 8107d2c:	f000 80db 	beq.w	8107ee6 <_scanf_float+0x40e>
 8107d30:	0591      	lsls	r1, r2, #22
 8107d32:	bf58      	it	pl
 8107d34:	9902      	ldrpl	r1, [sp, #8]
 8107d36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8107d3a:	bf58      	it	pl
 8107d3c:	1a79      	subpl	r1, r7, r1
 8107d3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8107d42:	bf58      	it	pl
 8107d44:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8107d48:	6022      	str	r2, [r4, #0]
 8107d4a:	2700      	movs	r7, #0
 8107d4c:	e790      	b.n	8107c70 <_scanf_float+0x198>
 8107d4e:	f04f 0a03 	mov.w	sl, #3
 8107d52:	e78d      	b.n	8107c70 <_scanf_float+0x198>
 8107d54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8107d58:	4649      	mov	r1, r9
 8107d5a:	4640      	mov	r0, r8
 8107d5c:	4798      	blx	r3
 8107d5e:	2800      	cmp	r0, #0
 8107d60:	f43f aedf 	beq.w	8107b22 <_scanf_float+0x4a>
 8107d64:	e6eb      	b.n	8107b3e <_scanf_float+0x66>
 8107d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107d6e:	464a      	mov	r2, r9
 8107d70:	4640      	mov	r0, r8
 8107d72:	4798      	blx	r3
 8107d74:	6923      	ldr	r3, [r4, #16]
 8107d76:	3b01      	subs	r3, #1
 8107d78:	6123      	str	r3, [r4, #16]
 8107d7a:	e6eb      	b.n	8107b54 <_scanf_float+0x7c>
 8107d7c:	1e6b      	subs	r3, r5, #1
 8107d7e:	2b06      	cmp	r3, #6
 8107d80:	d824      	bhi.n	8107dcc <_scanf_float+0x2f4>
 8107d82:	2d02      	cmp	r5, #2
 8107d84:	d836      	bhi.n	8107df4 <_scanf_float+0x31c>
 8107d86:	9b01      	ldr	r3, [sp, #4]
 8107d88:	429e      	cmp	r6, r3
 8107d8a:	f67f aee7 	bls.w	8107b5c <_scanf_float+0x84>
 8107d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107d96:	464a      	mov	r2, r9
 8107d98:	4640      	mov	r0, r8
 8107d9a:	4798      	blx	r3
 8107d9c:	6923      	ldr	r3, [r4, #16]
 8107d9e:	3b01      	subs	r3, #1
 8107da0:	6123      	str	r3, [r4, #16]
 8107da2:	e7f0      	b.n	8107d86 <_scanf_float+0x2ae>
 8107da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107da8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8107dac:	464a      	mov	r2, r9
 8107dae:	4640      	mov	r0, r8
 8107db0:	4798      	blx	r3
 8107db2:	6923      	ldr	r3, [r4, #16]
 8107db4:	3b01      	subs	r3, #1
 8107db6:	6123      	str	r3, [r4, #16]
 8107db8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107dbc:	fa5f fa8a 	uxtb.w	sl, sl
 8107dc0:	f1ba 0f02 	cmp.w	sl, #2
 8107dc4:	d1ee      	bne.n	8107da4 <_scanf_float+0x2cc>
 8107dc6:	3d03      	subs	r5, #3
 8107dc8:	b2ed      	uxtb	r5, r5
 8107dca:	1b76      	subs	r6, r6, r5
 8107dcc:	6823      	ldr	r3, [r4, #0]
 8107dce:	05da      	lsls	r2, r3, #23
 8107dd0:	d530      	bpl.n	8107e34 <_scanf_float+0x35c>
 8107dd2:	055b      	lsls	r3, r3, #21
 8107dd4:	d511      	bpl.n	8107dfa <_scanf_float+0x322>
 8107dd6:	9b01      	ldr	r3, [sp, #4]
 8107dd8:	429e      	cmp	r6, r3
 8107dda:	f67f aebf 	bls.w	8107b5c <_scanf_float+0x84>
 8107dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107de6:	464a      	mov	r2, r9
 8107de8:	4640      	mov	r0, r8
 8107dea:	4798      	blx	r3
 8107dec:	6923      	ldr	r3, [r4, #16]
 8107dee:	3b01      	subs	r3, #1
 8107df0:	6123      	str	r3, [r4, #16]
 8107df2:	e7f0      	b.n	8107dd6 <_scanf_float+0x2fe>
 8107df4:	46aa      	mov	sl, r5
 8107df6:	46b3      	mov	fp, r6
 8107df8:	e7de      	b.n	8107db8 <_scanf_float+0x2e0>
 8107dfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8107dfe:	6923      	ldr	r3, [r4, #16]
 8107e00:	2965      	cmp	r1, #101	@ 0x65
 8107e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8107e06:	f106 35ff 	add.w	r5, r6, #4294967295
 8107e0a:	6123      	str	r3, [r4, #16]
 8107e0c:	d00c      	beq.n	8107e28 <_scanf_float+0x350>
 8107e0e:	2945      	cmp	r1, #69	@ 0x45
 8107e10:	d00a      	beq.n	8107e28 <_scanf_float+0x350>
 8107e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107e16:	464a      	mov	r2, r9
 8107e18:	4640      	mov	r0, r8
 8107e1a:	4798      	blx	r3
 8107e1c:	6923      	ldr	r3, [r4, #16]
 8107e1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8107e22:	3b01      	subs	r3, #1
 8107e24:	1eb5      	subs	r5, r6, #2
 8107e26:	6123      	str	r3, [r4, #16]
 8107e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8107e2c:	464a      	mov	r2, r9
 8107e2e:	4640      	mov	r0, r8
 8107e30:	4798      	blx	r3
 8107e32:	462e      	mov	r6, r5
 8107e34:	6822      	ldr	r2, [r4, #0]
 8107e36:	f012 0210 	ands.w	r2, r2, #16
 8107e3a:	d001      	beq.n	8107e40 <_scanf_float+0x368>
 8107e3c:	2000      	movs	r0, #0
 8107e3e:	e68e      	b.n	8107b5e <_scanf_float+0x86>
 8107e40:	7032      	strb	r2, [r6, #0]
 8107e42:	6823      	ldr	r3, [r4, #0]
 8107e44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8107e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107e4c:	d125      	bne.n	8107e9a <_scanf_float+0x3c2>
 8107e4e:	9b02      	ldr	r3, [sp, #8]
 8107e50:	429f      	cmp	r7, r3
 8107e52:	d00a      	beq.n	8107e6a <_scanf_float+0x392>
 8107e54:	1bda      	subs	r2, r3, r7
 8107e56:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8107e5a:	429e      	cmp	r6, r3
 8107e5c:	bf28      	it	cs
 8107e5e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8107e62:	4922      	ldr	r1, [pc, #136]	@ (8107eec <_scanf_float+0x414>)
 8107e64:	4630      	mov	r0, r6
 8107e66:	f000 f919 	bl	810809c <siprintf>
 8107e6a:	9901      	ldr	r1, [sp, #4]
 8107e6c:	2200      	movs	r2, #0
 8107e6e:	4640      	mov	r0, r8
 8107e70:	f002 fc06 	bl	810a680 <_strtod_r>
 8107e74:	9b03      	ldr	r3, [sp, #12]
 8107e76:	6821      	ldr	r1, [r4, #0]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	f011 0f02 	tst.w	r1, #2
 8107e7e:	ec57 6b10 	vmov	r6, r7, d0
 8107e82:	f103 0204 	add.w	r2, r3, #4
 8107e86:	d015      	beq.n	8107eb4 <_scanf_float+0x3dc>
 8107e88:	9903      	ldr	r1, [sp, #12]
 8107e8a:	600a      	str	r2, [r1, #0]
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	e9c3 6700 	strd	r6, r7, [r3]
 8107e92:	68e3      	ldr	r3, [r4, #12]
 8107e94:	3301      	adds	r3, #1
 8107e96:	60e3      	str	r3, [r4, #12]
 8107e98:	e7d0      	b.n	8107e3c <_scanf_float+0x364>
 8107e9a:	9b04      	ldr	r3, [sp, #16]
 8107e9c:	2b00      	cmp	r3, #0
 8107e9e:	d0e4      	beq.n	8107e6a <_scanf_float+0x392>
 8107ea0:	9905      	ldr	r1, [sp, #20]
 8107ea2:	230a      	movs	r3, #10
 8107ea4:	3101      	adds	r1, #1
 8107ea6:	4640      	mov	r0, r8
 8107ea8:	f002 fc6a 	bl	810a780 <_strtol_r>
 8107eac:	9b04      	ldr	r3, [sp, #16]
 8107eae:	9e05      	ldr	r6, [sp, #20]
 8107eb0:	1ac2      	subs	r2, r0, r3
 8107eb2:	e7d0      	b.n	8107e56 <_scanf_float+0x37e>
 8107eb4:	f011 0f04 	tst.w	r1, #4
 8107eb8:	9903      	ldr	r1, [sp, #12]
 8107eba:	600a      	str	r2, [r1, #0]
 8107ebc:	d1e6      	bne.n	8107e8c <_scanf_float+0x3b4>
 8107ebe:	681d      	ldr	r5, [r3, #0]
 8107ec0:	4632      	mov	r2, r6
 8107ec2:	463b      	mov	r3, r7
 8107ec4:	4630      	mov	r0, r6
 8107ec6:	4639      	mov	r1, r7
 8107ec8:	f7f8 feb8 	bl	8100c3c <__aeabi_dcmpun>
 8107ecc:	b128      	cbz	r0, 8107eda <_scanf_float+0x402>
 8107ece:	4808      	ldr	r0, [pc, #32]	@ (8107ef0 <_scanf_float+0x418>)
 8107ed0:	f000 f9ca 	bl	8108268 <nanf>
 8107ed4:	ed85 0a00 	vstr	s0, [r5]
 8107ed8:	e7db      	b.n	8107e92 <_scanf_float+0x3ba>
 8107eda:	4630      	mov	r0, r6
 8107edc:	4639      	mov	r1, r7
 8107ede:	f7f8 ff0b 	bl	8100cf8 <__aeabi_d2f>
 8107ee2:	6028      	str	r0, [r5, #0]
 8107ee4:	e7d5      	b.n	8107e92 <_scanf_float+0x3ba>
 8107ee6:	2700      	movs	r7, #0
 8107ee8:	e62e      	b.n	8107b48 <_scanf_float+0x70>
 8107eea:	bf00      	nop
 8107eec:	0810b9ec 	.word	0x0810b9ec
 8107ef0:	0810bb2d 	.word	0x0810bb2d

08107ef4 <std>:
 8107ef4:	2300      	movs	r3, #0
 8107ef6:	b510      	push	{r4, lr}
 8107ef8:	4604      	mov	r4, r0
 8107efa:	e9c0 3300 	strd	r3, r3, [r0]
 8107efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107f02:	6083      	str	r3, [r0, #8]
 8107f04:	8181      	strh	r1, [r0, #12]
 8107f06:	6643      	str	r3, [r0, #100]	@ 0x64
 8107f08:	81c2      	strh	r2, [r0, #14]
 8107f0a:	6183      	str	r3, [r0, #24]
 8107f0c:	4619      	mov	r1, r3
 8107f0e:	2208      	movs	r2, #8
 8107f10:	305c      	adds	r0, #92	@ 0x5c
 8107f12:	f000 f928 	bl	8108166 <memset>
 8107f16:	4b0d      	ldr	r3, [pc, #52]	@ (8107f4c <std+0x58>)
 8107f18:	6263      	str	r3, [r4, #36]	@ 0x24
 8107f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8107f50 <std+0x5c>)
 8107f1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8107f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8107f54 <std+0x60>)
 8107f20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8107f22:	4b0d      	ldr	r3, [pc, #52]	@ (8107f58 <std+0x64>)
 8107f24:	6323      	str	r3, [r4, #48]	@ 0x30
 8107f26:	4b0d      	ldr	r3, [pc, #52]	@ (8107f5c <std+0x68>)
 8107f28:	6224      	str	r4, [r4, #32]
 8107f2a:	429c      	cmp	r4, r3
 8107f2c:	d006      	beq.n	8107f3c <std+0x48>
 8107f2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8107f32:	4294      	cmp	r4, r2
 8107f34:	d002      	beq.n	8107f3c <std+0x48>
 8107f36:	33d0      	adds	r3, #208	@ 0xd0
 8107f38:	429c      	cmp	r4, r3
 8107f3a:	d105      	bne.n	8107f48 <std+0x54>
 8107f3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8107f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107f44:	f000 b98c 	b.w	8108260 <__retarget_lock_init_recursive>
 8107f48:	bd10      	pop	{r4, pc}
 8107f4a:	bf00      	nop
 8107f4c:	081080e1 	.word	0x081080e1
 8107f50:	08108103 	.word	0x08108103
 8107f54:	0810813b 	.word	0x0810813b
 8107f58:	0810815f 	.word	0x0810815f
 8107f5c:	100003b0 	.word	0x100003b0

08107f60 <stdio_exit_handler>:
 8107f60:	4a02      	ldr	r2, [pc, #8]	@ (8107f6c <stdio_exit_handler+0xc>)
 8107f62:	4903      	ldr	r1, [pc, #12]	@ (8107f70 <stdio_exit_handler+0x10>)
 8107f64:	4803      	ldr	r0, [pc, #12]	@ (8107f74 <stdio_exit_handler+0x14>)
 8107f66:	f000 b869 	b.w	810803c <_fwalk_sglue>
 8107f6a:	bf00      	nop
 8107f6c:	10000010 	.word	0x10000010
 8107f70:	0810adc1 	.word	0x0810adc1
 8107f74:	10000020 	.word	0x10000020

08107f78 <cleanup_stdio>:
 8107f78:	6841      	ldr	r1, [r0, #4]
 8107f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8107fac <cleanup_stdio+0x34>)
 8107f7c:	4299      	cmp	r1, r3
 8107f7e:	b510      	push	{r4, lr}
 8107f80:	4604      	mov	r4, r0
 8107f82:	d001      	beq.n	8107f88 <cleanup_stdio+0x10>
 8107f84:	f002 ff1c 	bl	810adc0 <_fflush_r>
 8107f88:	68a1      	ldr	r1, [r4, #8]
 8107f8a:	4b09      	ldr	r3, [pc, #36]	@ (8107fb0 <cleanup_stdio+0x38>)
 8107f8c:	4299      	cmp	r1, r3
 8107f8e:	d002      	beq.n	8107f96 <cleanup_stdio+0x1e>
 8107f90:	4620      	mov	r0, r4
 8107f92:	f002 ff15 	bl	810adc0 <_fflush_r>
 8107f96:	68e1      	ldr	r1, [r4, #12]
 8107f98:	4b06      	ldr	r3, [pc, #24]	@ (8107fb4 <cleanup_stdio+0x3c>)
 8107f9a:	4299      	cmp	r1, r3
 8107f9c:	d004      	beq.n	8107fa8 <cleanup_stdio+0x30>
 8107f9e:	4620      	mov	r0, r4
 8107fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107fa4:	f002 bf0c 	b.w	810adc0 <_fflush_r>
 8107fa8:	bd10      	pop	{r4, pc}
 8107faa:	bf00      	nop
 8107fac:	100003b0 	.word	0x100003b0
 8107fb0:	10000418 	.word	0x10000418
 8107fb4:	10000480 	.word	0x10000480

08107fb8 <global_stdio_init.part.0>:
 8107fb8:	b510      	push	{r4, lr}
 8107fba:	4b0b      	ldr	r3, [pc, #44]	@ (8107fe8 <global_stdio_init.part.0+0x30>)
 8107fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8107fec <global_stdio_init.part.0+0x34>)
 8107fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8107ff0 <global_stdio_init.part.0+0x38>)
 8107fc0:	601a      	str	r2, [r3, #0]
 8107fc2:	4620      	mov	r0, r4
 8107fc4:	2200      	movs	r2, #0
 8107fc6:	2104      	movs	r1, #4
 8107fc8:	f7ff ff94 	bl	8107ef4 <std>
 8107fcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8107fd0:	2201      	movs	r2, #1
 8107fd2:	2109      	movs	r1, #9
 8107fd4:	f7ff ff8e 	bl	8107ef4 <std>
 8107fd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8107fdc:	2202      	movs	r2, #2
 8107fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107fe2:	2112      	movs	r1, #18
 8107fe4:	f7ff bf86 	b.w	8107ef4 <std>
 8107fe8:	100004e8 	.word	0x100004e8
 8107fec:	100003b0 	.word	0x100003b0
 8107ff0:	08107f61 	.word	0x08107f61

08107ff4 <__sfp_lock_acquire>:
 8107ff4:	4801      	ldr	r0, [pc, #4]	@ (8107ffc <__sfp_lock_acquire+0x8>)
 8107ff6:	f000 b934 	b.w	8108262 <__retarget_lock_acquire_recursive>
 8107ffa:	bf00      	nop
 8107ffc:	100004f1 	.word	0x100004f1

08108000 <__sfp_lock_release>:
 8108000:	4801      	ldr	r0, [pc, #4]	@ (8108008 <__sfp_lock_release+0x8>)
 8108002:	f000 b92f 	b.w	8108264 <__retarget_lock_release_recursive>
 8108006:	bf00      	nop
 8108008:	100004f1 	.word	0x100004f1

0810800c <__sinit>:
 810800c:	b510      	push	{r4, lr}
 810800e:	4604      	mov	r4, r0
 8108010:	f7ff fff0 	bl	8107ff4 <__sfp_lock_acquire>
 8108014:	6a23      	ldr	r3, [r4, #32]
 8108016:	b11b      	cbz	r3, 8108020 <__sinit+0x14>
 8108018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810801c:	f7ff bff0 	b.w	8108000 <__sfp_lock_release>
 8108020:	4b04      	ldr	r3, [pc, #16]	@ (8108034 <__sinit+0x28>)
 8108022:	6223      	str	r3, [r4, #32]
 8108024:	4b04      	ldr	r3, [pc, #16]	@ (8108038 <__sinit+0x2c>)
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	2b00      	cmp	r3, #0
 810802a:	d1f5      	bne.n	8108018 <__sinit+0xc>
 810802c:	f7ff ffc4 	bl	8107fb8 <global_stdio_init.part.0>
 8108030:	e7f2      	b.n	8108018 <__sinit+0xc>
 8108032:	bf00      	nop
 8108034:	08107f79 	.word	0x08107f79
 8108038:	100004e8 	.word	0x100004e8

0810803c <_fwalk_sglue>:
 810803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108040:	4607      	mov	r7, r0
 8108042:	4688      	mov	r8, r1
 8108044:	4614      	mov	r4, r2
 8108046:	2600      	movs	r6, #0
 8108048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810804c:	f1b9 0901 	subs.w	r9, r9, #1
 8108050:	d505      	bpl.n	810805e <_fwalk_sglue+0x22>
 8108052:	6824      	ldr	r4, [r4, #0]
 8108054:	2c00      	cmp	r4, #0
 8108056:	d1f7      	bne.n	8108048 <_fwalk_sglue+0xc>
 8108058:	4630      	mov	r0, r6
 810805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810805e:	89ab      	ldrh	r3, [r5, #12]
 8108060:	2b01      	cmp	r3, #1
 8108062:	d907      	bls.n	8108074 <_fwalk_sglue+0x38>
 8108064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108068:	3301      	adds	r3, #1
 810806a:	d003      	beq.n	8108074 <_fwalk_sglue+0x38>
 810806c:	4629      	mov	r1, r5
 810806e:	4638      	mov	r0, r7
 8108070:	47c0      	blx	r8
 8108072:	4306      	orrs	r6, r0
 8108074:	3568      	adds	r5, #104	@ 0x68
 8108076:	e7e9      	b.n	810804c <_fwalk_sglue+0x10>

08108078 <iprintf>:
 8108078:	b40f      	push	{r0, r1, r2, r3}
 810807a:	b507      	push	{r0, r1, r2, lr}
 810807c:	4906      	ldr	r1, [pc, #24]	@ (8108098 <iprintf+0x20>)
 810807e:	ab04      	add	r3, sp, #16
 8108080:	6808      	ldr	r0, [r1, #0]
 8108082:	f853 2b04 	ldr.w	r2, [r3], #4
 8108086:	6881      	ldr	r1, [r0, #8]
 8108088:	9301      	str	r3, [sp, #4]
 810808a:	f002 fcfd 	bl	810aa88 <_vfiprintf_r>
 810808e:	b003      	add	sp, #12
 8108090:	f85d eb04 	ldr.w	lr, [sp], #4
 8108094:	b004      	add	sp, #16
 8108096:	4770      	bx	lr
 8108098:	1000001c 	.word	0x1000001c

0810809c <siprintf>:
 810809c:	b40e      	push	{r1, r2, r3}
 810809e:	b510      	push	{r4, lr}
 81080a0:	b09d      	sub	sp, #116	@ 0x74
 81080a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 81080a4:	9002      	str	r0, [sp, #8]
 81080a6:	9006      	str	r0, [sp, #24]
 81080a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 81080ac:	480a      	ldr	r0, [pc, #40]	@ (81080d8 <siprintf+0x3c>)
 81080ae:	9107      	str	r1, [sp, #28]
 81080b0:	9104      	str	r1, [sp, #16]
 81080b2:	490a      	ldr	r1, [pc, #40]	@ (81080dc <siprintf+0x40>)
 81080b4:	f853 2b04 	ldr.w	r2, [r3], #4
 81080b8:	9105      	str	r1, [sp, #20]
 81080ba:	2400      	movs	r4, #0
 81080bc:	a902      	add	r1, sp, #8
 81080be:	6800      	ldr	r0, [r0, #0]
 81080c0:	9301      	str	r3, [sp, #4]
 81080c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 81080c4:	f002 fbba 	bl	810a83c <_svfiprintf_r>
 81080c8:	9b02      	ldr	r3, [sp, #8]
 81080ca:	701c      	strb	r4, [r3, #0]
 81080cc:	b01d      	add	sp, #116	@ 0x74
 81080ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81080d2:	b003      	add	sp, #12
 81080d4:	4770      	bx	lr
 81080d6:	bf00      	nop
 81080d8:	1000001c 	.word	0x1000001c
 81080dc:	ffff0208 	.word	0xffff0208

081080e0 <__sread>:
 81080e0:	b510      	push	{r4, lr}
 81080e2:	460c      	mov	r4, r1
 81080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81080e8:	f000 f86c 	bl	81081c4 <_read_r>
 81080ec:	2800      	cmp	r0, #0
 81080ee:	bfab      	itete	ge
 81080f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81080f2:	89a3      	ldrhlt	r3, [r4, #12]
 81080f4:	181b      	addge	r3, r3, r0
 81080f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 81080fa:	bfac      	ite	ge
 81080fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 81080fe:	81a3      	strhlt	r3, [r4, #12]
 8108100:	bd10      	pop	{r4, pc}

08108102 <__swrite>:
 8108102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108106:	461f      	mov	r7, r3
 8108108:	898b      	ldrh	r3, [r1, #12]
 810810a:	05db      	lsls	r3, r3, #23
 810810c:	4605      	mov	r5, r0
 810810e:	460c      	mov	r4, r1
 8108110:	4616      	mov	r6, r2
 8108112:	d505      	bpl.n	8108120 <__swrite+0x1e>
 8108114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108118:	2302      	movs	r3, #2
 810811a:	2200      	movs	r2, #0
 810811c:	f000 f840 	bl	81081a0 <_lseek_r>
 8108120:	89a3      	ldrh	r3, [r4, #12]
 8108122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810812a:	81a3      	strh	r3, [r4, #12]
 810812c:	4632      	mov	r2, r6
 810812e:	463b      	mov	r3, r7
 8108130:	4628      	mov	r0, r5
 8108132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108136:	f000 b857 	b.w	81081e8 <_write_r>

0810813a <__sseek>:
 810813a:	b510      	push	{r4, lr}
 810813c:	460c      	mov	r4, r1
 810813e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108142:	f000 f82d 	bl	81081a0 <_lseek_r>
 8108146:	1c43      	adds	r3, r0, #1
 8108148:	89a3      	ldrh	r3, [r4, #12]
 810814a:	bf15      	itete	ne
 810814c:	6560      	strne	r0, [r4, #84]	@ 0x54
 810814e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8108152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8108156:	81a3      	strheq	r3, [r4, #12]
 8108158:	bf18      	it	ne
 810815a:	81a3      	strhne	r3, [r4, #12]
 810815c:	bd10      	pop	{r4, pc}

0810815e <__sclose>:
 810815e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108162:	f000 b80d 	b.w	8108180 <_close_r>

08108166 <memset>:
 8108166:	4402      	add	r2, r0
 8108168:	4603      	mov	r3, r0
 810816a:	4293      	cmp	r3, r2
 810816c:	d100      	bne.n	8108170 <memset+0xa>
 810816e:	4770      	bx	lr
 8108170:	f803 1b01 	strb.w	r1, [r3], #1
 8108174:	e7f9      	b.n	810816a <memset+0x4>
	...

08108178 <_localeconv_r>:
 8108178:	4800      	ldr	r0, [pc, #0]	@ (810817c <_localeconv_r+0x4>)
 810817a:	4770      	bx	lr
 810817c:	1000015c 	.word	0x1000015c

08108180 <_close_r>:
 8108180:	b538      	push	{r3, r4, r5, lr}
 8108182:	4d06      	ldr	r5, [pc, #24]	@ (810819c <_close_r+0x1c>)
 8108184:	2300      	movs	r3, #0
 8108186:	4604      	mov	r4, r0
 8108188:	4608      	mov	r0, r1
 810818a:	602b      	str	r3, [r5, #0]
 810818c:	f7f9 fda8 	bl	8101ce0 <_close>
 8108190:	1c43      	adds	r3, r0, #1
 8108192:	d102      	bne.n	810819a <_close_r+0x1a>
 8108194:	682b      	ldr	r3, [r5, #0]
 8108196:	b103      	cbz	r3, 810819a <_close_r+0x1a>
 8108198:	6023      	str	r3, [r4, #0]
 810819a:	bd38      	pop	{r3, r4, r5, pc}
 810819c:	100004ec 	.word	0x100004ec

081081a0 <_lseek_r>:
 81081a0:	b538      	push	{r3, r4, r5, lr}
 81081a2:	4d07      	ldr	r5, [pc, #28]	@ (81081c0 <_lseek_r+0x20>)
 81081a4:	4604      	mov	r4, r0
 81081a6:	4608      	mov	r0, r1
 81081a8:	4611      	mov	r1, r2
 81081aa:	2200      	movs	r2, #0
 81081ac:	602a      	str	r2, [r5, #0]
 81081ae:	461a      	mov	r2, r3
 81081b0:	f7f9 fdbd 	bl	8101d2e <_lseek>
 81081b4:	1c43      	adds	r3, r0, #1
 81081b6:	d102      	bne.n	81081be <_lseek_r+0x1e>
 81081b8:	682b      	ldr	r3, [r5, #0]
 81081ba:	b103      	cbz	r3, 81081be <_lseek_r+0x1e>
 81081bc:	6023      	str	r3, [r4, #0]
 81081be:	bd38      	pop	{r3, r4, r5, pc}
 81081c0:	100004ec 	.word	0x100004ec

081081c4 <_read_r>:
 81081c4:	b538      	push	{r3, r4, r5, lr}
 81081c6:	4d07      	ldr	r5, [pc, #28]	@ (81081e4 <_read_r+0x20>)
 81081c8:	4604      	mov	r4, r0
 81081ca:	4608      	mov	r0, r1
 81081cc:	4611      	mov	r1, r2
 81081ce:	2200      	movs	r2, #0
 81081d0:	602a      	str	r2, [r5, #0]
 81081d2:	461a      	mov	r2, r3
 81081d4:	f7f9 fd4b 	bl	8101c6e <_read>
 81081d8:	1c43      	adds	r3, r0, #1
 81081da:	d102      	bne.n	81081e2 <_read_r+0x1e>
 81081dc:	682b      	ldr	r3, [r5, #0]
 81081de:	b103      	cbz	r3, 81081e2 <_read_r+0x1e>
 81081e0:	6023      	str	r3, [r4, #0]
 81081e2:	bd38      	pop	{r3, r4, r5, pc}
 81081e4:	100004ec 	.word	0x100004ec

081081e8 <_write_r>:
 81081e8:	b538      	push	{r3, r4, r5, lr}
 81081ea:	4d07      	ldr	r5, [pc, #28]	@ (8108208 <_write_r+0x20>)
 81081ec:	4604      	mov	r4, r0
 81081ee:	4608      	mov	r0, r1
 81081f0:	4611      	mov	r1, r2
 81081f2:	2200      	movs	r2, #0
 81081f4:	602a      	str	r2, [r5, #0]
 81081f6:	461a      	mov	r2, r3
 81081f8:	f7f9 fd56 	bl	8101ca8 <_write>
 81081fc:	1c43      	adds	r3, r0, #1
 81081fe:	d102      	bne.n	8108206 <_write_r+0x1e>
 8108200:	682b      	ldr	r3, [r5, #0]
 8108202:	b103      	cbz	r3, 8108206 <_write_r+0x1e>
 8108204:	6023      	str	r3, [r4, #0]
 8108206:	bd38      	pop	{r3, r4, r5, pc}
 8108208:	100004ec 	.word	0x100004ec

0810820c <__errno>:
 810820c:	4b01      	ldr	r3, [pc, #4]	@ (8108214 <__errno+0x8>)
 810820e:	6818      	ldr	r0, [r3, #0]
 8108210:	4770      	bx	lr
 8108212:	bf00      	nop
 8108214:	1000001c 	.word	0x1000001c

08108218 <__libc_init_array>:
 8108218:	b570      	push	{r4, r5, r6, lr}
 810821a:	4d0d      	ldr	r5, [pc, #52]	@ (8108250 <__libc_init_array+0x38>)
 810821c:	4c0d      	ldr	r4, [pc, #52]	@ (8108254 <__libc_init_array+0x3c>)
 810821e:	1b64      	subs	r4, r4, r5
 8108220:	10a4      	asrs	r4, r4, #2
 8108222:	2600      	movs	r6, #0
 8108224:	42a6      	cmp	r6, r4
 8108226:	d109      	bne.n	810823c <__libc_init_array+0x24>
 8108228:	4d0b      	ldr	r5, [pc, #44]	@ (8108258 <__libc_init_array+0x40>)
 810822a:	4c0c      	ldr	r4, [pc, #48]	@ (810825c <__libc_init_array+0x44>)
 810822c:	f003 fb7a 	bl	810b924 <_init>
 8108230:	1b64      	subs	r4, r4, r5
 8108232:	10a4      	asrs	r4, r4, #2
 8108234:	2600      	movs	r6, #0
 8108236:	42a6      	cmp	r6, r4
 8108238:	d105      	bne.n	8108246 <__libc_init_array+0x2e>
 810823a:	bd70      	pop	{r4, r5, r6, pc}
 810823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8108240:	4798      	blx	r3
 8108242:	3601      	adds	r6, #1
 8108244:	e7ee      	b.n	8108224 <__libc_init_array+0xc>
 8108246:	f855 3b04 	ldr.w	r3, [r5], #4
 810824a:	4798      	blx	r3
 810824c:	3601      	adds	r6, #1
 810824e:	e7f2      	b.n	8108236 <__libc_init_array+0x1e>
 8108250:	0810bdec 	.word	0x0810bdec
 8108254:	0810bdec 	.word	0x0810bdec
 8108258:	0810bdec 	.word	0x0810bdec
 810825c:	0810bdf0 	.word	0x0810bdf0

08108260 <__retarget_lock_init_recursive>:
 8108260:	4770      	bx	lr

08108262 <__retarget_lock_acquire_recursive>:
 8108262:	4770      	bx	lr

08108264 <__retarget_lock_release_recursive>:
 8108264:	4770      	bx	lr
	...

08108268 <nanf>:
 8108268:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8108270 <nanf+0x8>
 810826c:	4770      	bx	lr
 810826e:	bf00      	nop
 8108270:	7fc00000 	.word	0x7fc00000

08108274 <quorem>:
 8108274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108278:	6903      	ldr	r3, [r0, #16]
 810827a:	690c      	ldr	r4, [r1, #16]
 810827c:	42a3      	cmp	r3, r4
 810827e:	4607      	mov	r7, r0
 8108280:	db7e      	blt.n	8108380 <quorem+0x10c>
 8108282:	3c01      	subs	r4, #1
 8108284:	f101 0814 	add.w	r8, r1, #20
 8108288:	00a3      	lsls	r3, r4, #2
 810828a:	f100 0514 	add.w	r5, r0, #20
 810828e:	9300      	str	r3, [sp, #0]
 8108290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108294:	9301      	str	r3, [sp, #4]
 8108296:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810829a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810829e:	3301      	adds	r3, #1
 81082a0:	429a      	cmp	r2, r3
 81082a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81082a6:	fbb2 f6f3 	udiv	r6, r2, r3
 81082aa:	d32e      	bcc.n	810830a <quorem+0x96>
 81082ac:	f04f 0a00 	mov.w	sl, #0
 81082b0:	46c4      	mov	ip, r8
 81082b2:	46ae      	mov	lr, r5
 81082b4:	46d3      	mov	fp, sl
 81082b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 81082ba:	b298      	uxth	r0, r3
 81082bc:	fb06 a000 	mla	r0, r6, r0, sl
 81082c0:	0c02      	lsrs	r2, r0, #16
 81082c2:	0c1b      	lsrs	r3, r3, #16
 81082c4:	fb06 2303 	mla	r3, r6, r3, r2
 81082c8:	f8de 2000 	ldr.w	r2, [lr]
 81082cc:	b280      	uxth	r0, r0
 81082ce:	b292      	uxth	r2, r2
 81082d0:	1a12      	subs	r2, r2, r0
 81082d2:	445a      	add	r2, fp
 81082d4:	f8de 0000 	ldr.w	r0, [lr]
 81082d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81082dc:	b29b      	uxth	r3, r3
 81082de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 81082e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 81082e6:	b292      	uxth	r2, r2
 81082e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81082ec:	45e1      	cmp	r9, ip
 81082ee:	f84e 2b04 	str.w	r2, [lr], #4
 81082f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81082f6:	d2de      	bcs.n	81082b6 <quorem+0x42>
 81082f8:	9b00      	ldr	r3, [sp, #0]
 81082fa:	58eb      	ldr	r3, [r5, r3]
 81082fc:	b92b      	cbnz	r3, 810830a <quorem+0x96>
 81082fe:	9b01      	ldr	r3, [sp, #4]
 8108300:	3b04      	subs	r3, #4
 8108302:	429d      	cmp	r5, r3
 8108304:	461a      	mov	r2, r3
 8108306:	d32f      	bcc.n	8108368 <quorem+0xf4>
 8108308:	613c      	str	r4, [r7, #16]
 810830a:	4638      	mov	r0, r7
 810830c:	f001 f9c8 	bl	81096a0 <__mcmp>
 8108310:	2800      	cmp	r0, #0
 8108312:	db25      	blt.n	8108360 <quorem+0xec>
 8108314:	4629      	mov	r1, r5
 8108316:	2000      	movs	r0, #0
 8108318:	f858 2b04 	ldr.w	r2, [r8], #4
 810831c:	f8d1 c000 	ldr.w	ip, [r1]
 8108320:	fa1f fe82 	uxth.w	lr, r2
 8108324:	fa1f f38c 	uxth.w	r3, ip
 8108328:	eba3 030e 	sub.w	r3, r3, lr
 810832c:	4403      	add	r3, r0
 810832e:	0c12      	lsrs	r2, r2, #16
 8108330:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8108334:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8108338:	b29b      	uxth	r3, r3
 810833a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810833e:	45c1      	cmp	r9, r8
 8108340:	f841 3b04 	str.w	r3, [r1], #4
 8108344:	ea4f 4022 	mov.w	r0, r2, asr #16
 8108348:	d2e6      	bcs.n	8108318 <quorem+0xa4>
 810834a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810834e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108352:	b922      	cbnz	r2, 810835e <quorem+0xea>
 8108354:	3b04      	subs	r3, #4
 8108356:	429d      	cmp	r5, r3
 8108358:	461a      	mov	r2, r3
 810835a:	d30b      	bcc.n	8108374 <quorem+0x100>
 810835c:	613c      	str	r4, [r7, #16]
 810835e:	3601      	adds	r6, #1
 8108360:	4630      	mov	r0, r6
 8108362:	b003      	add	sp, #12
 8108364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108368:	6812      	ldr	r2, [r2, #0]
 810836a:	3b04      	subs	r3, #4
 810836c:	2a00      	cmp	r2, #0
 810836e:	d1cb      	bne.n	8108308 <quorem+0x94>
 8108370:	3c01      	subs	r4, #1
 8108372:	e7c6      	b.n	8108302 <quorem+0x8e>
 8108374:	6812      	ldr	r2, [r2, #0]
 8108376:	3b04      	subs	r3, #4
 8108378:	2a00      	cmp	r2, #0
 810837a:	d1ef      	bne.n	810835c <quorem+0xe8>
 810837c:	3c01      	subs	r4, #1
 810837e:	e7ea      	b.n	8108356 <quorem+0xe2>
 8108380:	2000      	movs	r0, #0
 8108382:	e7ee      	b.n	8108362 <quorem+0xee>
 8108384:	0000      	movs	r0, r0
	...

08108388 <_dtoa_r>:
 8108388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810838c:	69c7      	ldr	r7, [r0, #28]
 810838e:	b097      	sub	sp, #92	@ 0x5c
 8108390:	ed8d 0b04 	vstr	d0, [sp, #16]
 8108394:	ec55 4b10 	vmov	r4, r5, d0
 8108398:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 810839a:	9107      	str	r1, [sp, #28]
 810839c:	4681      	mov	r9, r0
 810839e:	920c      	str	r2, [sp, #48]	@ 0x30
 81083a0:	9311      	str	r3, [sp, #68]	@ 0x44
 81083a2:	b97f      	cbnz	r7, 81083c4 <_dtoa_r+0x3c>
 81083a4:	2010      	movs	r0, #16
 81083a6:	f000 fe09 	bl	8108fbc <malloc>
 81083aa:	4602      	mov	r2, r0
 81083ac:	f8c9 001c 	str.w	r0, [r9, #28]
 81083b0:	b920      	cbnz	r0, 81083bc <_dtoa_r+0x34>
 81083b2:	4ba9      	ldr	r3, [pc, #676]	@ (8108658 <_dtoa_r+0x2d0>)
 81083b4:	21ef      	movs	r1, #239	@ 0xef
 81083b6:	48a9      	ldr	r0, [pc, #676]	@ (810865c <_dtoa_r+0x2d4>)
 81083b8:	f002 fe12 	bl	810afe0 <__assert_func>
 81083bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81083c0:	6007      	str	r7, [r0, #0]
 81083c2:	60c7      	str	r7, [r0, #12]
 81083c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 81083c8:	6819      	ldr	r1, [r3, #0]
 81083ca:	b159      	cbz	r1, 81083e4 <_dtoa_r+0x5c>
 81083cc:	685a      	ldr	r2, [r3, #4]
 81083ce:	604a      	str	r2, [r1, #4]
 81083d0:	2301      	movs	r3, #1
 81083d2:	4093      	lsls	r3, r2
 81083d4:	608b      	str	r3, [r1, #8]
 81083d6:	4648      	mov	r0, r9
 81083d8:	f000 fee6 	bl	81091a8 <_Bfree>
 81083dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 81083e0:	2200      	movs	r2, #0
 81083e2:	601a      	str	r2, [r3, #0]
 81083e4:	1e2b      	subs	r3, r5, #0
 81083e6:	bfb9      	ittee	lt
 81083e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81083ec:	9305      	strlt	r3, [sp, #20]
 81083ee:	2300      	movge	r3, #0
 81083f0:	6033      	strge	r3, [r6, #0]
 81083f2:	9f05      	ldr	r7, [sp, #20]
 81083f4:	4b9a      	ldr	r3, [pc, #616]	@ (8108660 <_dtoa_r+0x2d8>)
 81083f6:	bfbc      	itt	lt
 81083f8:	2201      	movlt	r2, #1
 81083fa:	6032      	strlt	r2, [r6, #0]
 81083fc:	43bb      	bics	r3, r7
 81083fe:	d112      	bne.n	8108426 <_dtoa_r+0x9e>
 8108400:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8108402:	f242 730f 	movw	r3, #9999	@ 0x270f
 8108406:	6013      	str	r3, [r2, #0]
 8108408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810840c:	4323      	orrs	r3, r4
 810840e:	f000 855a 	beq.w	8108ec6 <_dtoa_r+0xb3e>
 8108412:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8108414:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8108674 <_dtoa_r+0x2ec>
 8108418:	2b00      	cmp	r3, #0
 810841a:	f000 855c 	beq.w	8108ed6 <_dtoa_r+0xb4e>
 810841e:	f10a 0303 	add.w	r3, sl, #3
 8108422:	f000 bd56 	b.w	8108ed2 <_dtoa_r+0xb4a>
 8108426:	ed9d 7b04 	vldr	d7, [sp, #16]
 810842a:	2200      	movs	r2, #0
 810842c:	ec51 0b17 	vmov	r0, r1, d7
 8108430:	2300      	movs	r3, #0
 8108432:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8108436:	f7f8 fbcf 	bl	8100bd8 <__aeabi_dcmpeq>
 810843a:	4680      	mov	r8, r0
 810843c:	b158      	cbz	r0, 8108456 <_dtoa_r+0xce>
 810843e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8108440:	2301      	movs	r3, #1
 8108442:	6013      	str	r3, [r2, #0]
 8108444:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8108446:	b113      	cbz	r3, 810844e <_dtoa_r+0xc6>
 8108448:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 810844a:	4b86      	ldr	r3, [pc, #536]	@ (8108664 <_dtoa_r+0x2dc>)
 810844c:	6013      	str	r3, [r2, #0]
 810844e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8108678 <_dtoa_r+0x2f0>
 8108452:	f000 bd40 	b.w	8108ed6 <_dtoa_r+0xb4e>
 8108456:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 810845a:	aa14      	add	r2, sp, #80	@ 0x50
 810845c:	a915      	add	r1, sp, #84	@ 0x54
 810845e:	4648      	mov	r0, r9
 8108460:	f001 fa3e 	bl	81098e0 <__d2b>
 8108464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8108468:	9002      	str	r0, [sp, #8]
 810846a:	2e00      	cmp	r6, #0
 810846c:	d078      	beq.n	8108560 <_dtoa_r+0x1d8>
 810846e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8108470:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8108474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 810847c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8108480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8108484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8108488:	4619      	mov	r1, r3
 810848a:	2200      	movs	r2, #0
 810848c:	4b76      	ldr	r3, [pc, #472]	@ (8108668 <_dtoa_r+0x2e0>)
 810848e:	f7f7 ff83 	bl	8100398 <__aeabi_dsub>
 8108492:	a36b      	add	r3, pc, #428	@ (adr r3, 8108640 <_dtoa_r+0x2b8>)
 8108494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108498:	f7f8 f936 	bl	8100708 <__aeabi_dmul>
 810849c:	a36a      	add	r3, pc, #424	@ (adr r3, 8108648 <_dtoa_r+0x2c0>)
 810849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084a2:	f7f7 ff7b 	bl	810039c <__adddf3>
 81084a6:	4604      	mov	r4, r0
 81084a8:	4630      	mov	r0, r6
 81084aa:	460d      	mov	r5, r1
 81084ac:	f7f8 f8c2 	bl	8100634 <__aeabi_i2d>
 81084b0:	a367      	add	r3, pc, #412	@ (adr r3, 8108650 <_dtoa_r+0x2c8>)
 81084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084b6:	f7f8 f927 	bl	8100708 <__aeabi_dmul>
 81084ba:	4602      	mov	r2, r0
 81084bc:	460b      	mov	r3, r1
 81084be:	4620      	mov	r0, r4
 81084c0:	4629      	mov	r1, r5
 81084c2:	f7f7 ff6b 	bl	810039c <__adddf3>
 81084c6:	4604      	mov	r4, r0
 81084c8:	460d      	mov	r5, r1
 81084ca:	f7f8 fbcd 	bl	8100c68 <__aeabi_d2iz>
 81084ce:	2200      	movs	r2, #0
 81084d0:	4607      	mov	r7, r0
 81084d2:	2300      	movs	r3, #0
 81084d4:	4620      	mov	r0, r4
 81084d6:	4629      	mov	r1, r5
 81084d8:	f7f8 fb88 	bl	8100bec <__aeabi_dcmplt>
 81084dc:	b140      	cbz	r0, 81084f0 <_dtoa_r+0x168>
 81084de:	4638      	mov	r0, r7
 81084e0:	f7f8 f8a8 	bl	8100634 <__aeabi_i2d>
 81084e4:	4622      	mov	r2, r4
 81084e6:	462b      	mov	r3, r5
 81084e8:	f7f8 fb76 	bl	8100bd8 <__aeabi_dcmpeq>
 81084ec:	b900      	cbnz	r0, 81084f0 <_dtoa_r+0x168>
 81084ee:	3f01      	subs	r7, #1
 81084f0:	2f16      	cmp	r7, #22
 81084f2:	d852      	bhi.n	810859a <_dtoa_r+0x212>
 81084f4:	4b5d      	ldr	r3, [pc, #372]	@ (810866c <_dtoa_r+0x2e4>)
 81084f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8108502:	f7f8 fb73 	bl	8100bec <__aeabi_dcmplt>
 8108506:	2800      	cmp	r0, #0
 8108508:	d049      	beq.n	810859e <_dtoa_r+0x216>
 810850a:	3f01      	subs	r7, #1
 810850c:	2300      	movs	r3, #0
 810850e:	9310      	str	r3, [sp, #64]	@ 0x40
 8108510:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8108512:	1b9b      	subs	r3, r3, r6
 8108514:	1e5a      	subs	r2, r3, #1
 8108516:	bf45      	ittet	mi
 8108518:	f1c3 0301 	rsbmi	r3, r3, #1
 810851c:	9300      	strmi	r3, [sp, #0]
 810851e:	2300      	movpl	r3, #0
 8108520:	2300      	movmi	r3, #0
 8108522:	9206      	str	r2, [sp, #24]
 8108524:	bf54      	ite	pl
 8108526:	9300      	strpl	r3, [sp, #0]
 8108528:	9306      	strmi	r3, [sp, #24]
 810852a:	2f00      	cmp	r7, #0
 810852c:	db39      	blt.n	81085a2 <_dtoa_r+0x21a>
 810852e:	9b06      	ldr	r3, [sp, #24]
 8108530:	970d      	str	r7, [sp, #52]	@ 0x34
 8108532:	443b      	add	r3, r7
 8108534:	9306      	str	r3, [sp, #24]
 8108536:	2300      	movs	r3, #0
 8108538:	9308      	str	r3, [sp, #32]
 810853a:	9b07      	ldr	r3, [sp, #28]
 810853c:	2b09      	cmp	r3, #9
 810853e:	d863      	bhi.n	8108608 <_dtoa_r+0x280>
 8108540:	2b05      	cmp	r3, #5
 8108542:	bfc4      	itt	gt
 8108544:	3b04      	subgt	r3, #4
 8108546:	9307      	strgt	r3, [sp, #28]
 8108548:	9b07      	ldr	r3, [sp, #28]
 810854a:	f1a3 0302 	sub.w	r3, r3, #2
 810854e:	bfcc      	ite	gt
 8108550:	2400      	movgt	r4, #0
 8108552:	2401      	movle	r4, #1
 8108554:	2b03      	cmp	r3, #3
 8108556:	d863      	bhi.n	8108620 <_dtoa_r+0x298>
 8108558:	e8df f003 	tbb	[pc, r3]
 810855c:	2b375452 	.word	0x2b375452
 8108560:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8108564:	441e      	add	r6, r3
 8108566:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810856a:	2b20      	cmp	r3, #32
 810856c:	bfc1      	itttt	gt
 810856e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8108572:	409f      	lslgt	r7, r3
 8108574:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8108578:	fa24 f303 	lsrgt.w	r3, r4, r3
 810857c:	bfd6      	itet	le
 810857e:	f1c3 0320 	rsble	r3, r3, #32
 8108582:	ea47 0003 	orrgt.w	r0, r7, r3
 8108586:	fa04 f003 	lslle.w	r0, r4, r3
 810858a:	f7f8 f843 	bl	8100614 <__aeabi_ui2d>
 810858e:	2201      	movs	r2, #1
 8108590:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8108594:	3e01      	subs	r6, #1
 8108596:	9212      	str	r2, [sp, #72]	@ 0x48
 8108598:	e776      	b.n	8108488 <_dtoa_r+0x100>
 810859a:	2301      	movs	r3, #1
 810859c:	e7b7      	b.n	810850e <_dtoa_r+0x186>
 810859e:	9010      	str	r0, [sp, #64]	@ 0x40
 81085a0:	e7b6      	b.n	8108510 <_dtoa_r+0x188>
 81085a2:	9b00      	ldr	r3, [sp, #0]
 81085a4:	1bdb      	subs	r3, r3, r7
 81085a6:	9300      	str	r3, [sp, #0]
 81085a8:	427b      	negs	r3, r7
 81085aa:	9308      	str	r3, [sp, #32]
 81085ac:	2300      	movs	r3, #0
 81085ae:	930d      	str	r3, [sp, #52]	@ 0x34
 81085b0:	e7c3      	b.n	810853a <_dtoa_r+0x1b2>
 81085b2:	2301      	movs	r3, #1
 81085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 81085b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81085b8:	eb07 0b03 	add.w	fp, r7, r3
 81085bc:	f10b 0301 	add.w	r3, fp, #1
 81085c0:	2b01      	cmp	r3, #1
 81085c2:	9303      	str	r3, [sp, #12]
 81085c4:	bfb8      	it	lt
 81085c6:	2301      	movlt	r3, #1
 81085c8:	e006      	b.n	81085d8 <_dtoa_r+0x250>
 81085ca:	2301      	movs	r3, #1
 81085cc:	9309      	str	r3, [sp, #36]	@ 0x24
 81085ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81085d0:	2b00      	cmp	r3, #0
 81085d2:	dd28      	ble.n	8108626 <_dtoa_r+0x29e>
 81085d4:	469b      	mov	fp, r3
 81085d6:	9303      	str	r3, [sp, #12]
 81085d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 81085dc:	2100      	movs	r1, #0
 81085de:	2204      	movs	r2, #4
 81085e0:	f102 0514 	add.w	r5, r2, #20
 81085e4:	429d      	cmp	r5, r3
 81085e6:	d926      	bls.n	8108636 <_dtoa_r+0x2ae>
 81085e8:	6041      	str	r1, [r0, #4]
 81085ea:	4648      	mov	r0, r9
 81085ec:	f000 fd9c 	bl	8109128 <_Balloc>
 81085f0:	4682      	mov	sl, r0
 81085f2:	2800      	cmp	r0, #0
 81085f4:	d142      	bne.n	810867c <_dtoa_r+0x2f4>
 81085f6:	4b1e      	ldr	r3, [pc, #120]	@ (8108670 <_dtoa_r+0x2e8>)
 81085f8:	4602      	mov	r2, r0
 81085fa:	f240 11af 	movw	r1, #431	@ 0x1af
 81085fe:	e6da      	b.n	81083b6 <_dtoa_r+0x2e>
 8108600:	2300      	movs	r3, #0
 8108602:	e7e3      	b.n	81085cc <_dtoa_r+0x244>
 8108604:	2300      	movs	r3, #0
 8108606:	e7d5      	b.n	81085b4 <_dtoa_r+0x22c>
 8108608:	2401      	movs	r4, #1
 810860a:	2300      	movs	r3, #0
 810860c:	9307      	str	r3, [sp, #28]
 810860e:	9409      	str	r4, [sp, #36]	@ 0x24
 8108610:	f04f 3bff 	mov.w	fp, #4294967295
 8108614:	2200      	movs	r2, #0
 8108616:	f8cd b00c 	str.w	fp, [sp, #12]
 810861a:	2312      	movs	r3, #18
 810861c:	920c      	str	r2, [sp, #48]	@ 0x30
 810861e:	e7db      	b.n	81085d8 <_dtoa_r+0x250>
 8108620:	2301      	movs	r3, #1
 8108622:	9309      	str	r3, [sp, #36]	@ 0x24
 8108624:	e7f4      	b.n	8108610 <_dtoa_r+0x288>
 8108626:	f04f 0b01 	mov.w	fp, #1
 810862a:	f8cd b00c 	str.w	fp, [sp, #12]
 810862e:	465b      	mov	r3, fp
 8108630:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8108634:	e7d0      	b.n	81085d8 <_dtoa_r+0x250>
 8108636:	3101      	adds	r1, #1
 8108638:	0052      	lsls	r2, r2, #1
 810863a:	e7d1      	b.n	81085e0 <_dtoa_r+0x258>
 810863c:	f3af 8000 	nop.w
 8108640:	636f4361 	.word	0x636f4361
 8108644:	3fd287a7 	.word	0x3fd287a7
 8108648:	8b60c8b3 	.word	0x8b60c8b3
 810864c:	3fc68a28 	.word	0x3fc68a28
 8108650:	509f79fb 	.word	0x509f79fb
 8108654:	3fd34413 	.word	0x3fd34413
 8108658:	0810b9fe 	.word	0x0810b9fe
 810865c:	0810ba15 	.word	0x0810ba15
 8108660:	7ff00000 	.word	0x7ff00000
 8108664:	0810b9c9 	.word	0x0810b9c9
 8108668:	3ff80000 	.word	0x3ff80000
 810866c:	0810bbc8 	.word	0x0810bbc8
 8108670:	0810ba6d 	.word	0x0810ba6d
 8108674:	0810b9fa 	.word	0x0810b9fa
 8108678:	0810b9c8 	.word	0x0810b9c8
 810867c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8108680:	6018      	str	r0, [r3, #0]
 8108682:	9b03      	ldr	r3, [sp, #12]
 8108684:	2b0e      	cmp	r3, #14
 8108686:	f200 80a1 	bhi.w	81087cc <_dtoa_r+0x444>
 810868a:	2c00      	cmp	r4, #0
 810868c:	f000 809e 	beq.w	81087cc <_dtoa_r+0x444>
 8108690:	2f00      	cmp	r7, #0
 8108692:	dd33      	ble.n	81086fc <_dtoa_r+0x374>
 8108694:	4b9c      	ldr	r3, [pc, #624]	@ (8108908 <_dtoa_r+0x580>)
 8108696:	f007 020f 	and.w	r2, r7, #15
 810869a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810869e:	ed93 7b00 	vldr	d7, [r3]
 81086a2:	05f8      	lsls	r0, r7, #23
 81086a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 81086a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 81086ac:	d516      	bpl.n	81086dc <_dtoa_r+0x354>
 81086ae:	4b97      	ldr	r3, [pc, #604]	@ (810890c <_dtoa_r+0x584>)
 81086b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 81086b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81086b8:	f7f8 f950 	bl	810095c <__aeabi_ddiv>
 81086bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81086c0:	f004 040f 	and.w	r4, r4, #15
 81086c4:	2603      	movs	r6, #3
 81086c6:	4d91      	ldr	r5, [pc, #580]	@ (810890c <_dtoa_r+0x584>)
 81086c8:	b954      	cbnz	r4, 81086e0 <_dtoa_r+0x358>
 81086ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 81086ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81086d2:	f7f8 f943 	bl	810095c <__aeabi_ddiv>
 81086d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81086da:	e028      	b.n	810872e <_dtoa_r+0x3a6>
 81086dc:	2602      	movs	r6, #2
 81086de:	e7f2      	b.n	81086c6 <_dtoa_r+0x33e>
 81086e0:	07e1      	lsls	r1, r4, #31
 81086e2:	d508      	bpl.n	81086f6 <_dtoa_r+0x36e>
 81086e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 81086e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 81086ec:	f7f8 f80c 	bl	8100708 <__aeabi_dmul>
 81086f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 81086f4:	3601      	adds	r6, #1
 81086f6:	1064      	asrs	r4, r4, #1
 81086f8:	3508      	adds	r5, #8
 81086fa:	e7e5      	b.n	81086c8 <_dtoa_r+0x340>
 81086fc:	f000 80af 	beq.w	810885e <_dtoa_r+0x4d6>
 8108700:	427c      	negs	r4, r7
 8108702:	4b81      	ldr	r3, [pc, #516]	@ (8108908 <_dtoa_r+0x580>)
 8108704:	4d81      	ldr	r5, [pc, #516]	@ (810890c <_dtoa_r+0x584>)
 8108706:	f004 020f 	and.w	r2, r4, #15
 810870a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108712:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8108716:	f7f7 fff7 	bl	8100708 <__aeabi_dmul>
 810871a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810871e:	1124      	asrs	r4, r4, #4
 8108720:	2300      	movs	r3, #0
 8108722:	2602      	movs	r6, #2
 8108724:	2c00      	cmp	r4, #0
 8108726:	f040 808f 	bne.w	8108848 <_dtoa_r+0x4c0>
 810872a:	2b00      	cmp	r3, #0
 810872c:	d1d3      	bne.n	81086d6 <_dtoa_r+0x34e>
 810872e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8108730:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8108734:	2b00      	cmp	r3, #0
 8108736:	f000 8094 	beq.w	8108862 <_dtoa_r+0x4da>
 810873a:	4b75      	ldr	r3, [pc, #468]	@ (8108910 <_dtoa_r+0x588>)
 810873c:	2200      	movs	r2, #0
 810873e:	4620      	mov	r0, r4
 8108740:	4629      	mov	r1, r5
 8108742:	f7f8 fa53 	bl	8100bec <__aeabi_dcmplt>
 8108746:	2800      	cmp	r0, #0
 8108748:	f000 808b 	beq.w	8108862 <_dtoa_r+0x4da>
 810874c:	9b03      	ldr	r3, [sp, #12]
 810874e:	2b00      	cmp	r3, #0
 8108750:	f000 8087 	beq.w	8108862 <_dtoa_r+0x4da>
 8108754:	f1bb 0f00 	cmp.w	fp, #0
 8108758:	dd34      	ble.n	81087c4 <_dtoa_r+0x43c>
 810875a:	4620      	mov	r0, r4
 810875c:	4b6d      	ldr	r3, [pc, #436]	@ (8108914 <_dtoa_r+0x58c>)
 810875e:	2200      	movs	r2, #0
 8108760:	4629      	mov	r1, r5
 8108762:	f7f7 ffd1 	bl	8100708 <__aeabi_dmul>
 8108766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810876a:	f107 38ff 	add.w	r8, r7, #4294967295
 810876e:	3601      	adds	r6, #1
 8108770:	465c      	mov	r4, fp
 8108772:	4630      	mov	r0, r6
 8108774:	f7f7 ff5e 	bl	8100634 <__aeabi_i2d>
 8108778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810877c:	f7f7 ffc4 	bl	8100708 <__aeabi_dmul>
 8108780:	4b65      	ldr	r3, [pc, #404]	@ (8108918 <_dtoa_r+0x590>)
 8108782:	2200      	movs	r2, #0
 8108784:	f7f7 fe0a 	bl	810039c <__adddf3>
 8108788:	4605      	mov	r5, r0
 810878a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810878e:	2c00      	cmp	r4, #0
 8108790:	d16a      	bne.n	8108868 <_dtoa_r+0x4e0>
 8108792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8108796:	4b61      	ldr	r3, [pc, #388]	@ (810891c <_dtoa_r+0x594>)
 8108798:	2200      	movs	r2, #0
 810879a:	f7f7 fdfd 	bl	8100398 <__aeabi_dsub>
 810879e:	4602      	mov	r2, r0
 81087a0:	460b      	mov	r3, r1
 81087a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81087a6:	462a      	mov	r2, r5
 81087a8:	4633      	mov	r3, r6
 81087aa:	f7f8 fa3d 	bl	8100c28 <__aeabi_dcmpgt>
 81087ae:	2800      	cmp	r0, #0
 81087b0:	f040 8298 	bne.w	8108ce4 <_dtoa_r+0x95c>
 81087b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81087b8:	462a      	mov	r2, r5
 81087ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81087be:	f7f8 fa15 	bl	8100bec <__aeabi_dcmplt>
 81087c2:	bb38      	cbnz	r0, 8108814 <_dtoa_r+0x48c>
 81087c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 81087c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 81087cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 81087ce:	2b00      	cmp	r3, #0
 81087d0:	f2c0 8157 	blt.w	8108a82 <_dtoa_r+0x6fa>
 81087d4:	2f0e      	cmp	r7, #14
 81087d6:	f300 8154 	bgt.w	8108a82 <_dtoa_r+0x6fa>
 81087da:	4b4b      	ldr	r3, [pc, #300]	@ (8108908 <_dtoa_r+0x580>)
 81087dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81087e0:	ed93 7b00 	vldr	d7, [r3]
 81087e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	ed8d 7b00 	vstr	d7, [sp]
 81087ec:	f280 80e5 	bge.w	81089ba <_dtoa_r+0x632>
 81087f0:	9b03      	ldr	r3, [sp, #12]
 81087f2:	2b00      	cmp	r3, #0
 81087f4:	f300 80e1 	bgt.w	81089ba <_dtoa_r+0x632>
 81087f8:	d10c      	bne.n	8108814 <_dtoa_r+0x48c>
 81087fa:	4b48      	ldr	r3, [pc, #288]	@ (810891c <_dtoa_r+0x594>)
 81087fc:	2200      	movs	r2, #0
 81087fe:	ec51 0b17 	vmov	r0, r1, d7
 8108802:	f7f7 ff81 	bl	8100708 <__aeabi_dmul>
 8108806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810880a:	f7f8 fa03 	bl	8100c14 <__aeabi_dcmpge>
 810880e:	2800      	cmp	r0, #0
 8108810:	f000 8266 	beq.w	8108ce0 <_dtoa_r+0x958>
 8108814:	2400      	movs	r4, #0
 8108816:	4625      	mov	r5, r4
 8108818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810881a:	4656      	mov	r6, sl
 810881c:	ea6f 0803 	mvn.w	r8, r3
 8108820:	2700      	movs	r7, #0
 8108822:	4621      	mov	r1, r4
 8108824:	4648      	mov	r0, r9
 8108826:	f000 fcbf 	bl	81091a8 <_Bfree>
 810882a:	2d00      	cmp	r5, #0
 810882c:	f000 80bd 	beq.w	81089aa <_dtoa_r+0x622>
 8108830:	b12f      	cbz	r7, 810883e <_dtoa_r+0x4b6>
 8108832:	42af      	cmp	r7, r5
 8108834:	d003      	beq.n	810883e <_dtoa_r+0x4b6>
 8108836:	4639      	mov	r1, r7
 8108838:	4648      	mov	r0, r9
 810883a:	f000 fcb5 	bl	81091a8 <_Bfree>
 810883e:	4629      	mov	r1, r5
 8108840:	4648      	mov	r0, r9
 8108842:	f000 fcb1 	bl	81091a8 <_Bfree>
 8108846:	e0b0      	b.n	81089aa <_dtoa_r+0x622>
 8108848:	07e2      	lsls	r2, r4, #31
 810884a:	d505      	bpl.n	8108858 <_dtoa_r+0x4d0>
 810884c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8108850:	f7f7 ff5a 	bl	8100708 <__aeabi_dmul>
 8108854:	3601      	adds	r6, #1
 8108856:	2301      	movs	r3, #1
 8108858:	1064      	asrs	r4, r4, #1
 810885a:	3508      	adds	r5, #8
 810885c:	e762      	b.n	8108724 <_dtoa_r+0x39c>
 810885e:	2602      	movs	r6, #2
 8108860:	e765      	b.n	810872e <_dtoa_r+0x3a6>
 8108862:	9c03      	ldr	r4, [sp, #12]
 8108864:	46b8      	mov	r8, r7
 8108866:	e784      	b.n	8108772 <_dtoa_r+0x3ea>
 8108868:	4b27      	ldr	r3, [pc, #156]	@ (8108908 <_dtoa_r+0x580>)
 810886a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810886c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8108870:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8108874:	4454      	add	r4, sl
 8108876:	2900      	cmp	r1, #0
 8108878:	d054      	beq.n	8108924 <_dtoa_r+0x59c>
 810887a:	4929      	ldr	r1, [pc, #164]	@ (8108920 <_dtoa_r+0x598>)
 810887c:	2000      	movs	r0, #0
 810887e:	f7f8 f86d 	bl	810095c <__aeabi_ddiv>
 8108882:	4633      	mov	r3, r6
 8108884:	462a      	mov	r2, r5
 8108886:	f7f7 fd87 	bl	8100398 <__aeabi_dsub>
 810888a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 810888e:	4656      	mov	r6, sl
 8108890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8108894:	f7f8 f9e8 	bl	8100c68 <__aeabi_d2iz>
 8108898:	4605      	mov	r5, r0
 810889a:	f7f7 fecb 	bl	8100634 <__aeabi_i2d>
 810889e:	4602      	mov	r2, r0
 81088a0:	460b      	mov	r3, r1
 81088a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81088a6:	f7f7 fd77 	bl	8100398 <__aeabi_dsub>
 81088aa:	3530      	adds	r5, #48	@ 0x30
 81088ac:	4602      	mov	r2, r0
 81088ae:	460b      	mov	r3, r1
 81088b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81088b4:	f806 5b01 	strb.w	r5, [r6], #1
 81088b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 81088bc:	f7f8 f996 	bl	8100bec <__aeabi_dcmplt>
 81088c0:	2800      	cmp	r0, #0
 81088c2:	d172      	bne.n	81089aa <_dtoa_r+0x622>
 81088c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81088c8:	4911      	ldr	r1, [pc, #68]	@ (8108910 <_dtoa_r+0x588>)
 81088ca:	2000      	movs	r0, #0
 81088cc:	f7f7 fd64 	bl	8100398 <__aeabi_dsub>
 81088d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 81088d4:	f7f8 f98a 	bl	8100bec <__aeabi_dcmplt>
 81088d8:	2800      	cmp	r0, #0
 81088da:	f040 80b4 	bne.w	8108a46 <_dtoa_r+0x6be>
 81088de:	42a6      	cmp	r6, r4
 81088e0:	f43f af70 	beq.w	81087c4 <_dtoa_r+0x43c>
 81088e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 81088e8:	4b0a      	ldr	r3, [pc, #40]	@ (8108914 <_dtoa_r+0x58c>)
 81088ea:	2200      	movs	r2, #0
 81088ec:	f7f7 ff0c 	bl	8100708 <__aeabi_dmul>
 81088f0:	4b08      	ldr	r3, [pc, #32]	@ (8108914 <_dtoa_r+0x58c>)
 81088f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 81088f6:	2200      	movs	r2, #0
 81088f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81088fc:	f7f7 ff04 	bl	8100708 <__aeabi_dmul>
 8108900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8108904:	e7c4      	b.n	8108890 <_dtoa_r+0x508>
 8108906:	bf00      	nop
 8108908:	0810bbc8 	.word	0x0810bbc8
 810890c:	0810bba0 	.word	0x0810bba0
 8108910:	3ff00000 	.word	0x3ff00000
 8108914:	40240000 	.word	0x40240000
 8108918:	401c0000 	.word	0x401c0000
 810891c:	40140000 	.word	0x40140000
 8108920:	3fe00000 	.word	0x3fe00000
 8108924:	4631      	mov	r1, r6
 8108926:	4628      	mov	r0, r5
 8108928:	f7f7 feee 	bl	8100708 <__aeabi_dmul>
 810892c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8108930:	9413      	str	r4, [sp, #76]	@ 0x4c
 8108932:	4656      	mov	r6, sl
 8108934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8108938:	f7f8 f996 	bl	8100c68 <__aeabi_d2iz>
 810893c:	4605      	mov	r5, r0
 810893e:	f7f7 fe79 	bl	8100634 <__aeabi_i2d>
 8108942:	4602      	mov	r2, r0
 8108944:	460b      	mov	r3, r1
 8108946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810894a:	f7f7 fd25 	bl	8100398 <__aeabi_dsub>
 810894e:	3530      	adds	r5, #48	@ 0x30
 8108950:	f806 5b01 	strb.w	r5, [r6], #1
 8108954:	4602      	mov	r2, r0
 8108956:	460b      	mov	r3, r1
 8108958:	42a6      	cmp	r6, r4
 810895a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810895e:	f04f 0200 	mov.w	r2, #0
 8108962:	d124      	bne.n	81089ae <_dtoa_r+0x626>
 8108964:	4baf      	ldr	r3, [pc, #700]	@ (8108c24 <_dtoa_r+0x89c>)
 8108966:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 810896a:	f7f7 fd17 	bl	810039c <__adddf3>
 810896e:	4602      	mov	r2, r0
 8108970:	460b      	mov	r3, r1
 8108972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8108976:	f7f8 f957 	bl	8100c28 <__aeabi_dcmpgt>
 810897a:	2800      	cmp	r0, #0
 810897c:	d163      	bne.n	8108a46 <_dtoa_r+0x6be>
 810897e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8108982:	49a8      	ldr	r1, [pc, #672]	@ (8108c24 <_dtoa_r+0x89c>)
 8108984:	2000      	movs	r0, #0
 8108986:	f7f7 fd07 	bl	8100398 <__aeabi_dsub>
 810898a:	4602      	mov	r2, r0
 810898c:	460b      	mov	r3, r1
 810898e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8108992:	f7f8 f92b 	bl	8100bec <__aeabi_dcmplt>
 8108996:	2800      	cmp	r0, #0
 8108998:	f43f af14 	beq.w	81087c4 <_dtoa_r+0x43c>
 810899c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 810899e:	1e73      	subs	r3, r6, #1
 81089a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 81089a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 81089a6:	2b30      	cmp	r3, #48	@ 0x30
 81089a8:	d0f8      	beq.n	810899c <_dtoa_r+0x614>
 81089aa:	4647      	mov	r7, r8
 81089ac:	e03b      	b.n	8108a26 <_dtoa_r+0x69e>
 81089ae:	4b9e      	ldr	r3, [pc, #632]	@ (8108c28 <_dtoa_r+0x8a0>)
 81089b0:	f7f7 feaa 	bl	8100708 <__aeabi_dmul>
 81089b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81089b8:	e7bc      	b.n	8108934 <_dtoa_r+0x5ac>
 81089ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 81089be:	4656      	mov	r6, sl
 81089c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 81089c4:	4620      	mov	r0, r4
 81089c6:	4629      	mov	r1, r5
 81089c8:	f7f7 ffc8 	bl	810095c <__aeabi_ddiv>
 81089cc:	f7f8 f94c 	bl	8100c68 <__aeabi_d2iz>
 81089d0:	4680      	mov	r8, r0
 81089d2:	f7f7 fe2f 	bl	8100634 <__aeabi_i2d>
 81089d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 81089da:	f7f7 fe95 	bl	8100708 <__aeabi_dmul>
 81089de:	4602      	mov	r2, r0
 81089e0:	460b      	mov	r3, r1
 81089e2:	4620      	mov	r0, r4
 81089e4:	4629      	mov	r1, r5
 81089e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 81089ea:	f7f7 fcd5 	bl	8100398 <__aeabi_dsub>
 81089ee:	f806 4b01 	strb.w	r4, [r6], #1
 81089f2:	9d03      	ldr	r5, [sp, #12]
 81089f4:	eba6 040a 	sub.w	r4, r6, sl
 81089f8:	42a5      	cmp	r5, r4
 81089fa:	4602      	mov	r2, r0
 81089fc:	460b      	mov	r3, r1
 81089fe:	d133      	bne.n	8108a68 <_dtoa_r+0x6e0>
 8108a00:	f7f7 fccc 	bl	810039c <__adddf3>
 8108a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8108a08:	4604      	mov	r4, r0
 8108a0a:	460d      	mov	r5, r1
 8108a0c:	f7f8 f90c 	bl	8100c28 <__aeabi_dcmpgt>
 8108a10:	b9c0      	cbnz	r0, 8108a44 <_dtoa_r+0x6bc>
 8108a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8108a16:	4620      	mov	r0, r4
 8108a18:	4629      	mov	r1, r5
 8108a1a:	f7f8 f8dd 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a1e:	b110      	cbz	r0, 8108a26 <_dtoa_r+0x69e>
 8108a20:	f018 0f01 	tst.w	r8, #1
 8108a24:	d10e      	bne.n	8108a44 <_dtoa_r+0x6bc>
 8108a26:	9902      	ldr	r1, [sp, #8]
 8108a28:	4648      	mov	r0, r9
 8108a2a:	f000 fbbd 	bl	81091a8 <_Bfree>
 8108a2e:	2300      	movs	r3, #0
 8108a30:	7033      	strb	r3, [r6, #0]
 8108a32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8108a34:	3701      	adds	r7, #1
 8108a36:	601f      	str	r7, [r3, #0]
 8108a38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8108a3a:	2b00      	cmp	r3, #0
 8108a3c:	f000 824b 	beq.w	8108ed6 <_dtoa_r+0xb4e>
 8108a40:	601e      	str	r6, [r3, #0]
 8108a42:	e248      	b.n	8108ed6 <_dtoa_r+0xb4e>
 8108a44:	46b8      	mov	r8, r7
 8108a46:	4633      	mov	r3, r6
 8108a48:	461e      	mov	r6, r3
 8108a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108a4e:	2a39      	cmp	r2, #57	@ 0x39
 8108a50:	d106      	bne.n	8108a60 <_dtoa_r+0x6d8>
 8108a52:	459a      	cmp	sl, r3
 8108a54:	d1f8      	bne.n	8108a48 <_dtoa_r+0x6c0>
 8108a56:	2230      	movs	r2, #48	@ 0x30
 8108a58:	f108 0801 	add.w	r8, r8, #1
 8108a5c:	f88a 2000 	strb.w	r2, [sl]
 8108a60:	781a      	ldrb	r2, [r3, #0]
 8108a62:	3201      	adds	r2, #1
 8108a64:	701a      	strb	r2, [r3, #0]
 8108a66:	e7a0      	b.n	81089aa <_dtoa_r+0x622>
 8108a68:	4b6f      	ldr	r3, [pc, #444]	@ (8108c28 <_dtoa_r+0x8a0>)
 8108a6a:	2200      	movs	r2, #0
 8108a6c:	f7f7 fe4c 	bl	8100708 <__aeabi_dmul>
 8108a70:	2200      	movs	r2, #0
 8108a72:	2300      	movs	r3, #0
 8108a74:	4604      	mov	r4, r0
 8108a76:	460d      	mov	r5, r1
 8108a78:	f7f8 f8ae 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a7c:	2800      	cmp	r0, #0
 8108a7e:	d09f      	beq.n	81089c0 <_dtoa_r+0x638>
 8108a80:	e7d1      	b.n	8108a26 <_dtoa_r+0x69e>
 8108a82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8108a84:	2a00      	cmp	r2, #0
 8108a86:	f000 80ea 	beq.w	8108c5e <_dtoa_r+0x8d6>
 8108a8a:	9a07      	ldr	r2, [sp, #28]
 8108a8c:	2a01      	cmp	r2, #1
 8108a8e:	f300 80cd 	bgt.w	8108c2c <_dtoa_r+0x8a4>
 8108a92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8108a94:	2a00      	cmp	r2, #0
 8108a96:	f000 80c1 	beq.w	8108c1c <_dtoa_r+0x894>
 8108a9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8108a9e:	9c08      	ldr	r4, [sp, #32]
 8108aa0:	9e00      	ldr	r6, [sp, #0]
 8108aa2:	9a00      	ldr	r2, [sp, #0]
 8108aa4:	441a      	add	r2, r3
 8108aa6:	9200      	str	r2, [sp, #0]
 8108aa8:	9a06      	ldr	r2, [sp, #24]
 8108aaa:	2101      	movs	r1, #1
 8108aac:	441a      	add	r2, r3
 8108aae:	4648      	mov	r0, r9
 8108ab0:	9206      	str	r2, [sp, #24]
 8108ab2:	f000 fc77 	bl	81093a4 <__i2b>
 8108ab6:	4605      	mov	r5, r0
 8108ab8:	b166      	cbz	r6, 8108ad4 <_dtoa_r+0x74c>
 8108aba:	9b06      	ldr	r3, [sp, #24]
 8108abc:	2b00      	cmp	r3, #0
 8108abe:	dd09      	ble.n	8108ad4 <_dtoa_r+0x74c>
 8108ac0:	42b3      	cmp	r3, r6
 8108ac2:	9a00      	ldr	r2, [sp, #0]
 8108ac4:	bfa8      	it	ge
 8108ac6:	4633      	movge	r3, r6
 8108ac8:	1ad2      	subs	r2, r2, r3
 8108aca:	9200      	str	r2, [sp, #0]
 8108acc:	9a06      	ldr	r2, [sp, #24]
 8108ace:	1af6      	subs	r6, r6, r3
 8108ad0:	1ad3      	subs	r3, r2, r3
 8108ad2:	9306      	str	r3, [sp, #24]
 8108ad4:	9b08      	ldr	r3, [sp, #32]
 8108ad6:	b30b      	cbz	r3, 8108b1c <_dtoa_r+0x794>
 8108ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108ada:	2b00      	cmp	r3, #0
 8108adc:	f000 80c6 	beq.w	8108c6c <_dtoa_r+0x8e4>
 8108ae0:	2c00      	cmp	r4, #0
 8108ae2:	f000 80c0 	beq.w	8108c66 <_dtoa_r+0x8de>
 8108ae6:	4629      	mov	r1, r5
 8108ae8:	4622      	mov	r2, r4
 8108aea:	4648      	mov	r0, r9
 8108aec:	f000 fd12 	bl	8109514 <__pow5mult>
 8108af0:	9a02      	ldr	r2, [sp, #8]
 8108af2:	4601      	mov	r1, r0
 8108af4:	4605      	mov	r5, r0
 8108af6:	4648      	mov	r0, r9
 8108af8:	f000 fc6a 	bl	81093d0 <__multiply>
 8108afc:	9902      	ldr	r1, [sp, #8]
 8108afe:	4680      	mov	r8, r0
 8108b00:	4648      	mov	r0, r9
 8108b02:	f000 fb51 	bl	81091a8 <_Bfree>
 8108b06:	9b08      	ldr	r3, [sp, #32]
 8108b08:	1b1b      	subs	r3, r3, r4
 8108b0a:	9308      	str	r3, [sp, #32]
 8108b0c:	f000 80b1 	beq.w	8108c72 <_dtoa_r+0x8ea>
 8108b10:	9a08      	ldr	r2, [sp, #32]
 8108b12:	4641      	mov	r1, r8
 8108b14:	4648      	mov	r0, r9
 8108b16:	f000 fcfd 	bl	8109514 <__pow5mult>
 8108b1a:	9002      	str	r0, [sp, #8]
 8108b1c:	2101      	movs	r1, #1
 8108b1e:	4648      	mov	r0, r9
 8108b20:	f000 fc40 	bl	81093a4 <__i2b>
 8108b24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8108b26:	4604      	mov	r4, r0
 8108b28:	2b00      	cmp	r3, #0
 8108b2a:	f000 81d8 	beq.w	8108ede <_dtoa_r+0xb56>
 8108b2e:	461a      	mov	r2, r3
 8108b30:	4601      	mov	r1, r0
 8108b32:	4648      	mov	r0, r9
 8108b34:	f000 fcee 	bl	8109514 <__pow5mult>
 8108b38:	9b07      	ldr	r3, [sp, #28]
 8108b3a:	2b01      	cmp	r3, #1
 8108b3c:	4604      	mov	r4, r0
 8108b3e:	f300 809f 	bgt.w	8108c80 <_dtoa_r+0x8f8>
 8108b42:	9b04      	ldr	r3, [sp, #16]
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	f040 8097 	bne.w	8108c78 <_dtoa_r+0x8f0>
 8108b4a:	9b05      	ldr	r3, [sp, #20]
 8108b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108b50:	2b00      	cmp	r3, #0
 8108b52:	f040 8093 	bne.w	8108c7c <_dtoa_r+0x8f4>
 8108b56:	9b05      	ldr	r3, [sp, #20]
 8108b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8108b5c:	0d1b      	lsrs	r3, r3, #20
 8108b5e:	051b      	lsls	r3, r3, #20
 8108b60:	b133      	cbz	r3, 8108b70 <_dtoa_r+0x7e8>
 8108b62:	9b00      	ldr	r3, [sp, #0]
 8108b64:	3301      	adds	r3, #1
 8108b66:	9300      	str	r3, [sp, #0]
 8108b68:	9b06      	ldr	r3, [sp, #24]
 8108b6a:	3301      	adds	r3, #1
 8108b6c:	9306      	str	r3, [sp, #24]
 8108b6e:	2301      	movs	r3, #1
 8108b70:	9308      	str	r3, [sp, #32]
 8108b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8108b74:	2b00      	cmp	r3, #0
 8108b76:	f000 81b8 	beq.w	8108eea <_dtoa_r+0xb62>
 8108b7a:	6923      	ldr	r3, [r4, #16]
 8108b7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8108b80:	6918      	ldr	r0, [r3, #16]
 8108b82:	f000 fbc3 	bl	810930c <__hi0bits>
 8108b86:	f1c0 0020 	rsb	r0, r0, #32
 8108b8a:	9b06      	ldr	r3, [sp, #24]
 8108b8c:	4418      	add	r0, r3
 8108b8e:	f010 001f 	ands.w	r0, r0, #31
 8108b92:	f000 8082 	beq.w	8108c9a <_dtoa_r+0x912>
 8108b96:	f1c0 0320 	rsb	r3, r0, #32
 8108b9a:	2b04      	cmp	r3, #4
 8108b9c:	dd73      	ble.n	8108c86 <_dtoa_r+0x8fe>
 8108b9e:	9b00      	ldr	r3, [sp, #0]
 8108ba0:	f1c0 001c 	rsb	r0, r0, #28
 8108ba4:	4403      	add	r3, r0
 8108ba6:	9300      	str	r3, [sp, #0]
 8108ba8:	9b06      	ldr	r3, [sp, #24]
 8108baa:	4403      	add	r3, r0
 8108bac:	4406      	add	r6, r0
 8108bae:	9306      	str	r3, [sp, #24]
 8108bb0:	9b00      	ldr	r3, [sp, #0]
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	dd05      	ble.n	8108bc2 <_dtoa_r+0x83a>
 8108bb6:	9902      	ldr	r1, [sp, #8]
 8108bb8:	461a      	mov	r2, r3
 8108bba:	4648      	mov	r0, r9
 8108bbc:	f000 fd04 	bl	81095c8 <__lshift>
 8108bc0:	9002      	str	r0, [sp, #8]
 8108bc2:	9b06      	ldr	r3, [sp, #24]
 8108bc4:	2b00      	cmp	r3, #0
 8108bc6:	dd05      	ble.n	8108bd4 <_dtoa_r+0x84c>
 8108bc8:	4621      	mov	r1, r4
 8108bca:	461a      	mov	r2, r3
 8108bcc:	4648      	mov	r0, r9
 8108bce:	f000 fcfb 	bl	81095c8 <__lshift>
 8108bd2:	4604      	mov	r4, r0
 8108bd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8108bd6:	2b00      	cmp	r3, #0
 8108bd8:	d061      	beq.n	8108c9e <_dtoa_r+0x916>
 8108bda:	9802      	ldr	r0, [sp, #8]
 8108bdc:	4621      	mov	r1, r4
 8108bde:	f000 fd5f 	bl	81096a0 <__mcmp>
 8108be2:	2800      	cmp	r0, #0
 8108be4:	da5b      	bge.n	8108c9e <_dtoa_r+0x916>
 8108be6:	2300      	movs	r3, #0
 8108be8:	9902      	ldr	r1, [sp, #8]
 8108bea:	220a      	movs	r2, #10
 8108bec:	4648      	mov	r0, r9
 8108bee:	f000 fafd 	bl	81091ec <__multadd>
 8108bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108bf4:	9002      	str	r0, [sp, #8]
 8108bf6:	f107 38ff 	add.w	r8, r7, #4294967295
 8108bfa:	2b00      	cmp	r3, #0
 8108bfc:	f000 8177 	beq.w	8108eee <_dtoa_r+0xb66>
 8108c00:	4629      	mov	r1, r5
 8108c02:	2300      	movs	r3, #0
 8108c04:	220a      	movs	r2, #10
 8108c06:	4648      	mov	r0, r9
 8108c08:	f000 faf0 	bl	81091ec <__multadd>
 8108c0c:	f1bb 0f00 	cmp.w	fp, #0
 8108c10:	4605      	mov	r5, r0
 8108c12:	dc6f      	bgt.n	8108cf4 <_dtoa_r+0x96c>
 8108c14:	9b07      	ldr	r3, [sp, #28]
 8108c16:	2b02      	cmp	r3, #2
 8108c18:	dc49      	bgt.n	8108cae <_dtoa_r+0x926>
 8108c1a:	e06b      	b.n	8108cf4 <_dtoa_r+0x96c>
 8108c1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8108c1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8108c22:	e73c      	b.n	8108a9e <_dtoa_r+0x716>
 8108c24:	3fe00000 	.word	0x3fe00000
 8108c28:	40240000 	.word	0x40240000
 8108c2c:	9b03      	ldr	r3, [sp, #12]
 8108c2e:	1e5c      	subs	r4, r3, #1
 8108c30:	9b08      	ldr	r3, [sp, #32]
 8108c32:	42a3      	cmp	r3, r4
 8108c34:	db09      	blt.n	8108c4a <_dtoa_r+0x8c2>
 8108c36:	1b1c      	subs	r4, r3, r4
 8108c38:	9b03      	ldr	r3, [sp, #12]
 8108c3a:	2b00      	cmp	r3, #0
 8108c3c:	f6bf af30 	bge.w	8108aa0 <_dtoa_r+0x718>
 8108c40:	9b00      	ldr	r3, [sp, #0]
 8108c42:	9a03      	ldr	r2, [sp, #12]
 8108c44:	1a9e      	subs	r6, r3, r2
 8108c46:	2300      	movs	r3, #0
 8108c48:	e72b      	b.n	8108aa2 <_dtoa_r+0x71a>
 8108c4a:	9b08      	ldr	r3, [sp, #32]
 8108c4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8108c4e:	9408      	str	r4, [sp, #32]
 8108c50:	1ae3      	subs	r3, r4, r3
 8108c52:	441a      	add	r2, r3
 8108c54:	9e00      	ldr	r6, [sp, #0]
 8108c56:	9b03      	ldr	r3, [sp, #12]
 8108c58:	920d      	str	r2, [sp, #52]	@ 0x34
 8108c5a:	2400      	movs	r4, #0
 8108c5c:	e721      	b.n	8108aa2 <_dtoa_r+0x71a>
 8108c5e:	9c08      	ldr	r4, [sp, #32]
 8108c60:	9e00      	ldr	r6, [sp, #0]
 8108c62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8108c64:	e728      	b.n	8108ab8 <_dtoa_r+0x730>
 8108c66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8108c6a:	e751      	b.n	8108b10 <_dtoa_r+0x788>
 8108c6c:	9a08      	ldr	r2, [sp, #32]
 8108c6e:	9902      	ldr	r1, [sp, #8]
 8108c70:	e750      	b.n	8108b14 <_dtoa_r+0x78c>
 8108c72:	f8cd 8008 	str.w	r8, [sp, #8]
 8108c76:	e751      	b.n	8108b1c <_dtoa_r+0x794>
 8108c78:	2300      	movs	r3, #0
 8108c7a:	e779      	b.n	8108b70 <_dtoa_r+0x7e8>
 8108c7c:	9b04      	ldr	r3, [sp, #16]
 8108c7e:	e777      	b.n	8108b70 <_dtoa_r+0x7e8>
 8108c80:	2300      	movs	r3, #0
 8108c82:	9308      	str	r3, [sp, #32]
 8108c84:	e779      	b.n	8108b7a <_dtoa_r+0x7f2>
 8108c86:	d093      	beq.n	8108bb0 <_dtoa_r+0x828>
 8108c88:	9a00      	ldr	r2, [sp, #0]
 8108c8a:	331c      	adds	r3, #28
 8108c8c:	441a      	add	r2, r3
 8108c8e:	9200      	str	r2, [sp, #0]
 8108c90:	9a06      	ldr	r2, [sp, #24]
 8108c92:	441a      	add	r2, r3
 8108c94:	441e      	add	r6, r3
 8108c96:	9206      	str	r2, [sp, #24]
 8108c98:	e78a      	b.n	8108bb0 <_dtoa_r+0x828>
 8108c9a:	4603      	mov	r3, r0
 8108c9c:	e7f4      	b.n	8108c88 <_dtoa_r+0x900>
 8108c9e:	9b03      	ldr	r3, [sp, #12]
 8108ca0:	2b00      	cmp	r3, #0
 8108ca2:	46b8      	mov	r8, r7
 8108ca4:	dc20      	bgt.n	8108ce8 <_dtoa_r+0x960>
 8108ca6:	469b      	mov	fp, r3
 8108ca8:	9b07      	ldr	r3, [sp, #28]
 8108caa:	2b02      	cmp	r3, #2
 8108cac:	dd1e      	ble.n	8108cec <_dtoa_r+0x964>
 8108cae:	f1bb 0f00 	cmp.w	fp, #0
 8108cb2:	f47f adb1 	bne.w	8108818 <_dtoa_r+0x490>
 8108cb6:	4621      	mov	r1, r4
 8108cb8:	465b      	mov	r3, fp
 8108cba:	2205      	movs	r2, #5
 8108cbc:	4648      	mov	r0, r9
 8108cbe:	f000 fa95 	bl	81091ec <__multadd>
 8108cc2:	4601      	mov	r1, r0
 8108cc4:	4604      	mov	r4, r0
 8108cc6:	9802      	ldr	r0, [sp, #8]
 8108cc8:	f000 fcea 	bl	81096a0 <__mcmp>
 8108ccc:	2800      	cmp	r0, #0
 8108cce:	f77f ada3 	ble.w	8108818 <_dtoa_r+0x490>
 8108cd2:	4656      	mov	r6, sl
 8108cd4:	2331      	movs	r3, #49	@ 0x31
 8108cd6:	f806 3b01 	strb.w	r3, [r6], #1
 8108cda:	f108 0801 	add.w	r8, r8, #1
 8108cde:	e59f      	b.n	8108820 <_dtoa_r+0x498>
 8108ce0:	9c03      	ldr	r4, [sp, #12]
 8108ce2:	46b8      	mov	r8, r7
 8108ce4:	4625      	mov	r5, r4
 8108ce6:	e7f4      	b.n	8108cd2 <_dtoa_r+0x94a>
 8108ce8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8108cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108cee:	2b00      	cmp	r3, #0
 8108cf0:	f000 8101 	beq.w	8108ef6 <_dtoa_r+0xb6e>
 8108cf4:	2e00      	cmp	r6, #0
 8108cf6:	dd05      	ble.n	8108d04 <_dtoa_r+0x97c>
 8108cf8:	4629      	mov	r1, r5
 8108cfa:	4632      	mov	r2, r6
 8108cfc:	4648      	mov	r0, r9
 8108cfe:	f000 fc63 	bl	81095c8 <__lshift>
 8108d02:	4605      	mov	r5, r0
 8108d04:	9b08      	ldr	r3, [sp, #32]
 8108d06:	2b00      	cmp	r3, #0
 8108d08:	d05c      	beq.n	8108dc4 <_dtoa_r+0xa3c>
 8108d0a:	6869      	ldr	r1, [r5, #4]
 8108d0c:	4648      	mov	r0, r9
 8108d0e:	f000 fa0b 	bl	8109128 <_Balloc>
 8108d12:	4606      	mov	r6, r0
 8108d14:	b928      	cbnz	r0, 8108d22 <_dtoa_r+0x99a>
 8108d16:	4b82      	ldr	r3, [pc, #520]	@ (8108f20 <_dtoa_r+0xb98>)
 8108d18:	4602      	mov	r2, r0
 8108d1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8108d1e:	f7ff bb4a 	b.w	81083b6 <_dtoa_r+0x2e>
 8108d22:	692a      	ldr	r2, [r5, #16]
 8108d24:	3202      	adds	r2, #2
 8108d26:	0092      	lsls	r2, r2, #2
 8108d28:	f105 010c 	add.w	r1, r5, #12
 8108d2c:	300c      	adds	r0, #12
 8108d2e:	f002 f93f 	bl	810afb0 <memcpy>
 8108d32:	2201      	movs	r2, #1
 8108d34:	4631      	mov	r1, r6
 8108d36:	4648      	mov	r0, r9
 8108d38:	f000 fc46 	bl	81095c8 <__lshift>
 8108d3c:	f10a 0301 	add.w	r3, sl, #1
 8108d40:	9300      	str	r3, [sp, #0]
 8108d42:	eb0a 030b 	add.w	r3, sl, fp
 8108d46:	9308      	str	r3, [sp, #32]
 8108d48:	9b04      	ldr	r3, [sp, #16]
 8108d4a:	f003 0301 	and.w	r3, r3, #1
 8108d4e:	462f      	mov	r7, r5
 8108d50:	9306      	str	r3, [sp, #24]
 8108d52:	4605      	mov	r5, r0
 8108d54:	9b00      	ldr	r3, [sp, #0]
 8108d56:	9802      	ldr	r0, [sp, #8]
 8108d58:	4621      	mov	r1, r4
 8108d5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8108d5e:	f7ff fa89 	bl	8108274 <quorem>
 8108d62:	4603      	mov	r3, r0
 8108d64:	3330      	adds	r3, #48	@ 0x30
 8108d66:	9003      	str	r0, [sp, #12]
 8108d68:	4639      	mov	r1, r7
 8108d6a:	9802      	ldr	r0, [sp, #8]
 8108d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8108d6e:	f000 fc97 	bl	81096a0 <__mcmp>
 8108d72:	462a      	mov	r2, r5
 8108d74:	9004      	str	r0, [sp, #16]
 8108d76:	4621      	mov	r1, r4
 8108d78:	4648      	mov	r0, r9
 8108d7a:	f000 fcad 	bl	81096d8 <__mdiff>
 8108d7e:	68c2      	ldr	r2, [r0, #12]
 8108d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108d82:	4606      	mov	r6, r0
 8108d84:	bb02      	cbnz	r2, 8108dc8 <_dtoa_r+0xa40>
 8108d86:	4601      	mov	r1, r0
 8108d88:	9802      	ldr	r0, [sp, #8]
 8108d8a:	f000 fc89 	bl	81096a0 <__mcmp>
 8108d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108d90:	4602      	mov	r2, r0
 8108d92:	4631      	mov	r1, r6
 8108d94:	4648      	mov	r0, r9
 8108d96:	920c      	str	r2, [sp, #48]	@ 0x30
 8108d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8108d9a:	f000 fa05 	bl	81091a8 <_Bfree>
 8108d9e:	9b07      	ldr	r3, [sp, #28]
 8108da0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8108da2:	9e00      	ldr	r6, [sp, #0]
 8108da4:	ea42 0103 	orr.w	r1, r2, r3
 8108da8:	9b06      	ldr	r3, [sp, #24]
 8108daa:	4319      	orrs	r1, r3
 8108dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108dae:	d10d      	bne.n	8108dcc <_dtoa_r+0xa44>
 8108db0:	2b39      	cmp	r3, #57	@ 0x39
 8108db2:	d027      	beq.n	8108e04 <_dtoa_r+0xa7c>
 8108db4:	9a04      	ldr	r2, [sp, #16]
 8108db6:	2a00      	cmp	r2, #0
 8108db8:	dd01      	ble.n	8108dbe <_dtoa_r+0xa36>
 8108dba:	9b03      	ldr	r3, [sp, #12]
 8108dbc:	3331      	adds	r3, #49	@ 0x31
 8108dbe:	f88b 3000 	strb.w	r3, [fp]
 8108dc2:	e52e      	b.n	8108822 <_dtoa_r+0x49a>
 8108dc4:	4628      	mov	r0, r5
 8108dc6:	e7b9      	b.n	8108d3c <_dtoa_r+0x9b4>
 8108dc8:	2201      	movs	r2, #1
 8108dca:	e7e2      	b.n	8108d92 <_dtoa_r+0xa0a>
 8108dcc:	9904      	ldr	r1, [sp, #16]
 8108dce:	2900      	cmp	r1, #0
 8108dd0:	db04      	blt.n	8108ddc <_dtoa_r+0xa54>
 8108dd2:	9807      	ldr	r0, [sp, #28]
 8108dd4:	4301      	orrs	r1, r0
 8108dd6:	9806      	ldr	r0, [sp, #24]
 8108dd8:	4301      	orrs	r1, r0
 8108dda:	d120      	bne.n	8108e1e <_dtoa_r+0xa96>
 8108ddc:	2a00      	cmp	r2, #0
 8108dde:	ddee      	ble.n	8108dbe <_dtoa_r+0xa36>
 8108de0:	9902      	ldr	r1, [sp, #8]
 8108de2:	9300      	str	r3, [sp, #0]
 8108de4:	2201      	movs	r2, #1
 8108de6:	4648      	mov	r0, r9
 8108de8:	f000 fbee 	bl	81095c8 <__lshift>
 8108dec:	4621      	mov	r1, r4
 8108dee:	9002      	str	r0, [sp, #8]
 8108df0:	f000 fc56 	bl	81096a0 <__mcmp>
 8108df4:	2800      	cmp	r0, #0
 8108df6:	9b00      	ldr	r3, [sp, #0]
 8108df8:	dc02      	bgt.n	8108e00 <_dtoa_r+0xa78>
 8108dfa:	d1e0      	bne.n	8108dbe <_dtoa_r+0xa36>
 8108dfc:	07da      	lsls	r2, r3, #31
 8108dfe:	d5de      	bpl.n	8108dbe <_dtoa_r+0xa36>
 8108e00:	2b39      	cmp	r3, #57	@ 0x39
 8108e02:	d1da      	bne.n	8108dba <_dtoa_r+0xa32>
 8108e04:	2339      	movs	r3, #57	@ 0x39
 8108e06:	f88b 3000 	strb.w	r3, [fp]
 8108e0a:	4633      	mov	r3, r6
 8108e0c:	461e      	mov	r6, r3
 8108e0e:	3b01      	subs	r3, #1
 8108e10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8108e14:	2a39      	cmp	r2, #57	@ 0x39
 8108e16:	d04e      	beq.n	8108eb6 <_dtoa_r+0xb2e>
 8108e18:	3201      	adds	r2, #1
 8108e1a:	701a      	strb	r2, [r3, #0]
 8108e1c:	e501      	b.n	8108822 <_dtoa_r+0x49a>
 8108e1e:	2a00      	cmp	r2, #0
 8108e20:	dd03      	ble.n	8108e2a <_dtoa_r+0xaa2>
 8108e22:	2b39      	cmp	r3, #57	@ 0x39
 8108e24:	d0ee      	beq.n	8108e04 <_dtoa_r+0xa7c>
 8108e26:	3301      	adds	r3, #1
 8108e28:	e7c9      	b.n	8108dbe <_dtoa_r+0xa36>
 8108e2a:	9a00      	ldr	r2, [sp, #0]
 8108e2c:	9908      	ldr	r1, [sp, #32]
 8108e2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8108e32:	428a      	cmp	r2, r1
 8108e34:	d028      	beq.n	8108e88 <_dtoa_r+0xb00>
 8108e36:	9902      	ldr	r1, [sp, #8]
 8108e38:	2300      	movs	r3, #0
 8108e3a:	220a      	movs	r2, #10
 8108e3c:	4648      	mov	r0, r9
 8108e3e:	f000 f9d5 	bl	81091ec <__multadd>
 8108e42:	42af      	cmp	r7, r5
 8108e44:	9002      	str	r0, [sp, #8]
 8108e46:	f04f 0300 	mov.w	r3, #0
 8108e4a:	f04f 020a 	mov.w	r2, #10
 8108e4e:	4639      	mov	r1, r7
 8108e50:	4648      	mov	r0, r9
 8108e52:	d107      	bne.n	8108e64 <_dtoa_r+0xadc>
 8108e54:	f000 f9ca 	bl	81091ec <__multadd>
 8108e58:	4607      	mov	r7, r0
 8108e5a:	4605      	mov	r5, r0
 8108e5c:	9b00      	ldr	r3, [sp, #0]
 8108e5e:	3301      	adds	r3, #1
 8108e60:	9300      	str	r3, [sp, #0]
 8108e62:	e777      	b.n	8108d54 <_dtoa_r+0x9cc>
 8108e64:	f000 f9c2 	bl	81091ec <__multadd>
 8108e68:	4629      	mov	r1, r5
 8108e6a:	4607      	mov	r7, r0
 8108e6c:	2300      	movs	r3, #0
 8108e6e:	220a      	movs	r2, #10
 8108e70:	4648      	mov	r0, r9
 8108e72:	f000 f9bb 	bl	81091ec <__multadd>
 8108e76:	4605      	mov	r5, r0
 8108e78:	e7f0      	b.n	8108e5c <_dtoa_r+0xad4>
 8108e7a:	f1bb 0f00 	cmp.w	fp, #0
 8108e7e:	bfcc      	ite	gt
 8108e80:	465e      	movgt	r6, fp
 8108e82:	2601      	movle	r6, #1
 8108e84:	4456      	add	r6, sl
 8108e86:	2700      	movs	r7, #0
 8108e88:	9902      	ldr	r1, [sp, #8]
 8108e8a:	9300      	str	r3, [sp, #0]
 8108e8c:	2201      	movs	r2, #1
 8108e8e:	4648      	mov	r0, r9
 8108e90:	f000 fb9a 	bl	81095c8 <__lshift>
 8108e94:	4621      	mov	r1, r4
 8108e96:	9002      	str	r0, [sp, #8]
 8108e98:	f000 fc02 	bl	81096a0 <__mcmp>
 8108e9c:	2800      	cmp	r0, #0
 8108e9e:	dcb4      	bgt.n	8108e0a <_dtoa_r+0xa82>
 8108ea0:	d102      	bne.n	8108ea8 <_dtoa_r+0xb20>
 8108ea2:	9b00      	ldr	r3, [sp, #0]
 8108ea4:	07db      	lsls	r3, r3, #31
 8108ea6:	d4b0      	bmi.n	8108e0a <_dtoa_r+0xa82>
 8108ea8:	4633      	mov	r3, r6
 8108eaa:	461e      	mov	r6, r3
 8108eac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108eb0:	2a30      	cmp	r2, #48	@ 0x30
 8108eb2:	d0fa      	beq.n	8108eaa <_dtoa_r+0xb22>
 8108eb4:	e4b5      	b.n	8108822 <_dtoa_r+0x49a>
 8108eb6:	459a      	cmp	sl, r3
 8108eb8:	d1a8      	bne.n	8108e0c <_dtoa_r+0xa84>
 8108eba:	2331      	movs	r3, #49	@ 0x31
 8108ebc:	f108 0801 	add.w	r8, r8, #1
 8108ec0:	f88a 3000 	strb.w	r3, [sl]
 8108ec4:	e4ad      	b.n	8108822 <_dtoa_r+0x49a>
 8108ec6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8108ec8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8108f24 <_dtoa_r+0xb9c>
 8108ecc:	b11b      	cbz	r3, 8108ed6 <_dtoa_r+0xb4e>
 8108ece:	f10a 0308 	add.w	r3, sl, #8
 8108ed2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8108ed4:	6013      	str	r3, [r2, #0]
 8108ed6:	4650      	mov	r0, sl
 8108ed8:	b017      	add	sp, #92	@ 0x5c
 8108eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108ede:	9b07      	ldr	r3, [sp, #28]
 8108ee0:	2b01      	cmp	r3, #1
 8108ee2:	f77f ae2e 	ble.w	8108b42 <_dtoa_r+0x7ba>
 8108ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8108ee8:	9308      	str	r3, [sp, #32]
 8108eea:	2001      	movs	r0, #1
 8108eec:	e64d      	b.n	8108b8a <_dtoa_r+0x802>
 8108eee:	f1bb 0f00 	cmp.w	fp, #0
 8108ef2:	f77f aed9 	ble.w	8108ca8 <_dtoa_r+0x920>
 8108ef6:	4656      	mov	r6, sl
 8108ef8:	9802      	ldr	r0, [sp, #8]
 8108efa:	4621      	mov	r1, r4
 8108efc:	f7ff f9ba 	bl	8108274 <quorem>
 8108f00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8108f04:	f806 3b01 	strb.w	r3, [r6], #1
 8108f08:	eba6 020a 	sub.w	r2, r6, sl
 8108f0c:	4593      	cmp	fp, r2
 8108f0e:	ddb4      	ble.n	8108e7a <_dtoa_r+0xaf2>
 8108f10:	9902      	ldr	r1, [sp, #8]
 8108f12:	2300      	movs	r3, #0
 8108f14:	220a      	movs	r2, #10
 8108f16:	4648      	mov	r0, r9
 8108f18:	f000 f968 	bl	81091ec <__multadd>
 8108f1c:	9002      	str	r0, [sp, #8]
 8108f1e:	e7eb      	b.n	8108ef8 <_dtoa_r+0xb70>
 8108f20:	0810ba6d 	.word	0x0810ba6d
 8108f24:	0810b9f1 	.word	0x0810b9f1

08108f28 <_free_r>:
 8108f28:	b538      	push	{r3, r4, r5, lr}
 8108f2a:	4605      	mov	r5, r0
 8108f2c:	2900      	cmp	r1, #0
 8108f2e:	d041      	beq.n	8108fb4 <_free_r+0x8c>
 8108f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108f34:	1f0c      	subs	r4, r1, #4
 8108f36:	2b00      	cmp	r3, #0
 8108f38:	bfb8      	it	lt
 8108f3a:	18e4      	addlt	r4, r4, r3
 8108f3c:	f000 f8e8 	bl	8109110 <__malloc_lock>
 8108f40:	4a1d      	ldr	r2, [pc, #116]	@ (8108fb8 <_free_r+0x90>)
 8108f42:	6813      	ldr	r3, [r2, #0]
 8108f44:	b933      	cbnz	r3, 8108f54 <_free_r+0x2c>
 8108f46:	6063      	str	r3, [r4, #4]
 8108f48:	6014      	str	r4, [r2, #0]
 8108f4a:	4628      	mov	r0, r5
 8108f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108f50:	f000 b8e4 	b.w	810911c <__malloc_unlock>
 8108f54:	42a3      	cmp	r3, r4
 8108f56:	d908      	bls.n	8108f6a <_free_r+0x42>
 8108f58:	6820      	ldr	r0, [r4, #0]
 8108f5a:	1821      	adds	r1, r4, r0
 8108f5c:	428b      	cmp	r3, r1
 8108f5e:	bf01      	itttt	eq
 8108f60:	6819      	ldreq	r1, [r3, #0]
 8108f62:	685b      	ldreq	r3, [r3, #4]
 8108f64:	1809      	addeq	r1, r1, r0
 8108f66:	6021      	streq	r1, [r4, #0]
 8108f68:	e7ed      	b.n	8108f46 <_free_r+0x1e>
 8108f6a:	461a      	mov	r2, r3
 8108f6c:	685b      	ldr	r3, [r3, #4]
 8108f6e:	b10b      	cbz	r3, 8108f74 <_free_r+0x4c>
 8108f70:	42a3      	cmp	r3, r4
 8108f72:	d9fa      	bls.n	8108f6a <_free_r+0x42>
 8108f74:	6811      	ldr	r1, [r2, #0]
 8108f76:	1850      	adds	r0, r2, r1
 8108f78:	42a0      	cmp	r0, r4
 8108f7a:	d10b      	bne.n	8108f94 <_free_r+0x6c>
 8108f7c:	6820      	ldr	r0, [r4, #0]
 8108f7e:	4401      	add	r1, r0
 8108f80:	1850      	adds	r0, r2, r1
 8108f82:	4283      	cmp	r3, r0
 8108f84:	6011      	str	r1, [r2, #0]
 8108f86:	d1e0      	bne.n	8108f4a <_free_r+0x22>
 8108f88:	6818      	ldr	r0, [r3, #0]
 8108f8a:	685b      	ldr	r3, [r3, #4]
 8108f8c:	6053      	str	r3, [r2, #4]
 8108f8e:	4408      	add	r0, r1
 8108f90:	6010      	str	r0, [r2, #0]
 8108f92:	e7da      	b.n	8108f4a <_free_r+0x22>
 8108f94:	d902      	bls.n	8108f9c <_free_r+0x74>
 8108f96:	230c      	movs	r3, #12
 8108f98:	602b      	str	r3, [r5, #0]
 8108f9a:	e7d6      	b.n	8108f4a <_free_r+0x22>
 8108f9c:	6820      	ldr	r0, [r4, #0]
 8108f9e:	1821      	adds	r1, r4, r0
 8108fa0:	428b      	cmp	r3, r1
 8108fa2:	bf04      	itt	eq
 8108fa4:	6819      	ldreq	r1, [r3, #0]
 8108fa6:	685b      	ldreq	r3, [r3, #4]
 8108fa8:	6063      	str	r3, [r4, #4]
 8108faa:	bf04      	itt	eq
 8108fac:	1809      	addeq	r1, r1, r0
 8108fae:	6021      	streq	r1, [r4, #0]
 8108fb0:	6054      	str	r4, [r2, #4]
 8108fb2:	e7ca      	b.n	8108f4a <_free_r+0x22>
 8108fb4:	bd38      	pop	{r3, r4, r5, pc}
 8108fb6:	bf00      	nop
 8108fb8:	100004f8 	.word	0x100004f8

08108fbc <malloc>:
 8108fbc:	4b02      	ldr	r3, [pc, #8]	@ (8108fc8 <malloc+0xc>)
 8108fbe:	4601      	mov	r1, r0
 8108fc0:	6818      	ldr	r0, [r3, #0]
 8108fc2:	f000 b825 	b.w	8109010 <_malloc_r>
 8108fc6:	bf00      	nop
 8108fc8:	1000001c 	.word	0x1000001c

08108fcc <sbrk_aligned>:
 8108fcc:	b570      	push	{r4, r5, r6, lr}
 8108fce:	4e0f      	ldr	r6, [pc, #60]	@ (810900c <sbrk_aligned+0x40>)
 8108fd0:	460c      	mov	r4, r1
 8108fd2:	6831      	ldr	r1, [r6, #0]
 8108fd4:	4605      	mov	r5, r0
 8108fd6:	b911      	cbnz	r1, 8108fde <sbrk_aligned+0x12>
 8108fd8:	f001 ffda 	bl	810af90 <_sbrk_r>
 8108fdc:	6030      	str	r0, [r6, #0]
 8108fde:	4621      	mov	r1, r4
 8108fe0:	4628      	mov	r0, r5
 8108fe2:	f001 ffd5 	bl	810af90 <_sbrk_r>
 8108fe6:	1c43      	adds	r3, r0, #1
 8108fe8:	d103      	bne.n	8108ff2 <sbrk_aligned+0x26>
 8108fea:	f04f 34ff 	mov.w	r4, #4294967295
 8108fee:	4620      	mov	r0, r4
 8108ff0:	bd70      	pop	{r4, r5, r6, pc}
 8108ff2:	1cc4      	adds	r4, r0, #3
 8108ff4:	f024 0403 	bic.w	r4, r4, #3
 8108ff8:	42a0      	cmp	r0, r4
 8108ffa:	d0f8      	beq.n	8108fee <sbrk_aligned+0x22>
 8108ffc:	1a21      	subs	r1, r4, r0
 8108ffe:	4628      	mov	r0, r5
 8109000:	f001 ffc6 	bl	810af90 <_sbrk_r>
 8109004:	3001      	adds	r0, #1
 8109006:	d1f2      	bne.n	8108fee <sbrk_aligned+0x22>
 8109008:	e7ef      	b.n	8108fea <sbrk_aligned+0x1e>
 810900a:	bf00      	nop
 810900c:	100004f4 	.word	0x100004f4

08109010 <_malloc_r>:
 8109010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109014:	1ccd      	adds	r5, r1, #3
 8109016:	f025 0503 	bic.w	r5, r5, #3
 810901a:	3508      	adds	r5, #8
 810901c:	2d0c      	cmp	r5, #12
 810901e:	bf38      	it	cc
 8109020:	250c      	movcc	r5, #12
 8109022:	2d00      	cmp	r5, #0
 8109024:	4606      	mov	r6, r0
 8109026:	db01      	blt.n	810902c <_malloc_r+0x1c>
 8109028:	42a9      	cmp	r1, r5
 810902a:	d904      	bls.n	8109036 <_malloc_r+0x26>
 810902c:	230c      	movs	r3, #12
 810902e:	6033      	str	r3, [r6, #0]
 8109030:	2000      	movs	r0, #0
 8109032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810910c <_malloc_r+0xfc>
 810903a:	f000 f869 	bl	8109110 <__malloc_lock>
 810903e:	f8d8 3000 	ldr.w	r3, [r8]
 8109042:	461c      	mov	r4, r3
 8109044:	bb44      	cbnz	r4, 8109098 <_malloc_r+0x88>
 8109046:	4629      	mov	r1, r5
 8109048:	4630      	mov	r0, r6
 810904a:	f7ff ffbf 	bl	8108fcc <sbrk_aligned>
 810904e:	1c43      	adds	r3, r0, #1
 8109050:	4604      	mov	r4, r0
 8109052:	d158      	bne.n	8109106 <_malloc_r+0xf6>
 8109054:	f8d8 4000 	ldr.w	r4, [r8]
 8109058:	4627      	mov	r7, r4
 810905a:	2f00      	cmp	r7, #0
 810905c:	d143      	bne.n	81090e6 <_malloc_r+0xd6>
 810905e:	2c00      	cmp	r4, #0
 8109060:	d04b      	beq.n	81090fa <_malloc_r+0xea>
 8109062:	6823      	ldr	r3, [r4, #0]
 8109064:	4639      	mov	r1, r7
 8109066:	4630      	mov	r0, r6
 8109068:	eb04 0903 	add.w	r9, r4, r3
 810906c:	f001 ff90 	bl	810af90 <_sbrk_r>
 8109070:	4581      	cmp	r9, r0
 8109072:	d142      	bne.n	81090fa <_malloc_r+0xea>
 8109074:	6821      	ldr	r1, [r4, #0]
 8109076:	1a6d      	subs	r5, r5, r1
 8109078:	4629      	mov	r1, r5
 810907a:	4630      	mov	r0, r6
 810907c:	f7ff ffa6 	bl	8108fcc <sbrk_aligned>
 8109080:	3001      	adds	r0, #1
 8109082:	d03a      	beq.n	81090fa <_malloc_r+0xea>
 8109084:	6823      	ldr	r3, [r4, #0]
 8109086:	442b      	add	r3, r5
 8109088:	6023      	str	r3, [r4, #0]
 810908a:	f8d8 3000 	ldr.w	r3, [r8]
 810908e:	685a      	ldr	r2, [r3, #4]
 8109090:	bb62      	cbnz	r2, 81090ec <_malloc_r+0xdc>
 8109092:	f8c8 7000 	str.w	r7, [r8]
 8109096:	e00f      	b.n	81090b8 <_malloc_r+0xa8>
 8109098:	6822      	ldr	r2, [r4, #0]
 810909a:	1b52      	subs	r2, r2, r5
 810909c:	d420      	bmi.n	81090e0 <_malloc_r+0xd0>
 810909e:	2a0b      	cmp	r2, #11
 81090a0:	d917      	bls.n	81090d2 <_malloc_r+0xc2>
 81090a2:	1961      	adds	r1, r4, r5
 81090a4:	42a3      	cmp	r3, r4
 81090a6:	6025      	str	r5, [r4, #0]
 81090a8:	bf18      	it	ne
 81090aa:	6059      	strne	r1, [r3, #4]
 81090ac:	6863      	ldr	r3, [r4, #4]
 81090ae:	bf08      	it	eq
 81090b0:	f8c8 1000 	streq.w	r1, [r8]
 81090b4:	5162      	str	r2, [r4, r5]
 81090b6:	604b      	str	r3, [r1, #4]
 81090b8:	4630      	mov	r0, r6
 81090ba:	f000 f82f 	bl	810911c <__malloc_unlock>
 81090be:	f104 000b 	add.w	r0, r4, #11
 81090c2:	1d23      	adds	r3, r4, #4
 81090c4:	f020 0007 	bic.w	r0, r0, #7
 81090c8:	1ac2      	subs	r2, r0, r3
 81090ca:	bf1c      	itt	ne
 81090cc:	1a1b      	subne	r3, r3, r0
 81090ce:	50a3      	strne	r3, [r4, r2]
 81090d0:	e7af      	b.n	8109032 <_malloc_r+0x22>
 81090d2:	6862      	ldr	r2, [r4, #4]
 81090d4:	42a3      	cmp	r3, r4
 81090d6:	bf0c      	ite	eq
 81090d8:	f8c8 2000 	streq.w	r2, [r8]
 81090dc:	605a      	strne	r2, [r3, #4]
 81090de:	e7eb      	b.n	81090b8 <_malloc_r+0xa8>
 81090e0:	4623      	mov	r3, r4
 81090e2:	6864      	ldr	r4, [r4, #4]
 81090e4:	e7ae      	b.n	8109044 <_malloc_r+0x34>
 81090e6:	463c      	mov	r4, r7
 81090e8:	687f      	ldr	r7, [r7, #4]
 81090ea:	e7b6      	b.n	810905a <_malloc_r+0x4a>
 81090ec:	461a      	mov	r2, r3
 81090ee:	685b      	ldr	r3, [r3, #4]
 81090f0:	42a3      	cmp	r3, r4
 81090f2:	d1fb      	bne.n	81090ec <_malloc_r+0xdc>
 81090f4:	2300      	movs	r3, #0
 81090f6:	6053      	str	r3, [r2, #4]
 81090f8:	e7de      	b.n	81090b8 <_malloc_r+0xa8>
 81090fa:	230c      	movs	r3, #12
 81090fc:	6033      	str	r3, [r6, #0]
 81090fe:	4630      	mov	r0, r6
 8109100:	f000 f80c 	bl	810911c <__malloc_unlock>
 8109104:	e794      	b.n	8109030 <_malloc_r+0x20>
 8109106:	6005      	str	r5, [r0, #0]
 8109108:	e7d6      	b.n	81090b8 <_malloc_r+0xa8>
 810910a:	bf00      	nop
 810910c:	100004f8 	.word	0x100004f8

08109110 <__malloc_lock>:
 8109110:	4801      	ldr	r0, [pc, #4]	@ (8109118 <__malloc_lock+0x8>)
 8109112:	f7ff b8a6 	b.w	8108262 <__retarget_lock_acquire_recursive>
 8109116:	bf00      	nop
 8109118:	100004f0 	.word	0x100004f0

0810911c <__malloc_unlock>:
 810911c:	4801      	ldr	r0, [pc, #4]	@ (8109124 <__malloc_unlock+0x8>)
 810911e:	f7ff b8a1 	b.w	8108264 <__retarget_lock_release_recursive>
 8109122:	bf00      	nop
 8109124:	100004f0 	.word	0x100004f0

08109128 <_Balloc>:
 8109128:	b570      	push	{r4, r5, r6, lr}
 810912a:	69c6      	ldr	r6, [r0, #28]
 810912c:	4604      	mov	r4, r0
 810912e:	460d      	mov	r5, r1
 8109130:	b976      	cbnz	r6, 8109150 <_Balloc+0x28>
 8109132:	2010      	movs	r0, #16
 8109134:	f7ff ff42 	bl	8108fbc <malloc>
 8109138:	4602      	mov	r2, r0
 810913a:	61e0      	str	r0, [r4, #28]
 810913c:	b920      	cbnz	r0, 8109148 <_Balloc+0x20>
 810913e:	4b18      	ldr	r3, [pc, #96]	@ (81091a0 <_Balloc+0x78>)
 8109140:	4818      	ldr	r0, [pc, #96]	@ (81091a4 <_Balloc+0x7c>)
 8109142:	216b      	movs	r1, #107	@ 0x6b
 8109144:	f001 ff4c 	bl	810afe0 <__assert_func>
 8109148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810914c:	6006      	str	r6, [r0, #0]
 810914e:	60c6      	str	r6, [r0, #12]
 8109150:	69e6      	ldr	r6, [r4, #28]
 8109152:	68f3      	ldr	r3, [r6, #12]
 8109154:	b183      	cbz	r3, 8109178 <_Balloc+0x50>
 8109156:	69e3      	ldr	r3, [r4, #28]
 8109158:	68db      	ldr	r3, [r3, #12]
 810915a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810915e:	b9b8      	cbnz	r0, 8109190 <_Balloc+0x68>
 8109160:	2101      	movs	r1, #1
 8109162:	fa01 f605 	lsl.w	r6, r1, r5
 8109166:	1d72      	adds	r2, r6, #5
 8109168:	0092      	lsls	r2, r2, #2
 810916a:	4620      	mov	r0, r4
 810916c:	f001 ff56 	bl	810b01c <_calloc_r>
 8109170:	b160      	cbz	r0, 810918c <_Balloc+0x64>
 8109172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8109176:	e00e      	b.n	8109196 <_Balloc+0x6e>
 8109178:	2221      	movs	r2, #33	@ 0x21
 810917a:	2104      	movs	r1, #4
 810917c:	4620      	mov	r0, r4
 810917e:	f001 ff4d 	bl	810b01c <_calloc_r>
 8109182:	69e3      	ldr	r3, [r4, #28]
 8109184:	60f0      	str	r0, [r6, #12]
 8109186:	68db      	ldr	r3, [r3, #12]
 8109188:	2b00      	cmp	r3, #0
 810918a:	d1e4      	bne.n	8109156 <_Balloc+0x2e>
 810918c:	2000      	movs	r0, #0
 810918e:	bd70      	pop	{r4, r5, r6, pc}
 8109190:	6802      	ldr	r2, [r0, #0]
 8109192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8109196:	2300      	movs	r3, #0
 8109198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810919c:	e7f7      	b.n	810918e <_Balloc+0x66>
 810919e:	bf00      	nop
 81091a0:	0810b9fe 	.word	0x0810b9fe
 81091a4:	0810ba7e 	.word	0x0810ba7e

081091a8 <_Bfree>:
 81091a8:	b570      	push	{r4, r5, r6, lr}
 81091aa:	69c6      	ldr	r6, [r0, #28]
 81091ac:	4605      	mov	r5, r0
 81091ae:	460c      	mov	r4, r1
 81091b0:	b976      	cbnz	r6, 81091d0 <_Bfree+0x28>
 81091b2:	2010      	movs	r0, #16
 81091b4:	f7ff ff02 	bl	8108fbc <malloc>
 81091b8:	4602      	mov	r2, r0
 81091ba:	61e8      	str	r0, [r5, #28]
 81091bc:	b920      	cbnz	r0, 81091c8 <_Bfree+0x20>
 81091be:	4b09      	ldr	r3, [pc, #36]	@ (81091e4 <_Bfree+0x3c>)
 81091c0:	4809      	ldr	r0, [pc, #36]	@ (81091e8 <_Bfree+0x40>)
 81091c2:	218f      	movs	r1, #143	@ 0x8f
 81091c4:	f001 ff0c 	bl	810afe0 <__assert_func>
 81091c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81091cc:	6006      	str	r6, [r0, #0]
 81091ce:	60c6      	str	r6, [r0, #12]
 81091d0:	b13c      	cbz	r4, 81091e2 <_Bfree+0x3a>
 81091d2:	69eb      	ldr	r3, [r5, #28]
 81091d4:	6862      	ldr	r2, [r4, #4]
 81091d6:	68db      	ldr	r3, [r3, #12]
 81091d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81091dc:	6021      	str	r1, [r4, #0]
 81091de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81091e2:	bd70      	pop	{r4, r5, r6, pc}
 81091e4:	0810b9fe 	.word	0x0810b9fe
 81091e8:	0810ba7e 	.word	0x0810ba7e

081091ec <__multadd>:
 81091ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81091f0:	690d      	ldr	r5, [r1, #16]
 81091f2:	4607      	mov	r7, r0
 81091f4:	460c      	mov	r4, r1
 81091f6:	461e      	mov	r6, r3
 81091f8:	f101 0c14 	add.w	ip, r1, #20
 81091fc:	2000      	movs	r0, #0
 81091fe:	f8dc 3000 	ldr.w	r3, [ip]
 8109202:	b299      	uxth	r1, r3
 8109204:	fb02 6101 	mla	r1, r2, r1, r6
 8109208:	0c1e      	lsrs	r6, r3, #16
 810920a:	0c0b      	lsrs	r3, r1, #16
 810920c:	fb02 3306 	mla	r3, r2, r6, r3
 8109210:	b289      	uxth	r1, r1
 8109212:	3001      	adds	r0, #1
 8109214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8109218:	4285      	cmp	r5, r0
 810921a:	f84c 1b04 	str.w	r1, [ip], #4
 810921e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8109222:	dcec      	bgt.n	81091fe <__multadd+0x12>
 8109224:	b30e      	cbz	r6, 810926a <__multadd+0x7e>
 8109226:	68a3      	ldr	r3, [r4, #8]
 8109228:	42ab      	cmp	r3, r5
 810922a:	dc19      	bgt.n	8109260 <__multadd+0x74>
 810922c:	6861      	ldr	r1, [r4, #4]
 810922e:	4638      	mov	r0, r7
 8109230:	3101      	adds	r1, #1
 8109232:	f7ff ff79 	bl	8109128 <_Balloc>
 8109236:	4680      	mov	r8, r0
 8109238:	b928      	cbnz	r0, 8109246 <__multadd+0x5a>
 810923a:	4602      	mov	r2, r0
 810923c:	4b0c      	ldr	r3, [pc, #48]	@ (8109270 <__multadd+0x84>)
 810923e:	480d      	ldr	r0, [pc, #52]	@ (8109274 <__multadd+0x88>)
 8109240:	21ba      	movs	r1, #186	@ 0xba
 8109242:	f001 fecd 	bl	810afe0 <__assert_func>
 8109246:	6922      	ldr	r2, [r4, #16]
 8109248:	3202      	adds	r2, #2
 810924a:	f104 010c 	add.w	r1, r4, #12
 810924e:	0092      	lsls	r2, r2, #2
 8109250:	300c      	adds	r0, #12
 8109252:	f001 fead 	bl	810afb0 <memcpy>
 8109256:	4621      	mov	r1, r4
 8109258:	4638      	mov	r0, r7
 810925a:	f7ff ffa5 	bl	81091a8 <_Bfree>
 810925e:	4644      	mov	r4, r8
 8109260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8109264:	3501      	adds	r5, #1
 8109266:	615e      	str	r6, [r3, #20]
 8109268:	6125      	str	r5, [r4, #16]
 810926a:	4620      	mov	r0, r4
 810926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109270:	0810ba6d 	.word	0x0810ba6d
 8109274:	0810ba7e 	.word	0x0810ba7e

08109278 <__s2b>:
 8109278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810927c:	460c      	mov	r4, r1
 810927e:	4615      	mov	r5, r2
 8109280:	461f      	mov	r7, r3
 8109282:	2209      	movs	r2, #9
 8109284:	3308      	adds	r3, #8
 8109286:	4606      	mov	r6, r0
 8109288:	fb93 f3f2 	sdiv	r3, r3, r2
 810928c:	2100      	movs	r1, #0
 810928e:	2201      	movs	r2, #1
 8109290:	429a      	cmp	r2, r3
 8109292:	db09      	blt.n	81092a8 <__s2b+0x30>
 8109294:	4630      	mov	r0, r6
 8109296:	f7ff ff47 	bl	8109128 <_Balloc>
 810929a:	b940      	cbnz	r0, 81092ae <__s2b+0x36>
 810929c:	4602      	mov	r2, r0
 810929e:	4b19      	ldr	r3, [pc, #100]	@ (8109304 <__s2b+0x8c>)
 81092a0:	4819      	ldr	r0, [pc, #100]	@ (8109308 <__s2b+0x90>)
 81092a2:	21d3      	movs	r1, #211	@ 0xd3
 81092a4:	f001 fe9c 	bl	810afe0 <__assert_func>
 81092a8:	0052      	lsls	r2, r2, #1
 81092aa:	3101      	adds	r1, #1
 81092ac:	e7f0      	b.n	8109290 <__s2b+0x18>
 81092ae:	9b08      	ldr	r3, [sp, #32]
 81092b0:	6143      	str	r3, [r0, #20]
 81092b2:	2d09      	cmp	r5, #9
 81092b4:	f04f 0301 	mov.w	r3, #1
 81092b8:	6103      	str	r3, [r0, #16]
 81092ba:	dd16      	ble.n	81092ea <__s2b+0x72>
 81092bc:	f104 0909 	add.w	r9, r4, #9
 81092c0:	46c8      	mov	r8, r9
 81092c2:	442c      	add	r4, r5
 81092c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 81092c8:	4601      	mov	r1, r0
 81092ca:	3b30      	subs	r3, #48	@ 0x30
 81092cc:	220a      	movs	r2, #10
 81092ce:	4630      	mov	r0, r6
 81092d0:	f7ff ff8c 	bl	81091ec <__multadd>
 81092d4:	45a0      	cmp	r8, r4
 81092d6:	d1f5      	bne.n	81092c4 <__s2b+0x4c>
 81092d8:	f1a5 0408 	sub.w	r4, r5, #8
 81092dc:	444c      	add	r4, r9
 81092de:	1b2d      	subs	r5, r5, r4
 81092e0:	1963      	adds	r3, r4, r5
 81092e2:	42bb      	cmp	r3, r7
 81092e4:	db04      	blt.n	81092f0 <__s2b+0x78>
 81092e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81092ea:	340a      	adds	r4, #10
 81092ec:	2509      	movs	r5, #9
 81092ee:	e7f6      	b.n	81092de <__s2b+0x66>
 81092f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 81092f4:	4601      	mov	r1, r0
 81092f6:	3b30      	subs	r3, #48	@ 0x30
 81092f8:	220a      	movs	r2, #10
 81092fa:	4630      	mov	r0, r6
 81092fc:	f7ff ff76 	bl	81091ec <__multadd>
 8109300:	e7ee      	b.n	81092e0 <__s2b+0x68>
 8109302:	bf00      	nop
 8109304:	0810ba6d 	.word	0x0810ba6d
 8109308:	0810ba7e 	.word	0x0810ba7e

0810930c <__hi0bits>:
 810930c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8109310:	4603      	mov	r3, r0
 8109312:	bf36      	itet	cc
 8109314:	0403      	lslcc	r3, r0, #16
 8109316:	2000      	movcs	r0, #0
 8109318:	2010      	movcc	r0, #16
 810931a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810931e:	bf3c      	itt	cc
 8109320:	021b      	lslcc	r3, r3, #8
 8109322:	3008      	addcc	r0, #8
 8109324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109328:	bf3c      	itt	cc
 810932a:	011b      	lslcc	r3, r3, #4
 810932c:	3004      	addcc	r0, #4
 810932e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109332:	bf3c      	itt	cc
 8109334:	009b      	lslcc	r3, r3, #2
 8109336:	3002      	addcc	r0, #2
 8109338:	2b00      	cmp	r3, #0
 810933a:	db05      	blt.n	8109348 <__hi0bits+0x3c>
 810933c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8109340:	f100 0001 	add.w	r0, r0, #1
 8109344:	bf08      	it	eq
 8109346:	2020      	moveq	r0, #32
 8109348:	4770      	bx	lr

0810934a <__lo0bits>:
 810934a:	6803      	ldr	r3, [r0, #0]
 810934c:	4602      	mov	r2, r0
 810934e:	f013 0007 	ands.w	r0, r3, #7
 8109352:	d00b      	beq.n	810936c <__lo0bits+0x22>
 8109354:	07d9      	lsls	r1, r3, #31
 8109356:	d421      	bmi.n	810939c <__lo0bits+0x52>
 8109358:	0798      	lsls	r0, r3, #30
 810935a:	bf49      	itett	mi
 810935c:	085b      	lsrmi	r3, r3, #1
 810935e:	089b      	lsrpl	r3, r3, #2
 8109360:	2001      	movmi	r0, #1
 8109362:	6013      	strmi	r3, [r2, #0]
 8109364:	bf5c      	itt	pl
 8109366:	6013      	strpl	r3, [r2, #0]
 8109368:	2002      	movpl	r0, #2
 810936a:	4770      	bx	lr
 810936c:	b299      	uxth	r1, r3
 810936e:	b909      	cbnz	r1, 8109374 <__lo0bits+0x2a>
 8109370:	0c1b      	lsrs	r3, r3, #16
 8109372:	2010      	movs	r0, #16
 8109374:	b2d9      	uxtb	r1, r3
 8109376:	b909      	cbnz	r1, 810937c <__lo0bits+0x32>
 8109378:	3008      	adds	r0, #8
 810937a:	0a1b      	lsrs	r3, r3, #8
 810937c:	0719      	lsls	r1, r3, #28
 810937e:	bf04      	itt	eq
 8109380:	091b      	lsreq	r3, r3, #4
 8109382:	3004      	addeq	r0, #4
 8109384:	0799      	lsls	r1, r3, #30
 8109386:	bf04      	itt	eq
 8109388:	089b      	lsreq	r3, r3, #2
 810938a:	3002      	addeq	r0, #2
 810938c:	07d9      	lsls	r1, r3, #31
 810938e:	d403      	bmi.n	8109398 <__lo0bits+0x4e>
 8109390:	085b      	lsrs	r3, r3, #1
 8109392:	f100 0001 	add.w	r0, r0, #1
 8109396:	d003      	beq.n	81093a0 <__lo0bits+0x56>
 8109398:	6013      	str	r3, [r2, #0]
 810939a:	4770      	bx	lr
 810939c:	2000      	movs	r0, #0
 810939e:	4770      	bx	lr
 81093a0:	2020      	movs	r0, #32
 81093a2:	4770      	bx	lr

081093a4 <__i2b>:
 81093a4:	b510      	push	{r4, lr}
 81093a6:	460c      	mov	r4, r1
 81093a8:	2101      	movs	r1, #1
 81093aa:	f7ff febd 	bl	8109128 <_Balloc>
 81093ae:	4602      	mov	r2, r0
 81093b0:	b928      	cbnz	r0, 81093be <__i2b+0x1a>
 81093b2:	4b05      	ldr	r3, [pc, #20]	@ (81093c8 <__i2b+0x24>)
 81093b4:	4805      	ldr	r0, [pc, #20]	@ (81093cc <__i2b+0x28>)
 81093b6:	f240 1145 	movw	r1, #325	@ 0x145
 81093ba:	f001 fe11 	bl	810afe0 <__assert_func>
 81093be:	2301      	movs	r3, #1
 81093c0:	6144      	str	r4, [r0, #20]
 81093c2:	6103      	str	r3, [r0, #16]
 81093c4:	bd10      	pop	{r4, pc}
 81093c6:	bf00      	nop
 81093c8:	0810ba6d 	.word	0x0810ba6d
 81093cc:	0810ba7e 	.word	0x0810ba7e

081093d0 <__multiply>:
 81093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093d4:	4617      	mov	r7, r2
 81093d6:	690a      	ldr	r2, [r1, #16]
 81093d8:	693b      	ldr	r3, [r7, #16]
 81093da:	429a      	cmp	r2, r3
 81093dc:	bfa8      	it	ge
 81093de:	463b      	movge	r3, r7
 81093e0:	4689      	mov	r9, r1
 81093e2:	bfa4      	itt	ge
 81093e4:	460f      	movge	r7, r1
 81093e6:	4699      	movge	r9, r3
 81093e8:	693d      	ldr	r5, [r7, #16]
 81093ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 81093ee:	68bb      	ldr	r3, [r7, #8]
 81093f0:	6879      	ldr	r1, [r7, #4]
 81093f2:	eb05 060a 	add.w	r6, r5, sl
 81093f6:	42b3      	cmp	r3, r6
 81093f8:	b085      	sub	sp, #20
 81093fa:	bfb8      	it	lt
 81093fc:	3101      	addlt	r1, #1
 81093fe:	f7ff fe93 	bl	8109128 <_Balloc>
 8109402:	b930      	cbnz	r0, 8109412 <__multiply+0x42>
 8109404:	4602      	mov	r2, r0
 8109406:	4b41      	ldr	r3, [pc, #260]	@ (810950c <__multiply+0x13c>)
 8109408:	4841      	ldr	r0, [pc, #260]	@ (8109510 <__multiply+0x140>)
 810940a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810940e:	f001 fde7 	bl	810afe0 <__assert_func>
 8109412:	f100 0414 	add.w	r4, r0, #20
 8109416:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 810941a:	4623      	mov	r3, r4
 810941c:	2200      	movs	r2, #0
 810941e:	4573      	cmp	r3, lr
 8109420:	d320      	bcc.n	8109464 <__multiply+0x94>
 8109422:	f107 0814 	add.w	r8, r7, #20
 8109426:	f109 0114 	add.w	r1, r9, #20
 810942a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 810942e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8109432:	9302      	str	r3, [sp, #8]
 8109434:	1beb      	subs	r3, r5, r7
 8109436:	3b15      	subs	r3, #21
 8109438:	f023 0303 	bic.w	r3, r3, #3
 810943c:	3304      	adds	r3, #4
 810943e:	3715      	adds	r7, #21
 8109440:	42bd      	cmp	r5, r7
 8109442:	bf38      	it	cc
 8109444:	2304      	movcc	r3, #4
 8109446:	9301      	str	r3, [sp, #4]
 8109448:	9b02      	ldr	r3, [sp, #8]
 810944a:	9103      	str	r1, [sp, #12]
 810944c:	428b      	cmp	r3, r1
 810944e:	d80c      	bhi.n	810946a <__multiply+0x9a>
 8109450:	2e00      	cmp	r6, #0
 8109452:	dd03      	ble.n	810945c <__multiply+0x8c>
 8109454:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8109458:	2b00      	cmp	r3, #0
 810945a:	d055      	beq.n	8109508 <__multiply+0x138>
 810945c:	6106      	str	r6, [r0, #16]
 810945e:	b005      	add	sp, #20
 8109460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109464:	f843 2b04 	str.w	r2, [r3], #4
 8109468:	e7d9      	b.n	810941e <__multiply+0x4e>
 810946a:	f8b1 a000 	ldrh.w	sl, [r1]
 810946e:	f1ba 0f00 	cmp.w	sl, #0
 8109472:	d01f      	beq.n	81094b4 <__multiply+0xe4>
 8109474:	46c4      	mov	ip, r8
 8109476:	46a1      	mov	r9, r4
 8109478:	2700      	movs	r7, #0
 810947a:	f85c 2b04 	ldr.w	r2, [ip], #4
 810947e:	f8d9 3000 	ldr.w	r3, [r9]
 8109482:	fa1f fb82 	uxth.w	fp, r2
 8109486:	b29b      	uxth	r3, r3
 8109488:	fb0a 330b 	mla	r3, sl, fp, r3
 810948c:	443b      	add	r3, r7
 810948e:	f8d9 7000 	ldr.w	r7, [r9]
 8109492:	0c12      	lsrs	r2, r2, #16
 8109494:	0c3f      	lsrs	r7, r7, #16
 8109496:	fb0a 7202 	mla	r2, sl, r2, r7
 810949a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 810949e:	b29b      	uxth	r3, r3
 81094a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81094a4:	4565      	cmp	r5, ip
 81094a6:	f849 3b04 	str.w	r3, [r9], #4
 81094aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 81094ae:	d8e4      	bhi.n	810947a <__multiply+0xaa>
 81094b0:	9b01      	ldr	r3, [sp, #4]
 81094b2:	50e7      	str	r7, [r4, r3]
 81094b4:	9b03      	ldr	r3, [sp, #12]
 81094b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81094ba:	3104      	adds	r1, #4
 81094bc:	f1b9 0f00 	cmp.w	r9, #0
 81094c0:	d020      	beq.n	8109504 <__multiply+0x134>
 81094c2:	6823      	ldr	r3, [r4, #0]
 81094c4:	4647      	mov	r7, r8
 81094c6:	46a4      	mov	ip, r4
 81094c8:	f04f 0a00 	mov.w	sl, #0
 81094cc:	f8b7 b000 	ldrh.w	fp, [r7]
 81094d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 81094d4:	fb09 220b 	mla	r2, r9, fp, r2
 81094d8:	4452      	add	r2, sl
 81094da:	b29b      	uxth	r3, r3
 81094dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81094e0:	f84c 3b04 	str.w	r3, [ip], #4
 81094e4:	f857 3b04 	ldr.w	r3, [r7], #4
 81094e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81094ec:	f8bc 3000 	ldrh.w	r3, [ip]
 81094f0:	fb09 330a 	mla	r3, r9, sl, r3
 81094f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 81094f8:	42bd      	cmp	r5, r7
 81094fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81094fe:	d8e5      	bhi.n	81094cc <__multiply+0xfc>
 8109500:	9a01      	ldr	r2, [sp, #4]
 8109502:	50a3      	str	r3, [r4, r2]
 8109504:	3404      	adds	r4, #4
 8109506:	e79f      	b.n	8109448 <__multiply+0x78>
 8109508:	3e01      	subs	r6, #1
 810950a:	e7a1      	b.n	8109450 <__multiply+0x80>
 810950c:	0810ba6d 	.word	0x0810ba6d
 8109510:	0810ba7e 	.word	0x0810ba7e

08109514 <__pow5mult>:
 8109514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109518:	4615      	mov	r5, r2
 810951a:	f012 0203 	ands.w	r2, r2, #3
 810951e:	4607      	mov	r7, r0
 8109520:	460e      	mov	r6, r1
 8109522:	d007      	beq.n	8109534 <__pow5mult+0x20>
 8109524:	4c25      	ldr	r4, [pc, #148]	@ (81095bc <__pow5mult+0xa8>)
 8109526:	3a01      	subs	r2, #1
 8109528:	2300      	movs	r3, #0
 810952a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810952e:	f7ff fe5d 	bl	81091ec <__multadd>
 8109532:	4606      	mov	r6, r0
 8109534:	10ad      	asrs	r5, r5, #2
 8109536:	d03d      	beq.n	81095b4 <__pow5mult+0xa0>
 8109538:	69fc      	ldr	r4, [r7, #28]
 810953a:	b97c      	cbnz	r4, 810955c <__pow5mult+0x48>
 810953c:	2010      	movs	r0, #16
 810953e:	f7ff fd3d 	bl	8108fbc <malloc>
 8109542:	4602      	mov	r2, r0
 8109544:	61f8      	str	r0, [r7, #28]
 8109546:	b928      	cbnz	r0, 8109554 <__pow5mult+0x40>
 8109548:	4b1d      	ldr	r3, [pc, #116]	@ (81095c0 <__pow5mult+0xac>)
 810954a:	481e      	ldr	r0, [pc, #120]	@ (81095c4 <__pow5mult+0xb0>)
 810954c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8109550:	f001 fd46 	bl	810afe0 <__assert_func>
 8109554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8109558:	6004      	str	r4, [r0, #0]
 810955a:	60c4      	str	r4, [r0, #12]
 810955c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8109560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8109564:	b94c      	cbnz	r4, 810957a <__pow5mult+0x66>
 8109566:	f240 2171 	movw	r1, #625	@ 0x271
 810956a:	4638      	mov	r0, r7
 810956c:	f7ff ff1a 	bl	81093a4 <__i2b>
 8109570:	2300      	movs	r3, #0
 8109572:	f8c8 0008 	str.w	r0, [r8, #8]
 8109576:	4604      	mov	r4, r0
 8109578:	6003      	str	r3, [r0, #0]
 810957a:	f04f 0900 	mov.w	r9, #0
 810957e:	07eb      	lsls	r3, r5, #31
 8109580:	d50a      	bpl.n	8109598 <__pow5mult+0x84>
 8109582:	4631      	mov	r1, r6
 8109584:	4622      	mov	r2, r4
 8109586:	4638      	mov	r0, r7
 8109588:	f7ff ff22 	bl	81093d0 <__multiply>
 810958c:	4631      	mov	r1, r6
 810958e:	4680      	mov	r8, r0
 8109590:	4638      	mov	r0, r7
 8109592:	f7ff fe09 	bl	81091a8 <_Bfree>
 8109596:	4646      	mov	r6, r8
 8109598:	106d      	asrs	r5, r5, #1
 810959a:	d00b      	beq.n	81095b4 <__pow5mult+0xa0>
 810959c:	6820      	ldr	r0, [r4, #0]
 810959e:	b938      	cbnz	r0, 81095b0 <__pow5mult+0x9c>
 81095a0:	4622      	mov	r2, r4
 81095a2:	4621      	mov	r1, r4
 81095a4:	4638      	mov	r0, r7
 81095a6:	f7ff ff13 	bl	81093d0 <__multiply>
 81095aa:	6020      	str	r0, [r4, #0]
 81095ac:	f8c0 9000 	str.w	r9, [r0]
 81095b0:	4604      	mov	r4, r0
 81095b2:	e7e4      	b.n	810957e <__pow5mult+0x6a>
 81095b4:	4630      	mov	r0, r6
 81095b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81095ba:	bf00      	nop
 81095bc:	0810bb90 	.word	0x0810bb90
 81095c0:	0810b9fe 	.word	0x0810b9fe
 81095c4:	0810ba7e 	.word	0x0810ba7e

081095c8 <__lshift>:
 81095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81095cc:	460c      	mov	r4, r1
 81095ce:	6849      	ldr	r1, [r1, #4]
 81095d0:	6923      	ldr	r3, [r4, #16]
 81095d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81095d6:	68a3      	ldr	r3, [r4, #8]
 81095d8:	4607      	mov	r7, r0
 81095da:	4691      	mov	r9, r2
 81095dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81095e0:	f108 0601 	add.w	r6, r8, #1
 81095e4:	42b3      	cmp	r3, r6
 81095e6:	db0b      	blt.n	8109600 <__lshift+0x38>
 81095e8:	4638      	mov	r0, r7
 81095ea:	f7ff fd9d 	bl	8109128 <_Balloc>
 81095ee:	4605      	mov	r5, r0
 81095f0:	b948      	cbnz	r0, 8109606 <__lshift+0x3e>
 81095f2:	4602      	mov	r2, r0
 81095f4:	4b28      	ldr	r3, [pc, #160]	@ (8109698 <__lshift+0xd0>)
 81095f6:	4829      	ldr	r0, [pc, #164]	@ (810969c <__lshift+0xd4>)
 81095f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 81095fc:	f001 fcf0 	bl	810afe0 <__assert_func>
 8109600:	3101      	adds	r1, #1
 8109602:	005b      	lsls	r3, r3, #1
 8109604:	e7ee      	b.n	81095e4 <__lshift+0x1c>
 8109606:	2300      	movs	r3, #0
 8109608:	f100 0114 	add.w	r1, r0, #20
 810960c:	f100 0210 	add.w	r2, r0, #16
 8109610:	4618      	mov	r0, r3
 8109612:	4553      	cmp	r3, sl
 8109614:	db33      	blt.n	810967e <__lshift+0xb6>
 8109616:	6920      	ldr	r0, [r4, #16]
 8109618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810961c:	f104 0314 	add.w	r3, r4, #20
 8109620:	f019 091f 	ands.w	r9, r9, #31
 8109624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8109628:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810962c:	d02b      	beq.n	8109686 <__lshift+0xbe>
 810962e:	f1c9 0e20 	rsb	lr, r9, #32
 8109632:	468a      	mov	sl, r1
 8109634:	2200      	movs	r2, #0
 8109636:	6818      	ldr	r0, [r3, #0]
 8109638:	fa00 f009 	lsl.w	r0, r0, r9
 810963c:	4310      	orrs	r0, r2
 810963e:	f84a 0b04 	str.w	r0, [sl], #4
 8109642:	f853 2b04 	ldr.w	r2, [r3], #4
 8109646:	459c      	cmp	ip, r3
 8109648:	fa22 f20e 	lsr.w	r2, r2, lr
 810964c:	d8f3      	bhi.n	8109636 <__lshift+0x6e>
 810964e:	ebac 0304 	sub.w	r3, ip, r4
 8109652:	3b15      	subs	r3, #21
 8109654:	f023 0303 	bic.w	r3, r3, #3
 8109658:	3304      	adds	r3, #4
 810965a:	f104 0015 	add.w	r0, r4, #21
 810965e:	4560      	cmp	r0, ip
 8109660:	bf88      	it	hi
 8109662:	2304      	movhi	r3, #4
 8109664:	50ca      	str	r2, [r1, r3]
 8109666:	b10a      	cbz	r2, 810966c <__lshift+0xa4>
 8109668:	f108 0602 	add.w	r6, r8, #2
 810966c:	3e01      	subs	r6, #1
 810966e:	4638      	mov	r0, r7
 8109670:	612e      	str	r6, [r5, #16]
 8109672:	4621      	mov	r1, r4
 8109674:	f7ff fd98 	bl	81091a8 <_Bfree>
 8109678:	4628      	mov	r0, r5
 810967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810967e:	f842 0f04 	str.w	r0, [r2, #4]!
 8109682:	3301      	adds	r3, #1
 8109684:	e7c5      	b.n	8109612 <__lshift+0x4a>
 8109686:	3904      	subs	r1, #4
 8109688:	f853 2b04 	ldr.w	r2, [r3], #4
 810968c:	f841 2f04 	str.w	r2, [r1, #4]!
 8109690:	459c      	cmp	ip, r3
 8109692:	d8f9      	bhi.n	8109688 <__lshift+0xc0>
 8109694:	e7ea      	b.n	810966c <__lshift+0xa4>
 8109696:	bf00      	nop
 8109698:	0810ba6d 	.word	0x0810ba6d
 810969c:	0810ba7e 	.word	0x0810ba7e

081096a0 <__mcmp>:
 81096a0:	690a      	ldr	r2, [r1, #16]
 81096a2:	4603      	mov	r3, r0
 81096a4:	6900      	ldr	r0, [r0, #16]
 81096a6:	1a80      	subs	r0, r0, r2
 81096a8:	b530      	push	{r4, r5, lr}
 81096aa:	d10e      	bne.n	81096ca <__mcmp+0x2a>
 81096ac:	3314      	adds	r3, #20
 81096ae:	3114      	adds	r1, #20
 81096b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81096b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 81096b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 81096bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 81096c0:	4295      	cmp	r5, r2
 81096c2:	d003      	beq.n	81096cc <__mcmp+0x2c>
 81096c4:	d205      	bcs.n	81096d2 <__mcmp+0x32>
 81096c6:	f04f 30ff 	mov.w	r0, #4294967295
 81096ca:	bd30      	pop	{r4, r5, pc}
 81096cc:	42a3      	cmp	r3, r4
 81096ce:	d3f3      	bcc.n	81096b8 <__mcmp+0x18>
 81096d0:	e7fb      	b.n	81096ca <__mcmp+0x2a>
 81096d2:	2001      	movs	r0, #1
 81096d4:	e7f9      	b.n	81096ca <__mcmp+0x2a>
	...

081096d8 <__mdiff>:
 81096d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81096dc:	4689      	mov	r9, r1
 81096de:	4606      	mov	r6, r0
 81096e0:	4611      	mov	r1, r2
 81096e2:	4648      	mov	r0, r9
 81096e4:	4614      	mov	r4, r2
 81096e6:	f7ff ffdb 	bl	81096a0 <__mcmp>
 81096ea:	1e05      	subs	r5, r0, #0
 81096ec:	d112      	bne.n	8109714 <__mdiff+0x3c>
 81096ee:	4629      	mov	r1, r5
 81096f0:	4630      	mov	r0, r6
 81096f2:	f7ff fd19 	bl	8109128 <_Balloc>
 81096f6:	4602      	mov	r2, r0
 81096f8:	b928      	cbnz	r0, 8109706 <__mdiff+0x2e>
 81096fa:	4b3f      	ldr	r3, [pc, #252]	@ (81097f8 <__mdiff+0x120>)
 81096fc:	f240 2137 	movw	r1, #567	@ 0x237
 8109700:	483e      	ldr	r0, [pc, #248]	@ (81097fc <__mdiff+0x124>)
 8109702:	f001 fc6d 	bl	810afe0 <__assert_func>
 8109706:	2301      	movs	r3, #1
 8109708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810970c:	4610      	mov	r0, r2
 810970e:	b003      	add	sp, #12
 8109710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109714:	bfbc      	itt	lt
 8109716:	464b      	movlt	r3, r9
 8109718:	46a1      	movlt	r9, r4
 810971a:	4630      	mov	r0, r6
 810971c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8109720:	bfba      	itte	lt
 8109722:	461c      	movlt	r4, r3
 8109724:	2501      	movlt	r5, #1
 8109726:	2500      	movge	r5, #0
 8109728:	f7ff fcfe 	bl	8109128 <_Balloc>
 810972c:	4602      	mov	r2, r0
 810972e:	b918      	cbnz	r0, 8109738 <__mdiff+0x60>
 8109730:	4b31      	ldr	r3, [pc, #196]	@ (81097f8 <__mdiff+0x120>)
 8109732:	f240 2145 	movw	r1, #581	@ 0x245
 8109736:	e7e3      	b.n	8109700 <__mdiff+0x28>
 8109738:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810973c:	6926      	ldr	r6, [r4, #16]
 810973e:	60c5      	str	r5, [r0, #12]
 8109740:	f109 0310 	add.w	r3, r9, #16
 8109744:	f109 0514 	add.w	r5, r9, #20
 8109748:	f104 0e14 	add.w	lr, r4, #20
 810974c:	f100 0b14 	add.w	fp, r0, #20
 8109750:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8109754:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8109758:	9301      	str	r3, [sp, #4]
 810975a:	46d9      	mov	r9, fp
 810975c:	f04f 0c00 	mov.w	ip, #0
 8109760:	9b01      	ldr	r3, [sp, #4]
 8109762:	f85e 0b04 	ldr.w	r0, [lr], #4
 8109766:	f853 af04 	ldr.w	sl, [r3, #4]!
 810976a:	9301      	str	r3, [sp, #4]
 810976c:	fa1f f38a 	uxth.w	r3, sl
 8109770:	4619      	mov	r1, r3
 8109772:	b283      	uxth	r3, r0
 8109774:	1acb      	subs	r3, r1, r3
 8109776:	0c00      	lsrs	r0, r0, #16
 8109778:	4463      	add	r3, ip
 810977a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810977e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8109782:	b29b      	uxth	r3, r3
 8109784:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8109788:	4576      	cmp	r6, lr
 810978a:	f849 3b04 	str.w	r3, [r9], #4
 810978e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8109792:	d8e5      	bhi.n	8109760 <__mdiff+0x88>
 8109794:	1b33      	subs	r3, r6, r4
 8109796:	3b15      	subs	r3, #21
 8109798:	f023 0303 	bic.w	r3, r3, #3
 810979c:	3415      	adds	r4, #21
 810979e:	3304      	adds	r3, #4
 81097a0:	42a6      	cmp	r6, r4
 81097a2:	bf38      	it	cc
 81097a4:	2304      	movcc	r3, #4
 81097a6:	441d      	add	r5, r3
 81097a8:	445b      	add	r3, fp
 81097aa:	461e      	mov	r6, r3
 81097ac:	462c      	mov	r4, r5
 81097ae:	4544      	cmp	r4, r8
 81097b0:	d30e      	bcc.n	81097d0 <__mdiff+0xf8>
 81097b2:	f108 0103 	add.w	r1, r8, #3
 81097b6:	1b49      	subs	r1, r1, r5
 81097b8:	f021 0103 	bic.w	r1, r1, #3
 81097bc:	3d03      	subs	r5, #3
 81097be:	45a8      	cmp	r8, r5
 81097c0:	bf38      	it	cc
 81097c2:	2100      	movcc	r1, #0
 81097c4:	440b      	add	r3, r1
 81097c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81097ca:	b191      	cbz	r1, 81097f2 <__mdiff+0x11a>
 81097cc:	6117      	str	r7, [r2, #16]
 81097ce:	e79d      	b.n	810970c <__mdiff+0x34>
 81097d0:	f854 1b04 	ldr.w	r1, [r4], #4
 81097d4:	46e6      	mov	lr, ip
 81097d6:	0c08      	lsrs	r0, r1, #16
 81097d8:	fa1c fc81 	uxtah	ip, ip, r1
 81097dc:	4471      	add	r1, lr
 81097de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 81097e2:	b289      	uxth	r1, r1
 81097e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81097e8:	f846 1b04 	str.w	r1, [r6], #4
 81097ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81097f0:	e7dd      	b.n	81097ae <__mdiff+0xd6>
 81097f2:	3f01      	subs	r7, #1
 81097f4:	e7e7      	b.n	81097c6 <__mdiff+0xee>
 81097f6:	bf00      	nop
 81097f8:	0810ba6d 	.word	0x0810ba6d
 81097fc:	0810ba7e 	.word	0x0810ba7e

08109800 <__ulp>:
 8109800:	b082      	sub	sp, #8
 8109802:	ed8d 0b00 	vstr	d0, [sp]
 8109806:	9a01      	ldr	r2, [sp, #4]
 8109808:	4b0f      	ldr	r3, [pc, #60]	@ (8109848 <__ulp+0x48>)
 810980a:	4013      	ands	r3, r2
 810980c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8109810:	2b00      	cmp	r3, #0
 8109812:	dc08      	bgt.n	8109826 <__ulp+0x26>
 8109814:	425b      	negs	r3, r3
 8109816:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810981a:	ea4f 5223 	mov.w	r2, r3, asr #20
 810981e:	da04      	bge.n	810982a <__ulp+0x2a>
 8109820:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8109824:	4113      	asrs	r3, r2
 8109826:	2200      	movs	r2, #0
 8109828:	e008      	b.n	810983c <__ulp+0x3c>
 810982a:	f1a2 0314 	sub.w	r3, r2, #20
 810982e:	2b1e      	cmp	r3, #30
 8109830:	bfda      	itte	le
 8109832:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8109836:	40da      	lsrle	r2, r3
 8109838:	2201      	movgt	r2, #1
 810983a:	2300      	movs	r3, #0
 810983c:	4619      	mov	r1, r3
 810983e:	4610      	mov	r0, r2
 8109840:	ec41 0b10 	vmov	d0, r0, r1
 8109844:	b002      	add	sp, #8
 8109846:	4770      	bx	lr
 8109848:	7ff00000 	.word	0x7ff00000

0810984c <__b2d>:
 810984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109850:	6906      	ldr	r6, [r0, #16]
 8109852:	f100 0814 	add.w	r8, r0, #20
 8109856:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810985a:	1f37      	subs	r7, r6, #4
 810985c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8109860:	4610      	mov	r0, r2
 8109862:	f7ff fd53 	bl	810930c <__hi0bits>
 8109866:	f1c0 0320 	rsb	r3, r0, #32
 810986a:	280a      	cmp	r0, #10
 810986c:	600b      	str	r3, [r1, #0]
 810986e:	491b      	ldr	r1, [pc, #108]	@ (81098dc <__b2d+0x90>)
 8109870:	dc15      	bgt.n	810989e <__b2d+0x52>
 8109872:	f1c0 0c0b 	rsb	ip, r0, #11
 8109876:	fa22 f30c 	lsr.w	r3, r2, ip
 810987a:	45b8      	cmp	r8, r7
 810987c:	ea43 0501 	orr.w	r5, r3, r1
 8109880:	bf34      	ite	cc
 8109882:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8109886:	2300      	movcs	r3, #0
 8109888:	3015      	adds	r0, #21
 810988a:	fa02 f000 	lsl.w	r0, r2, r0
 810988e:	fa23 f30c 	lsr.w	r3, r3, ip
 8109892:	4303      	orrs	r3, r0
 8109894:	461c      	mov	r4, r3
 8109896:	ec45 4b10 	vmov	d0, r4, r5
 810989a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810989e:	45b8      	cmp	r8, r7
 81098a0:	bf3a      	itte	cc
 81098a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81098a6:	f1a6 0708 	subcc.w	r7, r6, #8
 81098aa:	2300      	movcs	r3, #0
 81098ac:	380b      	subs	r0, #11
 81098ae:	d012      	beq.n	81098d6 <__b2d+0x8a>
 81098b0:	f1c0 0120 	rsb	r1, r0, #32
 81098b4:	fa23 f401 	lsr.w	r4, r3, r1
 81098b8:	4082      	lsls	r2, r0
 81098ba:	4322      	orrs	r2, r4
 81098bc:	4547      	cmp	r7, r8
 81098be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 81098c2:	bf8c      	ite	hi
 81098c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 81098c8:	2200      	movls	r2, #0
 81098ca:	4083      	lsls	r3, r0
 81098cc:	40ca      	lsrs	r2, r1
 81098ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 81098d2:	4313      	orrs	r3, r2
 81098d4:	e7de      	b.n	8109894 <__b2d+0x48>
 81098d6:	ea42 0501 	orr.w	r5, r2, r1
 81098da:	e7db      	b.n	8109894 <__b2d+0x48>
 81098dc:	3ff00000 	.word	0x3ff00000

081098e0 <__d2b>:
 81098e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81098e4:	460f      	mov	r7, r1
 81098e6:	2101      	movs	r1, #1
 81098e8:	ec59 8b10 	vmov	r8, r9, d0
 81098ec:	4616      	mov	r6, r2
 81098ee:	f7ff fc1b 	bl	8109128 <_Balloc>
 81098f2:	4604      	mov	r4, r0
 81098f4:	b930      	cbnz	r0, 8109904 <__d2b+0x24>
 81098f6:	4602      	mov	r2, r0
 81098f8:	4b23      	ldr	r3, [pc, #140]	@ (8109988 <__d2b+0xa8>)
 81098fa:	4824      	ldr	r0, [pc, #144]	@ (810998c <__d2b+0xac>)
 81098fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8109900:	f001 fb6e 	bl	810afe0 <__assert_func>
 8109904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8109908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810990c:	b10d      	cbz	r5, 8109912 <__d2b+0x32>
 810990e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8109912:	9301      	str	r3, [sp, #4]
 8109914:	f1b8 0300 	subs.w	r3, r8, #0
 8109918:	d023      	beq.n	8109962 <__d2b+0x82>
 810991a:	4668      	mov	r0, sp
 810991c:	9300      	str	r3, [sp, #0]
 810991e:	f7ff fd14 	bl	810934a <__lo0bits>
 8109922:	e9dd 1200 	ldrd	r1, r2, [sp]
 8109926:	b1d0      	cbz	r0, 810995e <__d2b+0x7e>
 8109928:	f1c0 0320 	rsb	r3, r0, #32
 810992c:	fa02 f303 	lsl.w	r3, r2, r3
 8109930:	430b      	orrs	r3, r1
 8109932:	40c2      	lsrs	r2, r0
 8109934:	6163      	str	r3, [r4, #20]
 8109936:	9201      	str	r2, [sp, #4]
 8109938:	9b01      	ldr	r3, [sp, #4]
 810993a:	61a3      	str	r3, [r4, #24]
 810993c:	2b00      	cmp	r3, #0
 810993e:	bf0c      	ite	eq
 8109940:	2201      	moveq	r2, #1
 8109942:	2202      	movne	r2, #2
 8109944:	6122      	str	r2, [r4, #16]
 8109946:	b1a5      	cbz	r5, 8109972 <__d2b+0x92>
 8109948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810994c:	4405      	add	r5, r0
 810994e:	603d      	str	r5, [r7, #0]
 8109950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8109954:	6030      	str	r0, [r6, #0]
 8109956:	4620      	mov	r0, r4
 8109958:	b003      	add	sp, #12
 810995a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810995e:	6161      	str	r1, [r4, #20]
 8109960:	e7ea      	b.n	8109938 <__d2b+0x58>
 8109962:	a801      	add	r0, sp, #4
 8109964:	f7ff fcf1 	bl	810934a <__lo0bits>
 8109968:	9b01      	ldr	r3, [sp, #4]
 810996a:	6163      	str	r3, [r4, #20]
 810996c:	3020      	adds	r0, #32
 810996e:	2201      	movs	r2, #1
 8109970:	e7e8      	b.n	8109944 <__d2b+0x64>
 8109972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810997a:	6038      	str	r0, [r7, #0]
 810997c:	6918      	ldr	r0, [r3, #16]
 810997e:	f7ff fcc5 	bl	810930c <__hi0bits>
 8109982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8109986:	e7e5      	b.n	8109954 <__d2b+0x74>
 8109988:	0810ba6d 	.word	0x0810ba6d
 810998c:	0810ba7e 	.word	0x0810ba7e

08109990 <__ratio>:
 8109990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109994:	b085      	sub	sp, #20
 8109996:	e9cd 1000 	strd	r1, r0, [sp]
 810999a:	a902      	add	r1, sp, #8
 810999c:	f7ff ff56 	bl	810984c <__b2d>
 81099a0:	9800      	ldr	r0, [sp, #0]
 81099a2:	a903      	add	r1, sp, #12
 81099a4:	ec55 4b10 	vmov	r4, r5, d0
 81099a8:	f7ff ff50 	bl	810984c <__b2d>
 81099ac:	9b01      	ldr	r3, [sp, #4]
 81099ae:	6919      	ldr	r1, [r3, #16]
 81099b0:	9b00      	ldr	r3, [sp, #0]
 81099b2:	691b      	ldr	r3, [r3, #16]
 81099b4:	1ac9      	subs	r1, r1, r3
 81099b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 81099ba:	1a9b      	subs	r3, r3, r2
 81099bc:	ec5b ab10 	vmov	sl, fp, d0
 81099c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 81099c4:	2b00      	cmp	r3, #0
 81099c6:	bfce      	itee	gt
 81099c8:	462a      	movgt	r2, r5
 81099ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81099ce:	465a      	movle	r2, fp
 81099d0:	462f      	mov	r7, r5
 81099d2:	46d9      	mov	r9, fp
 81099d4:	bfcc      	ite	gt
 81099d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 81099da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 81099de:	464b      	mov	r3, r9
 81099e0:	4652      	mov	r2, sl
 81099e2:	4620      	mov	r0, r4
 81099e4:	4639      	mov	r1, r7
 81099e6:	f7f6 ffb9 	bl	810095c <__aeabi_ddiv>
 81099ea:	ec41 0b10 	vmov	d0, r0, r1
 81099ee:	b005      	add	sp, #20
 81099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081099f4 <__copybits>:
 81099f4:	3901      	subs	r1, #1
 81099f6:	b570      	push	{r4, r5, r6, lr}
 81099f8:	1149      	asrs	r1, r1, #5
 81099fa:	6914      	ldr	r4, [r2, #16]
 81099fc:	3101      	adds	r1, #1
 81099fe:	f102 0314 	add.w	r3, r2, #20
 8109a02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8109a06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8109a0a:	1f05      	subs	r5, r0, #4
 8109a0c:	42a3      	cmp	r3, r4
 8109a0e:	d30c      	bcc.n	8109a2a <__copybits+0x36>
 8109a10:	1aa3      	subs	r3, r4, r2
 8109a12:	3b11      	subs	r3, #17
 8109a14:	f023 0303 	bic.w	r3, r3, #3
 8109a18:	3211      	adds	r2, #17
 8109a1a:	42a2      	cmp	r2, r4
 8109a1c:	bf88      	it	hi
 8109a1e:	2300      	movhi	r3, #0
 8109a20:	4418      	add	r0, r3
 8109a22:	2300      	movs	r3, #0
 8109a24:	4288      	cmp	r0, r1
 8109a26:	d305      	bcc.n	8109a34 <__copybits+0x40>
 8109a28:	bd70      	pop	{r4, r5, r6, pc}
 8109a2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8109a2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8109a32:	e7eb      	b.n	8109a0c <__copybits+0x18>
 8109a34:	f840 3b04 	str.w	r3, [r0], #4
 8109a38:	e7f4      	b.n	8109a24 <__copybits+0x30>

08109a3a <__any_on>:
 8109a3a:	f100 0214 	add.w	r2, r0, #20
 8109a3e:	6900      	ldr	r0, [r0, #16]
 8109a40:	114b      	asrs	r3, r1, #5
 8109a42:	4298      	cmp	r0, r3
 8109a44:	b510      	push	{r4, lr}
 8109a46:	db11      	blt.n	8109a6c <__any_on+0x32>
 8109a48:	dd0a      	ble.n	8109a60 <__any_on+0x26>
 8109a4a:	f011 011f 	ands.w	r1, r1, #31
 8109a4e:	d007      	beq.n	8109a60 <__any_on+0x26>
 8109a50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8109a54:	fa24 f001 	lsr.w	r0, r4, r1
 8109a58:	fa00 f101 	lsl.w	r1, r0, r1
 8109a5c:	428c      	cmp	r4, r1
 8109a5e:	d10b      	bne.n	8109a78 <__any_on+0x3e>
 8109a60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8109a64:	4293      	cmp	r3, r2
 8109a66:	d803      	bhi.n	8109a70 <__any_on+0x36>
 8109a68:	2000      	movs	r0, #0
 8109a6a:	bd10      	pop	{r4, pc}
 8109a6c:	4603      	mov	r3, r0
 8109a6e:	e7f7      	b.n	8109a60 <__any_on+0x26>
 8109a70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109a74:	2900      	cmp	r1, #0
 8109a76:	d0f5      	beq.n	8109a64 <__any_on+0x2a>
 8109a78:	2001      	movs	r0, #1
 8109a7a:	e7f6      	b.n	8109a6a <__any_on+0x30>

08109a7c <sulp>:
 8109a7c:	b570      	push	{r4, r5, r6, lr}
 8109a7e:	4604      	mov	r4, r0
 8109a80:	460d      	mov	r5, r1
 8109a82:	ec45 4b10 	vmov	d0, r4, r5
 8109a86:	4616      	mov	r6, r2
 8109a88:	f7ff feba 	bl	8109800 <__ulp>
 8109a8c:	ec51 0b10 	vmov	r0, r1, d0
 8109a90:	b17e      	cbz	r6, 8109ab2 <sulp+0x36>
 8109a92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109a96:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8109a9a:	2b00      	cmp	r3, #0
 8109a9c:	dd09      	ble.n	8109ab2 <sulp+0x36>
 8109a9e:	051b      	lsls	r3, r3, #20
 8109aa0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8109aa4:	2400      	movs	r4, #0
 8109aa6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8109aaa:	4622      	mov	r2, r4
 8109aac:	462b      	mov	r3, r5
 8109aae:	f7f6 fe2b 	bl	8100708 <__aeabi_dmul>
 8109ab2:	ec41 0b10 	vmov	d0, r0, r1
 8109ab6:	bd70      	pop	{r4, r5, r6, pc}

08109ab8 <_strtod_l>:
 8109ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109abc:	b09f      	sub	sp, #124	@ 0x7c
 8109abe:	460c      	mov	r4, r1
 8109ac0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8109ac2:	2200      	movs	r2, #0
 8109ac4:	921a      	str	r2, [sp, #104]	@ 0x68
 8109ac6:	9005      	str	r0, [sp, #20]
 8109ac8:	f04f 0a00 	mov.w	sl, #0
 8109acc:	f04f 0b00 	mov.w	fp, #0
 8109ad0:	460a      	mov	r2, r1
 8109ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8109ad4:	7811      	ldrb	r1, [r2, #0]
 8109ad6:	292b      	cmp	r1, #43	@ 0x2b
 8109ad8:	d04a      	beq.n	8109b70 <_strtod_l+0xb8>
 8109ada:	d838      	bhi.n	8109b4e <_strtod_l+0x96>
 8109adc:	290d      	cmp	r1, #13
 8109ade:	d832      	bhi.n	8109b46 <_strtod_l+0x8e>
 8109ae0:	2908      	cmp	r1, #8
 8109ae2:	d832      	bhi.n	8109b4a <_strtod_l+0x92>
 8109ae4:	2900      	cmp	r1, #0
 8109ae6:	d03b      	beq.n	8109b60 <_strtod_l+0xa8>
 8109ae8:	2200      	movs	r2, #0
 8109aea:	920e      	str	r2, [sp, #56]	@ 0x38
 8109aec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8109aee:	782a      	ldrb	r2, [r5, #0]
 8109af0:	2a30      	cmp	r2, #48	@ 0x30
 8109af2:	f040 80b2 	bne.w	8109c5a <_strtod_l+0x1a2>
 8109af6:	786a      	ldrb	r2, [r5, #1]
 8109af8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8109afc:	2a58      	cmp	r2, #88	@ 0x58
 8109afe:	d16e      	bne.n	8109bde <_strtod_l+0x126>
 8109b00:	9302      	str	r3, [sp, #8]
 8109b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109b04:	9301      	str	r3, [sp, #4]
 8109b06:	ab1a      	add	r3, sp, #104	@ 0x68
 8109b08:	9300      	str	r3, [sp, #0]
 8109b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8109d48 <_strtod_l+0x290>)
 8109b0c:	9805      	ldr	r0, [sp, #20]
 8109b0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8109b10:	a919      	add	r1, sp, #100	@ 0x64
 8109b12:	f001 faff 	bl	810b114 <__gethex>
 8109b16:	f010 060f 	ands.w	r6, r0, #15
 8109b1a:	4604      	mov	r4, r0
 8109b1c:	d005      	beq.n	8109b2a <_strtod_l+0x72>
 8109b1e:	2e06      	cmp	r6, #6
 8109b20:	d128      	bne.n	8109b74 <_strtod_l+0xbc>
 8109b22:	3501      	adds	r5, #1
 8109b24:	2300      	movs	r3, #0
 8109b26:	9519      	str	r5, [sp, #100]	@ 0x64
 8109b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8109b2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8109b2c:	2b00      	cmp	r3, #0
 8109b2e:	f040 858e 	bne.w	810a64e <_strtod_l+0xb96>
 8109b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109b34:	b1cb      	cbz	r3, 8109b6a <_strtod_l+0xb2>
 8109b36:	4652      	mov	r2, sl
 8109b38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8109b3c:	ec43 2b10 	vmov	d0, r2, r3
 8109b40:	b01f      	add	sp, #124	@ 0x7c
 8109b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109b46:	2920      	cmp	r1, #32
 8109b48:	d1ce      	bne.n	8109ae8 <_strtod_l+0x30>
 8109b4a:	3201      	adds	r2, #1
 8109b4c:	e7c1      	b.n	8109ad2 <_strtod_l+0x1a>
 8109b4e:	292d      	cmp	r1, #45	@ 0x2d
 8109b50:	d1ca      	bne.n	8109ae8 <_strtod_l+0x30>
 8109b52:	2101      	movs	r1, #1
 8109b54:	910e      	str	r1, [sp, #56]	@ 0x38
 8109b56:	1c51      	adds	r1, r2, #1
 8109b58:	9119      	str	r1, [sp, #100]	@ 0x64
 8109b5a:	7852      	ldrb	r2, [r2, #1]
 8109b5c:	2a00      	cmp	r2, #0
 8109b5e:	d1c5      	bne.n	8109aec <_strtod_l+0x34>
 8109b60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8109b62:	9419      	str	r4, [sp, #100]	@ 0x64
 8109b64:	2b00      	cmp	r3, #0
 8109b66:	f040 8570 	bne.w	810a64a <_strtod_l+0xb92>
 8109b6a:	4652      	mov	r2, sl
 8109b6c:	465b      	mov	r3, fp
 8109b6e:	e7e5      	b.n	8109b3c <_strtod_l+0x84>
 8109b70:	2100      	movs	r1, #0
 8109b72:	e7ef      	b.n	8109b54 <_strtod_l+0x9c>
 8109b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8109b76:	b13a      	cbz	r2, 8109b88 <_strtod_l+0xd0>
 8109b78:	2135      	movs	r1, #53	@ 0x35
 8109b7a:	a81c      	add	r0, sp, #112	@ 0x70
 8109b7c:	f7ff ff3a 	bl	81099f4 <__copybits>
 8109b80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8109b82:	9805      	ldr	r0, [sp, #20]
 8109b84:	f7ff fb10 	bl	81091a8 <_Bfree>
 8109b88:	3e01      	subs	r6, #1
 8109b8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8109b8c:	2e04      	cmp	r6, #4
 8109b8e:	d806      	bhi.n	8109b9e <_strtod_l+0xe6>
 8109b90:	e8df f006 	tbb	[pc, r6]
 8109b94:	201d0314 	.word	0x201d0314
 8109b98:	14          	.byte	0x14
 8109b99:	00          	.byte	0x00
 8109b9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8109b9e:	05e1      	lsls	r1, r4, #23
 8109ba0:	bf48      	it	mi
 8109ba2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8109ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8109baa:	0d1b      	lsrs	r3, r3, #20
 8109bac:	051b      	lsls	r3, r3, #20
 8109bae:	2b00      	cmp	r3, #0
 8109bb0:	d1bb      	bne.n	8109b2a <_strtod_l+0x72>
 8109bb2:	f7fe fb2b 	bl	810820c <__errno>
 8109bb6:	2322      	movs	r3, #34	@ 0x22
 8109bb8:	6003      	str	r3, [r0, #0]
 8109bba:	e7b6      	b.n	8109b2a <_strtod_l+0x72>
 8109bbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8109bc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8109bc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8109bc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8109bcc:	e7e7      	b.n	8109b9e <_strtod_l+0xe6>
 8109bce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8109d50 <_strtod_l+0x298>
 8109bd2:	e7e4      	b.n	8109b9e <_strtod_l+0xe6>
 8109bd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8109bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8109bdc:	e7df      	b.n	8109b9e <_strtod_l+0xe6>
 8109bde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109be0:	1c5a      	adds	r2, r3, #1
 8109be2:	9219      	str	r2, [sp, #100]	@ 0x64
 8109be4:	785b      	ldrb	r3, [r3, #1]
 8109be6:	2b30      	cmp	r3, #48	@ 0x30
 8109be8:	d0f9      	beq.n	8109bde <_strtod_l+0x126>
 8109bea:	2b00      	cmp	r3, #0
 8109bec:	d09d      	beq.n	8109b2a <_strtod_l+0x72>
 8109bee:	2301      	movs	r3, #1
 8109bf0:	2700      	movs	r7, #0
 8109bf2:	9308      	str	r3, [sp, #32]
 8109bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109bf6:	930c      	str	r3, [sp, #48]	@ 0x30
 8109bf8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8109bfa:	46b9      	mov	r9, r7
 8109bfc:	220a      	movs	r2, #10
 8109bfe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8109c00:	7805      	ldrb	r5, [r0, #0]
 8109c02:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8109c06:	b2d9      	uxtb	r1, r3
 8109c08:	2909      	cmp	r1, #9
 8109c0a:	d928      	bls.n	8109c5e <_strtod_l+0x1a6>
 8109c0c:	494f      	ldr	r1, [pc, #316]	@ (8109d4c <_strtod_l+0x294>)
 8109c0e:	2201      	movs	r2, #1
 8109c10:	f001 f9ac 	bl	810af6c <strncmp>
 8109c14:	2800      	cmp	r0, #0
 8109c16:	d032      	beq.n	8109c7e <_strtod_l+0x1c6>
 8109c18:	2000      	movs	r0, #0
 8109c1a:	462a      	mov	r2, r5
 8109c1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8109c1e:	464d      	mov	r5, r9
 8109c20:	4603      	mov	r3, r0
 8109c22:	2a65      	cmp	r2, #101	@ 0x65
 8109c24:	d001      	beq.n	8109c2a <_strtod_l+0x172>
 8109c26:	2a45      	cmp	r2, #69	@ 0x45
 8109c28:	d114      	bne.n	8109c54 <_strtod_l+0x19c>
 8109c2a:	b91d      	cbnz	r5, 8109c34 <_strtod_l+0x17c>
 8109c2c:	9a08      	ldr	r2, [sp, #32]
 8109c2e:	4302      	orrs	r2, r0
 8109c30:	d096      	beq.n	8109b60 <_strtod_l+0xa8>
 8109c32:	2500      	movs	r5, #0
 8109c34:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8109c36:	1c62      	adds	r2, r4, #1
 8109c38:	9219      	str	r2, [sp, #100]	@ 0x64
 8109c3a:	7862      	ldrb	r2, [r4, #1]
 8109c3c:	2a2b      	cmp	r2, #43	@ 0x2b
 8109c3e:	d07a      	beq.n	8109d36 <_strtod_l+0x27e>
 8109c40:	2a2d      	cmp	r2, #45	@ 0x2d
 8109c42:	d07e      	beq.n	8109d42 <_strtod_l+0x28a>
 8109c44:	f04f 0c00 	mov.w	ip, #0
 8109c48:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8109c4c:	2909      	cmp	r1, #9
 8109c4e:	f240 8085 	bls.w	8109d5c <_strtod_l+0x2a4>
 8109c52:	9419      	str	r4, [sp, #100]	@ 0x64
 8109c54:	f04f 0800 	mov.w	r8, #0
 8109c58:	e0a5      	b.n	8109da6 <_strtod_l+0x2ee>
 8109c5a:	2300      	movs	r3, #0
 8109c5c:	e7c8      	b.n	8109bf0 <_strtod_l+0x138>
 8109c5e:	f1b9 0f08 	cmp.w	r9, #8
 8109c62:	bfd8      	it	le
 8109c64:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8109c66:	f100 0001 	add.w	r0, r0, #1
 8109c6a:	bfda      	itte	le
 8109c6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8109c70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8109c72:	fb02 3707 	mlagt	r7, r2, r7, r3
 8109c76:	f109 0901 	add.w	r9, r9, #1
 8109c7a:	9019      	str	r0, [sp, #100]	@ 0x64
 8109c7c:	e7bf      	b.n	8109bfe <_strtod_l+0x146>
 8109c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109c80:	1c5a      	adds	r2, r3, #1
 8109c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8109c84:	785a      	ldrb	r2, [r3, #1]
 8109c86:	f1b9 0f00 	cmp.w	r9, #0
 8109c8a:	d03b      	beq.n	8109d04 <_strtod_l+0x24c>
 8109c8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8109c8e:	464d      	mov	r5, r9
 8109c90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8109c94:	2b09      	cmp	r3, #9
 8109c96:	d912      	bls.n	8109cbe <_strtod_l+0x206>
 8109c98:	2301      	movs	r3, #1
 8109c9a:	e7c2      	b.n	8109c22 <_strtod_l+0x16a>
 8109c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109c9e:	1c5a      	adds	r2, r3, #1
 8109ca0:	9219      	str	r2, [sp, #100]	@ 0x64
 8109ca2:	785a      	ldrb	r2, [r3, #1]
 8109ca4:	3001      	adds	r0, #1
 8109ca6:	2a30      	cmp	r2, #48	@ 0x30
 8109ca8:	d0f8      	beq.n	8109c9c <_strtod_l+0x1e4>
 8109caa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8109cae:	2b08      	cmp	r3, #8
 8109cb0:	f200 84d2 	bhi.w	810a658 <_strtod_l+0xba0>
 8109cb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109cb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8109cb8:	2000      	movs	r0, #0
 8109cba:	930c      	str	r3, [sp, #48]	@ 0x30
 8109cbc:	4605      	mov	r5, r0
 8109cbe:	3a30      	subs	r2, #48	@ 0x30
 8109cc0:	f100 0301 	add.w	r3, r0, #1
 8109cc4:	d018      	beq.n	8109cf8 <_strtod_l+0x240>
 8109cc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8109cc8:	4419      	add	r1, r3
 8109cca:	910a      	str	r1, [sp, #40]	@ 0x28
 8109ccc:	462e      	mov	r6, r5
 8109cce:	f04f 0e0a 	mov.w	lr, #10
 8109cd2:	1c71      	adds	r1, r6, #1
 8109cd4:	eba1 0c05 	sub.w	ip, r1, r5
 8109cd8:	4563      	cmp	r3, ip
 8109cda:	dc15      	bgt.n	8109d08 <_strtod_l+0x250>
 8109cdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8109ce0:	182b      	adds	r3, r5, r0
 8109ce2:	2b08      	cmp	r3, #8
 8109ce4:	f105 0501 	add.w	r5, r5, #1
 8109ce8:	4405      	add	r5, r0
 8109cea:	dc1a      	bgt.n	8109d22 <_strtod_l+0x26a>
 8109cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109cee:	230a      	movs	r3, #10
 8109cf0:	fb03 2301 	mla	r3, r3, r1, r2
 8109cf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109cf6:	2300      	movs	r3, #0
 8109cf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8109cfa:	1c51      	adds	r1, r2, #1
 8109cfc:	9119      	str	r1, [sp, #100]	@ 0x64
 8109cfe:	7852      	ldrb	r2, [r2, #1]
 8109d00:	4618      	mov	r0, r3
 8109d02:	e7c5      	b.n	8109c90 <_strtod_l+0x1d8>
 8109d04:	4648      	mov	r0, r9
 8109d06:	e7ce      	b.n	8109ca6 <_strtod_l+0x1ee>
 8109d08:	2e08      	cmp	r6, #8
 8109d0a:	dc05      	bgt.n	8109d18 <_strtod_l+0x260>
 8109d0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8109d0e:	fb0e f606 	mul.w	r6, lr, r6
 8109d12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8109d14:	460e      	mov	r6, r1
 8109d16:	e7dc      	b.n	8109cd2 <_strtod_l+0x21a>
 8109d18:	2910      	cmp	r1, #16
 8109d1a:	bfd8      	it	le
 8109d1c:	fb0e f707 	mulle.w	r7, lr, r7
 8109d20:	e7f8      	b.n	8109d14 <_strtod_l+0x25c>
 8109d22:	2b0f      	cmp	r3, #15
 8109d24:	bfdc      	itt	le
 8109d26:	230a      	movle	r3, #10
 8109d28:	fb03 2707 	mlale	r7, r3, r7, r2
 8109d2c:	e7e3      	b.n	8109cf6 <_strtod_l+0x23e>
 8109d2e:	2300      	movs	r3, #0
 8109d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8109d32:	2301      	movs	r3, #1
 8109d34:	e77a      	b.n	8109c2c <_strtod_l+0x174>
 8109d36:	f04f 0c00 	mov.w	ip, #0
 8109d3a:	1ca2      	adds	r2, r4, #2
 8109d3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8109d3e:	78a2      	ldrb	r2, [r4, #2]
 8109d40:	e782      	b.n	8109c48 <_strtod_l+0x190>
 8109d42:	f04f 0c01 	mov.w	ip, #1
 8109d46:	e7f8      	b.n	8109d3a <_strtod_l+0x282>
 8109d48:	0810bca4 	.word	0x0810bca4
 8109d4c:	0810bad7 	.word	0x0810bad7
 8109d50:	7ff00000 	.word	0x7ff00000
 8109d54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8109d56:	1c51      	adds	r1, r2, #1
 8109d58:	9119      	str	r1, [sp, #100]	@ 0x64
 8109d5a:	7852      	ldrb	r2, [r2, #1]
 8109d5c:	2a30      	cmp	r2, #48	@ 0x30
 8109d5e:	d0f9      	beq.n	8109d54 <_strtod_l+0x29c>
 8109d60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8109d64:	2908      	cmp	r1, #8
 8109d66:	f63f af75 	bhi.w	8109c54 <_strtod_l+0x19c>
 8109d6a:	3a30      	subs	r2, #48	@ 0x30
 8109d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8109d6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8109d70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8109d72:	f04f 080a 	mov.w	r8, #10
 8109d76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8109d78:	1c56      	adds	r6, r2, #1
 8109d7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8109d7c:	7852      	ldrb	r2, [r2, #1]
 8109d7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8109d82:	f1be 0f09 	cmp.w	lr, #9
 8109d86:	d939      	bls.n	8109dfc <_strtod_l+0x344>
 8109d88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8109d8a:	1a76      	subs	r6, r6, r1
 8109d8c:	2e08      	cmp	r6, #8
 8109d8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8109d92:	dc03      	bgt.n	8109d9c <_strtod_l+0x2e4>
 8109d94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109d96:	4588      	cmp	r8, r1
 8109d98:	bfa8      	it	ge
 8109d9a:	4688      	movge	r8, r1
 8109d9c:	f1bc 0f00 	cmp.w	ip, #0
 8109da0:	d001      	beq.n	8109da6 <_strtod_l+0x2ee>
 8109da2:	f1c8 0800 	rsb	r8, r8, #0
 8109da6:	2d00      	cmp	r5, #0
 8109da8:	d14e      	bne.n	8109e48 <_strtod_l+0x390>
 8109daa:	9908      	ldr	r1, [sp, #32]
 8109dac:	4308      	orrs	r0, r1
 8109dae:	f47f aebc 	bne.w	8109b2a <_strtod_l+0x72>
 8109db2:	2b00      	cmp	r3, #0
 8109db4:	f47f aed4 	bne.w	8109b60 <_strtod_l+0xa8>
 8109db8:	2a69      	cmp	r2, #105	@ 0x69
 8109dba:	d028      	beq.n	8109e0e <_strtod_l+0x356>
 8109dbc:	dc25      	bgt.n	8109e0a <_strtod_l+0x352>
 8109dbe:	2a49      	cmp	r2, #73	@ 0x49
 8109dc0:	d025      	beq.n	8109e0e <_strtod_l+0x356>
 8109dc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8109dc4:	f47f aecc 	bne.w	8109b60 <_strtod_l+0xa8>
 8109dc8:	499a      	ldr	r1, [pc, #616]	@ (810a034 <_strtod_l+0x57c>)
 8109dca:	a819      	add	r0, sp, #100	@ 0x64
 8109dcc:	f001 fbc4 	bl	810b558 <__match>
 8109dd0:	2800      	cmp	r0, #0
 8109dd2:	f43f aec5 	beq.w	8109b60 <_strtod_l+0xa8>
 8109dd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109dd8:	781b      	ldrb	r3, [r3, #0]
 8109dda:	2b28      	cmp	r3, #40	@ 0x28
 8109ddc:	d12e      	bne.n	8109e3c <_strtod_l+0x384>
 8109dde:	4996      	ldr	r1, [pc, #600]	@ (810a038 <_strtod_l+0x580>)
 8109de0:	aa1c      	add	r2, sp, #112	@ 0x70
 8109de2:	a819      	add	r0, sp, #100	@ 0x64
 8109de4:	f001 fbcc 	bl	810b580 <__hexnan>
 8109de8:	2805      	cmp	r0, #5
 8109dea:	d127      	bne.n	8109e3c <_strtod_l+0x384>
 8109dec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8109dee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8109df2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8109df6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8109dfa:	e696      	b.n	8109b2a <_strtod_l+0x72>
 8109dfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109dfe:	fb08 2101 	mla	r1, r8, r1, r2
 8109e02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8109e06:	9209      	str	r2, [sp, #36]	@ 0x24
 8109e08:	e7b5      	b.n	8109d76 <_strtod_l+0x2be>
 8109e0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8109e0c:	e7da      	b.n	8109dc4 <_strtod_l+0x30c>
 8109e0e:	498b      	ldr	r1, [pc, #556]	@ (810a03c <_strtod_l+0x584>)
 8109e10:	a819      	add	r0, sp, #100	@ 0x64
 8109e12:	f001 fba1 	bl	810b558 <__match>
 8109e16:	2800      	cmp	r0, #0
 8109e18:	f43f aea2 	beq.w	8109b60 <_strtod_l+0xa8>
 8109e1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109e1e:	4988      	ldr	r1, [pc, #544]	@ (810a040 <_strtod_l+0x588>)
 8109e20:	3b01      	subs	r3, #1
 8109e22:	a819      	add	r0, sp, #100	@ 0x64
 8109e24:	9319      	str	r3, [sp, #100]	@ 0x64
 8109e26:	f001 fb97 	bl	810b558 <__match>
 8109e2a:	b910      	cbnz	r0, 8109e32 <_strtod_l+0x37a>
 8109e2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8109e2e:	3301      	adds	r3, #1
 8109e30:	9319      	str	r3, [sp, #100]	@ 0x64
 8109e32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 810a050 <_strtod_l+0x598>
 8109e36:	f04f 0a00 	mov.w	sl, #0
 8109e3a:	e676      	b.n	8109b2a <_strtod_l+0x72>
 8109e3c:	4881      	ldr	r0, [pc, #516]	@ (810a044 <_strtod_l+0x58c>)
 8109e3e:	f001 f8c7 	bl	810afd0 <nan>
 8109e42:	ec5b ab10 	vmov	sl, fp, d0
 8109e46:	e670      	b.n	8109b2a <_strtod_l+0x72>
 8109e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109e4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8109e4c:	eba8 0303 	sub.w	r3, r8, r3
 8109e50:	f1b9 0f00 	cmp.w	r9, #0
 8109e54:	bf08      	it	eq
 8109e56:	46a9      	moveq	r9, r5
 8109e58:	2d10      	cmp	r5, #16
 8109e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8109e5c:	462c      	mov	r4, r5
 8109e5e:	bfa8      	it	ge
 8109e60:	2410      	movge	r4, #16
 8109e62:	f7f6 fbd7 	bl	8100614 <__aeabi_ui2d>
 8109e66:	2d09      	cmp	r5, #9
 8109e68:	4682      	mov	sl, r0
 8109e6a:	468b      	mov	fp, r1
 8109e6c:	dc13      	bgt.n	8109e96 <_strtod_l+0x3de>
 8109e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109e70:	2b00      	cmp	r3, #0
 8109e72:	f43f ae5a 	beq.w	8109b2a <_strtod_l+0x72>
 8109e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109e78:	dd78      	ble.n	8109f6c <_strtod_l+0x4b4>
 8109e7a:	2b16      	cmp	r3, #22
 8109e7c:	dc5f      	bgt.n	8109f3e <_strtod_l+0x486>
 8109e7e:	4972      	ldr	r1, [pc, #456]	@ (810a048 <_strtod_l+0x590>)
 8109e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109e88:	4652      	mov	r2, sl
 8109e8a:	465b      	mov	r3, fp
 8109e8c:	f7f6 fc3c 	bl	8100708 <__aeabi_dmul>
 8109e90:	4682      	mov	sl, r0
 8109e92:	468b      	mov	fp, r1
 8109e94:	e649      	b.n	8109b2a <_strtod_l+0x72>
 8109e96:	4b6c      	ldr	r3, [pc, #432]	@ (810a048 <_strtod_l+0x590>)
 8109e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8109e9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8109ea0:	f7f6 fc32 	bl	8100708 <__aeabi_dmul>
 8109ea4:	4682      	mov	sl, r0
 8109ea6:	4638      	mov	r0, r7
 8109ea8:	468b      	mov	fp, r1
 8109eaa:	f7f6 fbb3 	bl	8100614 <__aeabi_ui2d>
 8109eae:	4602      	mov	r2, r0
 8109eb0:	460b      	mov	r3, r1
 8109eb2:	4650      	mov	r0, sl
 8109eb4:	4659      	mov	r1, fp
 8109eb6:	f7f6 fa71 	bl	810039c <__adddf3>
 8109eba:	2d0f      	cmp	r5, #15
 8109ebc:	4682      	mov	sl, r0
 8109ebe:	468b      	mov	fp, r1
 8109ec0:	ddd5      	ble.n	8109e6e <_strtod_l+0x3b6>
 8109ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109ec4:	1b2c      	subs	r4, r5, r4
 8109ec6:	441c      	add	r4, r3
 8109ec8:	2c00      	cmp	r4, #0
 8109eca:	f340 8093 	ble.w	8109ff4 <_strtod_l+0x53c>
 8109ece:	f014 030f 	ands.w	r3, r4, #15
 8109ed2:	d00a      	beq.n	8109eea <_strtod_l+0x432>
 8109ed4:	495c      	ldr	r1, [pc, #368]	@ (810a048 <_strtod_l+0x590>)
 8109ed6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109eda:	4652      	mov	r2, sl
 8109edc:	465b      	mov	r3, fp
 8109ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109ee2:	f7f6 fc11 	bl	8100708 <__aeabi_dmul>
 8109ee6:	4682      	mov	sl, r0
 8109ee8:	468b      	mov	fp, r1
 8109eea:	f034 040f 	bics.w	r4, r4, #15
 8109eee:	d073      	beq.n	8109fd8 <_strtod_l+0x520>
 8109ef0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8109ef4:	dd49      	ble.n	8109f8a <_strtod_l+0x4d2>
 8109ef6:	2400      	movs	r4, #0
 8109ef8:	46a0      	mov	r8, r4
 8109efa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8109efc:	46a1      	mov	r9, r4
 8109efe:	9a05      	ldr	r2, [sp, #20]
 8109f00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 810a050 <_strtod_l+0x598>
 8109f04:	2322      	movs	r3, #34	@ 0x22
 8109f06:	6013      	str	r3, [r2, #0]
 8109f08:	f04f 0a00 	mov.w	sl, #0
 8109f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109f0e:	2b00      	cmp	r3, #0
 8109f10:	f43f ae0b 	beq.w	8109b2a <_strtod_l+0x72>
 8109f14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8109f16:	9805      	ldr	r0, [sp, #20]
 8109f18:	f7ff f946 	bl	81091a8 <_Bfree>
 8109f1c:	9805      	ldr	r0, [sp, #20]
 8109f1e:	4649      	mov	r1, r9
 8109f20:	f7ff f942 	bl	81091a8 <_Bfree>
 8109f24:	9805      	ldr	r0, [sp, #20]
 8109f26:	4641      	mov	r1, r8
 8109f28:	f7ff f93e 	bl	81091a8 <_Bfree>
 8109f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109f2e:	9805      	ldr	r0, [sp, #20]
 8109f30:	f7ff f93a 	bl	81091a8 <_Bfree>
 8109f34:	9805      	ldr	r0, [sp, #20]
 8109f36:	4621      	mov	r1, r4
 8109f38:	f7ff f936 	bl	81091a8 <_Bfree>
 8109f3c:	e5f5      	b.n	8109b2a <_strtod_l+0x72>
 8109f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8109f40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8109f44:	4293      	cmp	r3, r2
 8109f46:	dbbc      	blt.n	8109ec2 <_strtod_l+0x40a>
 8109f48:	4c3f      	ldr	r4, [pc, #252]	@ (810a048 <_strtod_l+0x590>)
 8109f4a:	f1c5 050f 	rsb	r5, r5, #15
 8109f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8109f52:	4652      	mov	r2, sl
 8109f54:	465b      	mov	r3, fp
 8109f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f5a:	f7f6 fbd5 	bl	8100708 <__aeabi_dmul>
 8109f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109f60:	1b5d      	subs	r5, r3, r5
 8109f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8109f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8109f6a:	e78f      	b.n	8109e8c <_strtod_l+0x3d4>
 8109f6c:	3316      	adds	r3, #22
 8109f6e:	dba8      	blt.n	8109ec2 <_strtod_l+0x40a>
 8109f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109f72:	eba3 0808 	sub.w	r8, r3, r8
 8109f76:	4b34      	ldr	r3, [pc, #208]	@ (810a048 <_strtod_l+0x590>)
 8109f78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8109f7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8109f80:	4650      	mov	r0, sl
 8109f82:	4659      	mov	r1, fp
 8109f84:	f7f6 fcea 	bl	810095c <__aeabi_ddiv>
 8109f88:	e782      	b.n	8109e90 <_strtod_l+0x3d8>
 8109f8a:	2300      	movs	r3, #0
 8109f8c:	4f2f      	ldr	r7, [pc, #188]	@ (810a04c <_strtod_l+0x594>)
 8109f8e:	1124      	asrs	r4, r4, #4
 8109f90:	4650      	mov	r0, sl
 8109f92:	4659      	mov	r1, fp
 8109f94:	461e      	mov	r6, r3
 8109f96:	2c01      	cmp	r4, #1
 8109f98:	dc21      	bgt.n	8109fde <_strtod_l+0x526>
 8109f9a:	b10b      	cbz	r3, 8109fa0 <_strtod_l+0x4e8>
 8109f9c:	4682      	mov	sl, r0
 8109f9e:	468b      	mov	fp, r1
 8109fa0:	492a      	ldr	r1, [pc, #168]	@ (810a04c <_strtod_l+0x594>)
 8109fa2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8109fa6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8109faa:	4652      	mov	r2, sl
 8109fac:	465b      	mov	r3, fp
 8109fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109fb2:	f7f6 fba9 	bl	8100708 <__aeabi_dmul>
 8109fb6:	4b26      	ldr	r3, [pc, #152]	@ (810a050 <_strtod_l+0x598>)
 8109fb8:	460a      	mov	r2, r1
 8109fba:	400b      	ands	r3, r1
 8109fbc:	4925      	ldr	r1, [pc, #148]	@ (810a054 <_strtod_l+0x59c>)
 8109fbe:	428b      	cmp	r3, r1
 8109fc0:	4682      	mov	sl, r0
 8109fc2:	d898      	bhi.n	8109ef6 <_strtod_l+0x43e>
 8109fc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8109fc8:	428b      	cmp	r3, r1
 8109fca:	bf86      	itte	hi
 8109fcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 810a058 <_strtod_l+0x5a0>
 8109fd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8109fd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8109fd8:	2300      	movs	r3, #0
 8109fda:	9308      	str	r3, [sp, #32]
 8109fdc:	e076      	b.n	810a0cc <_strtod_l+0x614>
 8109fde:	07e2      	lsls	r2, r4, #31
 8109fe0:	d504      	bpl.n	8109fec <_strtod_l+0x534>
 8109fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109fe6:	f7f6 fb8f 	bl	8100708 <__aeabi_dmul>
 8109fea:	2301      	movs	r3, #1
 8109fec:	3601      	adds	r6, #1
 8109fee:	1064      	asrs	r4, r4, #1
 8109ff0:	3708      	adds	r7, #8
 8109ff2:	e7d0      	b.n	8109f96 <_strtod_l+0x4de>
 8109ff4:	d0f0      	beq.n	8109fd8 <_strtod_l+0x520>
 8109ff6:	4264      	negs	r4, r4
 8109ff8:	f014 020f 	ands.w	r2, r4, #15
 8109ffc:	d00a      	beq.n	810a014 <_strtod_l+0x55c>
 8109ffe:	4b12      	ldr	r3, [pc, #72]	@ (810a048 <_strtod_l+0x590>)
 810a000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a004:	4650      	mov	r0, sl
 810a006:	4659      	mov	r1, fp
 810a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a00c:	f7f6 fca6 	bl	810095c <__aeabi_ddiv>
 810a010:	4682      	mov	sl, r0
 810a012:	468b      	mov	fp, r1
 810a014:	1124      	asrs	r4, r4, #4
 810a016:	d0df      	beq.n	8109fd8 <_strtod_l+0x520>
 810a018:	2c1f      	cmp	r4, #31
 810a01a:	dd1f      	ble.n	810a05c <_strtod_l+0x5a4>
 810a01c:	2400      	movs	r4, #0
 810a01e:	46a0      	mov	r8, r4
 810a020:	940b      	str	r4, [sp, #44]	@ 0x2c
 810a022:	46a1      	mov	r9, r4
 810a024:	9a05      	ldr	r2, [sp, #20]
 810a026:	2322      	movs	r3, #34	@ 0x22
 810a028:	f04f 0a00 	mov.w	sl, #0
 810a02c:	f04f 0b00 	mov.w	fp, #0
 810a030:	6013      	str	r3, [r2, #0]
 810a032:	e76b      	b.n	8109f0c <_strtod_l+0x454>
 810a034:	0810b9c5 	.word	0x0810b9c5
 810a038:	0810bc90 	.word	0x0810bc90
 810a03c:	0810b9bd 	.word	0x0810b9bd
 810a040:	0810b9f4 	.word	0x0810b9f4
 810a044:	0810bb2d 	.word	0x0810bb2d
 810a048:	0810bbc8 	.word	0x0810bbc8
 810a04c:	0810bba0 	.word	0x0810bba0
 810a050:	7ff00000 	.word	0x7ff00000
 810a054:	7ca00000 	.word	0x7ca00000
 810a058:	7fefffff 	.word	0x7fefffff
 810a05c:	f014 0310 	ands.w	r3, r4, #16
 810a060:	bf18      	it	ne
 810a062:	236a      	movne	r3, #106	@ 0x6a
 810a064:	4ea9      	ldr	r6, [pc, #676]	@ (810a30c <_strtod_l+0x854>)
 810a066:	9308      	str	r3, [sp, #32]
 810a068:	4650      	mov	r0, sl
 810a06a:	4659      	mov	r1, fp
 810a06c:	2300      	movs	r3, #0
 810a06e:	07e7      	lsls	r7, r4, #31
 810a070:	d504      	bpl.n	810a07c <_strtod_l+0x5c4>
 810a072:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a076:	f7f6 fb47 	bl	8100708 <__aeabi_dmul>
 810a07a:	2301      	movs	r3, #1
 810a07c:	1064      	asrs	r4, r4, #1
 810a07e:	f106 0608 	add.w	r6, r6, #8
 810a082:	d1f4      	bne.n	810a06e <_strtod_l+0x5b6>
 810a084:	b10b      	cbz	r3, 810a08a <_strtod_l+0x5d2>
 810a086:	4682      	mov	sl, r0
 810a088:	468b      	mov	fp, r1
 810a08a:	9b08      	ldr	r3, [sp, #32]
 810a08c:	b1b3      	cbz	r3, 810a0bc <_strtod_l+0x604>
 810a08e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810a092:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810a096:	2b00      	cmp	r3, #0
 810a098:	4659      	mov	r1, fp
 810a09a:	dd0f      	ble.n	810a0bc <_strtod_l+0x604>
 810a09c:	2b1f      	cmp	r3, #31
 810a09e:	dd56      	ble.n	810a14e <_strtod_l+0x696>
 810a0a0:	2b34      	cmp	r3, #52	@ 0x34
 810a0a2:	bfde      	ittt	le
 810a0a4:	f04f 33ff 	movle.w	r3, #4294967295
 810a0a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810a0ac:	4093      	lslle	r3, r2
 810a0ae:	f04f 0a00 	mov.w	sl, #0
 810a0b2:	bfcc      	ite	gt
 810a0b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810a0b8:	ea03 0b01 	andle.w	fp, r3, r1
 810a0bc:	2200      	movs	r2, #0
 810a0be:	2300      	movs	r3, #0
 810a0c0:	4650      	mov	r0, sl
 810a0c2:	4659      	mov	r1, fp
 810a0c4:	f7f6 fd88 	bl	8100bd8 <__aeabi_dcmpeq>
 810a0c8:	2800      	cmp	r0, #0
 810a0ca:	d1a7      	bne.n	810a01c <_strtod_l+0x564>
 810a0cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a0ce:	9300      	str	r3, [sp, #0]
 810a0d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810a0d2:	9805      	ldr	r0, [sp, #20]
 810a0d4:	462b      	mov	r3, r5
 810a0d6:	464a      	mov	r2, r9
 810a0d8:	f7ff f8ce 	bl	8109278 <__s2b>
 810a0dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 810a0de:	2800      	cmp	r0, #0
 810a0e0:	f43f af09 	beq.w	8109ef6 <_strtod_l+0x43e>
 810a0e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a0e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a0e8:	2a00      	cmp	r2, #0
 810a0ea:	eba3 0308 	sub.w	r3, r3, r8
 810a0ee:	bfa8      	it	ge
 810a0f0:	2300      	movge	r3, #0
 810a0f2:	9312      	str	r3, [sp, #72]	@ 0x48
 810a0f4:	2400      	movs	r4, #0
 810a0f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810a0fa:	9316      	str	r3, [sp, #88]	@ 0x58
 810a0fc:	46a0      	mov	r8, r4
 810a0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a100:	9805      	ldr	r0, [sp, #20]
 810a102:	6859      	ldr	r1, [r3, #4]
 810a104:	f7ff f810 	bl	8109128 <_Balloc>
 810a108:	4681      	mov	r9, r0
 810a10a:	2800      	cmp	r0, #0
 810a10c:	f43f aef7 	beq.w	8109efe <_strtod_l+0x446>
 810a110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a112:	691a      	ldr	r2, [r3, #16]
 810a114:	3202      	adds	r2, #2
 810a116:	f103 010c 	add.w	r1, r3, #12
 810a11a:	0092      	lsls	r2, r2, #2
 810a11c:	300c      	adds	r0, #12
 810a11e:	f000 ff47 	bl	810afb0 <memcpy>
 810a122:	ec4b ab10 	vmov	d0, sl, fp
 810a126:	9805      	ldr	r0, [sp, #20]
 810a128:	aa1c      	add	r2, sp, #112	@ 0x70
 810a12a:	a91b      	add	r1, sp, #108	@ 0x6c
 810a12c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810a130:	f7ff fbd6 	bl	81098e0 <__d2b>
 810a134:	901a      	str	r0, [sp, #104]	@ 0x68
 810a136:	2800      	cmp	r0, #0
 810a138:	f43f aee1 	beq.w	8109efe <_strtod_l+0x446>
 810a13c:	9805      	ldr	r0, [sp, #20]
 810a13e:	2101      	movs	r1, #1
 810a140:	f7ff f930 	bl	81093a4 <__i2b>
 810a144:	4680      	mov	r8, r0
 810a146:	b948      	cbnz	r0, 810a15c <_strtod_l+0x6a4>
 810a148:	f04f 0800 	mov.w	r8, #0
 810a14c:	e6d7      	b.n	8109efe <_strtod_l+0x446>
 810a14e:	f04f 32ff 	mov.w	r2, #4294967295
 810a152:	fa02 f303 	lsl.w	r3, r2, r3
 810a156:	ea03 0a0a 	and.w	sl, r3, sl
 810a15a:	e7af      	b.n	810a0bc <_strtod_l+0x604>
 810a15c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810a15e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810a160:	2d00      	cmp	r5, #0
 810a162:	bfab      	itete	ge
 810a164:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810a166:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810a168:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810a16a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810a16c:	bfac      	ite	ge
 810a16e:	18ef      	addge	r7, r5, r3
 810a170:	1b5e      	sublt	r6, r3, r5
 810a172:	9b08      	ldr	r3, [sp, #32]
 810a174:	1aed      	subs	r5, r5, r3
 810a176:	4415      	add	r5, r2
 810a178:	4b65      	ldr	r3, [pc, #404]	@ (810a310 <_strtod_l+0x858>)
 810a17a:	3d01      	subs	r5, #1
 810a17c:	429d      	cmp	r5, r3
 810a17e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810a182:	da50      	bge.n	810a226 <_strtod_l+0x76e>
 810a184:	1b5b      	subs	r3, r3, r5
 810a186:	2b1f      	cmp	r3, #31
 810a188:	eba2 0203 	sub.w	r2, r2, r3
 810a18c:	f04f 0101 	mov.w	r1, #1
 810a190:	dc3d      	bgt.n	810a20e <_strtod_l+0x756>
 810a192:	fa01 f303 	lsl.w	r3, r1, r3
 810a196:	9313      	str	r3, [sp, #76]	@ 0x4c
 810a198:	2300      	movs	r3, #0
 810a19a:	9310      	str	r3, [sp, #64]	@ 0x40
 810a19c:	18bd      	adds	r5, r7, r2
 810a19e:	9b08      	ldr	r3, [sp, #32]
 810a1a0:	42af      	cmp	r7, r5
 810a1a2:	4416      	add	r6, r2
 810a1a4:	441e      	add	r6, r3
 810a1a6:	463b      	mov	r3, r7
 810a1a8:	bfa8      	it	ge
 810a1aa:	462b      	movge	r3, r5
 810a1ac:	42b3      	cmp	r3, r6
 810a1ae:	bfa8      	it	ge
 810a1b0:	4633      	movge	r3, r6
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	bfc2      	ittt	gt
 810a1b6:	1aed      	subgt	r5, r5, r3
 810a1b8:	1af6      	subgt	r6, r6, r3
 810a1ba:	1aff      	subgt	r7, r7, r3
 810a1bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810a1be:	2b00      	cmp	r3, #0
 810a1c0:	dd16      	ble.n	810a1f0 <_strtod_l+0x738>
 810a1c2:	4641      	mov	r1, r8
 810a1c4:	9805      	ldr	r0, [sp, #20]
 810a1c6:	461a      	mov	r2, r3
 810a1c8:	f7ff f9a4 	bl	8109514 <__pow5mult>
 810a1cc:	4680      	mov	r8, r0
 810a1ce:	2800      	cmp	r0, #0
 810a1d0:	d0ba      	beq.n	810a148 <_strtod_l+0x690>
 810a1d2:	4601      	mov	r1, r0
 810a1d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810a1d6:	9805      	ldr	r0, [sp, #20]
 810a1d8:	f7ff f8fa 	bl	81093d0 <__multiply>
 810a1dc:	900a      	str	r0, [sp, #40]	@ 0x28
 810a1de:	2800      	cmp	r0, #0
 810a1e0:	f43f ae8d 	beq.w	8109efe <_strtod_l+0x446>
 810a1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810a1e6:	9805      	ldr	r0, [sp, #20]
 810a1e8:	f7fe ffde 	bl	81091a8 <_Bfree>
 810a1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a1ee:	931a      	str	r3, [sp, #104]	@ 0x68
 810a1f0:	2d00      	cmp	r5, #0
 810a1f2:	dc1d      	bgt.n	810a230 <_strtod_l+0x778>
 810a1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a1f6:	2b00      	cmp	r3, #0
 810a1f8:	dd23      	ble.n	810a242 <_strtod_l+0x78a>
 810a1fa:	4649      	mov	r1, r9
 810a1fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810a1fe:	9805      	ldr	r0, [sp, #20]
 810a200:	f7ff f988 	bl	8109514 <__pow5mult>
 810a204:	4681      	mov	r9, r0
 810a206:	b9e0      	cbnz	r0, 810a242 <_strtod_l+0x78a>
 810a208:	f04f 0900 	mov.w	r9, #0
 810a20c:	e677      	b.n	8109efe <_strtod_l+0x446>
 810a20e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810a212:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810a216:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810a21a:	35e2      	adds	r5, #226	@ 0xe2
 810a21c:	fa01 f305 	lsl.w	r3, r1, r5
 810a220:	9310      	str	r3, [sp, #64]	@ 0x40
 810a222:	9113      	str	r1, [sp, #76]	@ 0x4c
 810a224:	e7ba      	b.n	810a19c <_strtod_l+0x6e4>
 810a226:	2300      	movs	r3, #0
 810a228:	9310      	str	r3, [sp, #64]	@ 0x40
 810a22a:	2301      	movs	r3, #1
 810a22c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810a22e:	e7b5      	b.n	810a19c <_strtod_l+0x6e4>
 810a230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810a232:	9805      	ldr	r0, [sp, #20]
 810a234:	462a      	mov	r2, r5
 810a236:	f7ff f9c7 	bl	81095c8 <__lshift>
 810a23a:	901a      	str	r0, [sp, #104]	@ 0x68
 810a23c:	2800      	cmp	r0, #0
 810a23e:	d1d9      	bne.n	810a1f4 <_strtod_l+0x73c>
 810a240:	e65d      	b.n	8109efe <_strtod_l+0x446>
 810a242:	2e00      	cmp	r6, #0
 810a244:	dd07      	ble.n	810a256 <_strtod_l+0x79e>
 810a246:	4649      	mov	r1, r9
 810a248:	9805      	ldr	r0, [sp, #20]
 810a24a:	4632      	mov	r2, r6
 810a24c:	f7ff f9bc 	bl	81095c8 <__lshift>
 810a250:	4681      	mov	r9, r0
 810a252:	2800      	cmp	r0, #0
 810a254:	d0d8      	beq.n	810a208 <_strtod_l+0x750>
 810a256:	2f00      	cmp	r7, #0
 810a258:	dd08      	ble.n	810a26c <_strtod_l+0x7b4>
 810a25a:	4641      	mov	r1, r8
 810a25c:	9805      	ldr	r0, [sp, #20]
 810a25e:	463a      	mov	r2, r7
 810a260:	f7ff f9b2 	bl	81095c8 <__lshift>
 810a264:	4680      	mov	r8, r0
 810a266:	2800      	cmp	r0, #0
 810a268:	f43f ae49 	beq.w	8109efe <_strtod_l+0x446>
 810a26c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810a26e:	9805      	ldr	r0, [sp, #20]
 810a270:	464a      	mov	r2, r9
 810a272:	f7ff fa31 	bl	81096d8 <__mdiff>
 810a276:	4604      	mov	r4, r0
 810a278:	2800      	cmp	r0, #0
 810a27a:	f43f ae40 	beq.w	8109efe <_strtod_l+0x446>
 810a27e:	68c3      	ldr	r3, [r0, #12]
 810a280:	930f      	str	r3, [sp, #60]	@ 0x3c
 810a282:	2300      	movs	r3, #0
 810a284:	60c3      	str	r3, [r0, #12]
 810a286:	4641      	mov	r1, r8
 810a288:	f7ff fa0a 	bl	81096a0 <__mcmp>
 810a28c:	2800      	cmp	r0, #0
 810a28e:	da45      	bge.n	810a31c <_strtod_l+0x864>
 810a290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a292:	ea53 030a 	orrs.w	r3, r3, sl
 810a296:	d16b      	bne.n	810a370 <_strtod_l+0x8b8>
 810a298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a29c:	2b00      	cmp	r3, #0
 810a29e:	d167      	bne.n	810a370 <_strtod_l+0x8b8>
 810a2a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810a2a4:	0d1b      	lsrs	r3, r3, #20
 810a2a6:	051b      	lsls	r3, r3, #20
 810a2a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810a2ac:	d960      	bls.n	810a370 <_strtod_l+0x8b8>
 810a2ae:	6963      	ldr	r3, [r4, #20]
 810a2b0:	b913      	cbnz	r3, 810a2b8 <_strtod_l+0x800>
 810a2b2:	6923      	ldr	r3, [r4, #16]
 810a2b4:	2b01      	cmp	r3, #1
 810a2b6:	dd5b      	ble.n	810a370 <_strtod_l+0x8b8>
 810a2b8:	4621      	mov	r1, r4
 810a2ba:	2201      	movs	r2, #1
 810a2bc:	9805      	ldr	r0, [sp, #20]
 810a2be:	f7ff f983 	bl	81095c8 <__lshift>
 810a2c2:	4641      	mov	r1, r8
 810a2c4:	4604      	mov	r4, r0
 810a2c6:	f7ff f9eb 	bl	81096a0 <__mcmp>
 810a2ca:	2800      	cmp	r0, #0
 810a2cc:	dd50      	ble.n	810a370 <_strtod_l+0x8b8>
 810a2ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810a2d2:	9a08      	ldr	r2, [sp, #32]
 810a2d4:	0d1b      	lsrs	r3, r3, #20
 810a2d6:	051b      	lsls	r3, r3, #20
 810a2d8:	2a00      	cmp	r2, #0
 810a2da:	d06a      	beq.n	810a3b2 <_strtod_l+0x8fa>
 810a2dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810a2e0:	d867      	bhi.n	810a3b2 <_strtod_l+0x8fa>
 810a2e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810a2e6:	f67f ae9d 	bls.w	810a024 <_strtod_l+0x56c>
 810a2ea:	4b0a      	ldr	r3, [pc, #40]	@ (810a314 <_strtod_l+0x85c>)
 810a2ec:	4650      	mov	r0, sl
 810a2ee:	4659      	mov	r1, fp
 810a2f0:	2200      	movs	r2, #0
 810a2f2:	f7f6 fa09 	bl	8100708 <__aeabi_dmul>
 810a2f6:	4b08      	ldr	r3, [pc, #32]	@ (810a318 <_strtod_l+0x860>)
 810a2f8:	400b      	ands	r3, r1
 810a2fa:	4682      	mov	sl, r0
 810a2fc:	468b      	mov	fp, r1
 810a2fe:	2b00      	cmp	r3, #0
 810a300:	f47f ae08 	bne.w	8109f14 <_strtod_l+0x45c>
 810a304:	9a05      	ldr	r2, [sp, #20]
 810a306:	2322      	movs	r3, #34	@ 0x22
 810a308:	6013      	str	r3, [r2, #0]
 810a30a:	e603      	b.n	8109f14 <_strtod_l+0x45c>
 810a30c:	0810bcb8 	.word	0x0810bcb8
 810a310:	fffffc02 	.word	0xfffffc02
 810a314:	39500000 	.word	0x39500000
 810a318:	7ff00000 	.word	0x7ff00000
 810a31c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 810a320:	d165      	bne.n	810a3ee <_strtod_l+0x936>
 810a322:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810a324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a328:	b35a      	cbz	r2, 810a382 <_strtod_l+0x8ca>
 810a32a:	4a9f      	ldr	r2, [pc, #636]	@ (810a5a8 <_strtod_l+0xaf0>)
 810a32c:	4293      	cmp	r3, r2
 810a32e:	d12b      	bne.n	810a388 <_strtod_l+0x8d0>
 810a330:	9b08      	ldr	r3, [sp, #32]
 810a332:	4651      	mov	r1, sl
 810a334:	b303      	cbz	r3, 810a378 <_strtod_l+0x8c0>
 810a336:	4b9d      	ldr	r3, [pc, #628]	@ (810a5ac <_strtod_l+0xaf4>)
 810a338:	465a      	mov	r2, fp
 810a33a:	4013      	ands	r3, r2
 810a33c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810a340:	f04f 32ff 	mov.w	r2, #4294967295
 810a344:	d81b      	bhi.n	810a37e <_strtod_l+0x8c6>
 810a346:	0d1b      	lsrs	r3, r3, #20
 810a348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810a34c:	fa02 f303 	lsl.w	r3, r2, r3
 810a350:	4299      	cmp	r1, r3
 810a352:	d119      	bne.n	810a388 <_strtod_l+0x8d0>
 810a354:	4b96      	ldr	r3, [pc, #600]	@ (810a5b0 <_strtod_l+0xaf8>)
 810a356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810a358:	429a      	cmp	r2, r3
 810a35a:	d102      	bne.n	810a362 <_strtod_l+0x8aa>
 810a35c:	3101      	adds	r1, #1
 810a35e:	f43f adce 	beq.w	8109efe <_strtod_l+0x446>
 810a362:	4b92      	ldr	r3, [pc, #584]	@ (810a5ac <_strtod_l+0xaf4>)
 810a364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810a366:	401a      	ands	r2, r3
 810a368:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810a36c:	f04f 0a00 	mov.w	sl, #0
 810a370:	9b08      	ldr	r3, [sp, #32]
 810a372:	2b00      	cmp	r3, #0
 810a374:	d1b9      	bne.n	810a2ea <_strtod_l+0x832>
 810a376:	e5cd      	b.n	8109f14 <_strtod_l+0x45c>
 810a378:	f04f 33ff 	mov.w	r3, #4294967295
 810a37c:	e7e8      	b.n	810a350 <_strtod_l+0x898>
 810a37e:	4613      	mov	r3, r2
 810a380:	e7e6      	b.n	810a350 <_strtod_l+0x898>
 810a382:	ea53 030a 	orrs.w	r3, r3, sl
 810a386:	d0a2      	beq.n	810a2ce <_strtod_l+0x816>
 810a388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810a38a:	b1db      	cbz	r3, 810a3c4 <_strtod_l+0x90c>
 810a38c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810a38e:	4213      	tst	r3, r2
 810a390:	d0ee      	beq.n	810a370 <_strtod_l+0x8b8>
 810a392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a394:	9a08      	ldr	r2, [sp, #32]
 810a396:	4650      	mov	r0, sl
 810a398:	4659      	mov	r1, fp
 810a39a:	b1bb      	cbz	r3, 810a3cc <_strtod_l+0x914>
 810a39c:	f7ff fb6e 	bl	8109a7c <sulp>
 810a3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810a3a4:	ec53 2b10 	vmov	r2, r3, d0
 810a3a8:	f7f5 fff8 	bl	810039c <__adddf3>
 810a3ac:	4682      	mov	sl, r0
 810a3ae:	468b      	mov	fp, r1
 810a3b0:	e7de      	b.n	810a370 <_strtod_l+0x8b8>
 810a3b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810a3b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810a3ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810a3be:	f04f 3aff 	mov.w	sl, #4294967295
 810a3c2:	e7d5      	b.n	810a370 <_strtod_l+0x8b8>
 810a3c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810a3c6:	ea13 0f0a 	tst.w	r3, sl
 810a3ca:	e7e1      	b.n	810a390 <_strtod_l+0x8d8>
 810a3cc:	f7ff fb56 	bl	8109a7c <sulp>
 810a3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810a3d4:	ec53 2b10 	vmov	r2, r3, d0
 810a3d8:	f7f5 ffde 	bl	8100398 <__aeabi_dsub>
 810a3dc:	2200      	movs	r2, #0
 810a3de:	2300      	movs	r3, #0
 810a3e0:	4682      	mov	sl, r0
 810a3e2:	468b      	mov	fp, r1
 810a3e4:	f7f6 fbf8 	bl	8100bd8 <__aeabi_dcmpeq>
 810a3e8:	2800      	cmp	r0, #0
 810a3ea:	d0c1      	beq.n	810a370 <_strtod_l+0x8b8>
 810a3ec:	e61a      	b.n	810a024 <_strtod_l+0x56c>
 810a3ee:	4641      	mov	r1, r8
 810a3f0:	4620      	mov	r0, r4
 810a3f2:	f7ff facd 	bl	8109990 <__ratio>
 810a3f6:	ec57 6b10 	vmov	r6, r7, d0
 810a3fa:	2200      	movs	r2, #0
 810a3fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810a400:	4630      	mov	r0, r6
 810a402:	4639      	mov	r1, r7
 810a404:	f7f6 fbfc 	bl	8100c00 <__aeabi_dcmple>
 810a408:	2800      	cmp	r0, #0
 810a40a:	d06f      	beq.n	810a4ec <_strtod_l+0xa34>
 810a40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a40e:	2b00      	cmp	r3, #0
 810a410:	d17a      	bne.n	810a508 <_strtod_l+0xa50>
 810a412:	f1ba 0f00 	cmp.w	sl, #0
 810a416:	d158      	bne.n	810a4ca <_strtod_l+0xa12>
 810a418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a41e:	2b00      	cmp	r3, #0
 810a420:	d15a      	bne.n	810a4d8 <_strtod_l+0xa20>
 810a422:	4b64      	ldr	r3, [pc, #400]	@ (810a5b4 <_strtod_l+0xafc>)
 810a424:	2200      	movs	r2, #0
 810a426:	4630      	mov	r0, r6
 810a428:	4639      	mov	r1, r7
 810a42a:	f7f6 fbdf 	bl	8100bec <__aeabi_dcmplt>
 810a42e:	2800      	cmp	r0, #0
 810a430:	d159      	bne.n	810a4e6 <_strtod_l+0xa2e>
 810a432:	4630      	mov	r0, r6
 810a434:	4639      	mov	r1, r7
 810a436:	4b60      	ldr	r3, [pc, #384]	@ (810a5b8 <_strtod_l+0xb00>)
 810a438:	2200      	movs	r2, #0
 810a43a:	f7f6 f965 	bl	8100708 <__aeabi_dmul>
 810a43e:	4606      	mov	r6, r0
 810a440:	460f      	mov	r7, r1
 810a442:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810a446:	9606      	str	r6, [sp, #24]
 810a448:	9307      	str	r3, [sp, #28]
 810a44a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a44e:	4d57      	ldr	r5, [pc, #348]	@ (810a5ac <_strtod_l+0xaf4>)
 810a450:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810a454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a456:	401d      	ands	r5, r3
 810a458:	4b58      	ldr	r3, [pc, #352]	@ (810a5bc <_strtod_l+0xb04>)
 810a45a:	429d      	cmp	r5, r3
 810a45c:	f040 80b2 	bne.w	810a5c4 <_strtod_l+0xb0c>
 810a460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a462:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810a466:	ec4b ab10 	vmov	d0, sl, fp
 810a46a:	f7ff f9c9 	bl	8109800 <__ulp>
 810a46e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a472:	ec51 0b10 	vmov	r0, r1, d0
 810a476:	f7f6 f947 	bl	8100708 <__aeabi_dmul>
 810a47a:	4652      	mov	r2, sl
 810a47c:	465b      	mov	r3, fp
 810a47e:	f7f5 ff8d 	bl	810039c <__adddf3>
 810a482:	460b      	mov	r3, r1
 810a484:	4949      	ldr	r1, [pc, #292]	@ (810a5ac <_strtod_l+0xaf4>)
 810a486:	4a4e      	ldr	r2, [pc, #312]	@ (810a5c0 <_strtod_l+0xb08>)
 810a488:	4019      	ands	r1, r3
 810a48a:	4291      	cmp	r1, r2
 810a48c:	4682      	mov	sl, r0
 810a48e:	d942      	bls.n	810a516 <_strtod_l+0xa5e>
 810a490:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810a492:	4b47      	ldr	r3, [pc, #284]	@ (810a5b0 <_strtod_l+0xaf8>)
 810a494:	429a      	cmp	r2, r3
 810a496:	d103      	bne.n	810a4a0 <_strtod_l+0x9e8>
 810a498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810a49a:	3301      	adds	r3, #1
 810a49c:	f43f ad2f 	beq.w	8109efe <_strtod_l+0x446>
 810a4a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810a5b0 <_strtod_l+0xaf8>
 810a4a4:	f04f 3aff 	mov.w	sl, #4294967295
 810a4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810a4aa:	9805      	ldr	r0, [sp, #20]
 810a4ac:	f7fe fe7c 	bl	81091a8 <_Bfree>
 810a4b0:	9805      	ldr	r0, [sp, #20]
 810a4b2:	4649      	mov	r1, r9
 810a4b4:	f7fe fe78 	bl	81091a8 <_Bfree>
 810a4b8:	9805      	ldr	r0, [sp, #20]
 810a4ba:	4641      	mov	r1, r8
 810a4bc:	f7fe fe74 	bl	81091a8 <_Bfree>
 810a4c0:	9805      	ldr	r0, [sp, #20]
 810a4c2:	4621      	mov	r1, r4
 810a4c4:	f7fe fe70 	bl	81091a8 <_Bfree>
 810a4c8:	e619      	b.n	810a0fe <_strtod_l+0x646>
 810a4ca:	f1ba 0f01 	cmp.w	sl, #1
 810a4ce:	d103      	bne.n	810a4d8 <_strtod_l+0xa20>
 810a4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a4d2:	2b00      	cmp	r3, #0
 810a4d4:	f43f ada6 	beq.w	810a024 <_strtod_l+0x56c>
 810a4d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810a588 <_strtod_l+0xad0>
 810a4dc:	4f35      	ldr	r7, [pc, #212]	@ (810a5b4 <_strtod_l+0xafc>)
 810a4de:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a4e2:	2600      	movs	r6, #0
 810a4e4:	e7b1      	b.n	810a44a <_strtod_l+0x992>
 810a4e6:	4f34      	ldr	r7, [pc, #208]	@ (810a5b8 <_strtod_l+0xb00>)
 810a4e8:	2600      	movs	r6, #0
 810a4ea:	e7aa      	b.n	810a442 <_strtod_l+0x98a>
 810a4ec:	4b32      	ldr	r3, [pc, #200]	@ (810a5b8 <_strtod_l+0xb00>)
 810a4ee:	4630      	mov	r0, r6
 810a4f0:	4639      	mov	r1, r7
 810a4f2:	2200      	movs	r2, #0
 810a4f4:	f7f6 f908 	bl	8100708 <__aeabi_dmul>
 810a4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a4fa:	4606      	mov	r6, r0
 810a4fc:	460f      	mov	r7, r1
 810a4fe:	2b00      	cmp	r3, #0
 810a500:	d09f      	beq.n	810a442 <_strtod_l+0x98a>
 810a502:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810a506:	e7a0      	b.n	810a44a <_strtod_l+0x992>
 810a508:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810a590 <_strtod_l+0xad8>
 810a50c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a510:	ec57 6b17 	vmov	r6, r7, d7
 810a514:	e799      	b.n	810a44a <_strtod_l+0x992>
 810a516:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810a51a:	9b08      	ldr	r3, [sp, #32]
 810a51c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 810a520:	2b00      	cmp	r3, #0
 810a522:	d1c1      	bne.n	810a4a8 <_strtod_l+0x9f0>
 810a524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810a528:	0d1b      	lsrs	r3, r3, #20
 810a52a:	051b      	lsls	r3, r3, #20
 810a52c:	429d      	cmp	r5, r3
 810a52e:	d1bb      	bne.n	810a4a8 <_strtod_l+0x9f0>
 810a530:	4630      	mov	r0, r6
 810a532:	4639      	mov	r1, r7
 810a534:	f7f6 fc48 	bl	8100dc8 <__aeabi_d2lz>
 810a538:	f7f6 f8b8 	bl	81006ac <__aeabi_l2d>
 810a53c:	4602      	mov	r2, r0
 810a53e:	460b      	mov	r3, r1
 810a540:	4630      	mov	r0, r6
 810a542:	4639      	mov	r1, r7
 810a544:	f7f5 ff28 	bl	8100398 <__aeabi_dsub>
 810a548:	460b      	mov	r3, r1
 810a54a:	4602      	mov	r2, r0
 810a54c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810a550:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a556:	ea46 060a 	orr.w	r6, r6, sl
 810a55a:	431e      	orrs	r6, r3
 810a55c:	d06f      	beq.n	810a63e <_strtod_l+0xb86>
 810a55e:	a30e      	add	r3, pc, #56	@ (adr r3, 810a598 <_strtod_l+0xae0>)
 810a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a564:	f7f6 fb42 	bl	8100bec <__aeabi_dcmplt>
 810a568:	2800      	cmp	r0, #0
 810a56a:	f47f acd3 	bne.w	8109f14 <_strtod_l+0x45c>
 810a56e:	a30c      	add	r3, pc, #48	@ (adr r3, 810a5a0 <_strtod_l+0xae8>)
 810a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810a578:	f7f6 fb56 	bl	8100c28 <__aeabi_dcmpgt>
 810a57c:	2800      	cmp	r0, #0
 810a57e:	d093      	beq.n	810a4a8 <_strtod_l+0x9f0>
 810a580:	e4c8      	b.n	8109f14 <_strtod_l+0x45c>
 810a582:	bf00      	nop
 810a584:	f3af 8000 	nop.w
 810a588:	00000000 	.word	0x00000000
 810a58c:	bff00000 	.word	0xbff00000
 810a590:	00000000 	.word	0x00000000
 810a594:	3ff00000 	.word	0x3ff00000
 810a598:	94a03595 	.word	0x94a03595
 810a59c:	3fdfffff 	.word	0x3fdfffff
 810a5a0:	35afe535 	.word	0x35afe535
 810a5a4:	3fe00000 	.word	0x3fe00000
 810a5a8:	000fffff 	.word	0x000fffff
 810a5ac:	7ff00000 	.word	0x7ff00000
 810a5b0:	7fefffff 	.word	0x7fefffff
 810a5b4:	3ff00000 	.word	0x3ff00000
 810a5b8:	3fe00000 	.word	0x3fe00000
 810a5bc:	7fe00000 	.word	0x7fe00000
 810a5c0:	7c9fffff 	.word	0x7c9fffff
 810a5c4:	9b08      	ldr	r3, [sp, #32]
 810a5c6:	b323      	cbz	r3, 810a612 <_strtod_l+0xb5a>
 810a5c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810a5cc:	d821      	bhi.n	810a612 <_strtod_l+0xb5a>
 810a5ce:	a328      	add	r3, pc, #160	@ (adr r3, 810a670 <_strtod_l+0xbb8>)
 810a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5d4:	4630      	mov	r0, r6
 810a5d6:	4639      	mov	r1, r7
 810a5d8:	f7f6 fb12 	bl	8100c00 <__aeabi_dcmple>
 810a5dc:	b1a0      	cbz	r0, 810a608 <_strtod_l+0xb50>
 810a5de:	4639      	mov	r1, r7
 810a5e0:	4630      	mov	r0, r6
 810a5e2:	f7f6 fb69 	bl	8100cb8 <__aeabi_d2uiz>
 810a5e6:	2801      	cmp	r0, #1
 810a5e8:	bf38      	it	cc
 810a5ea:	2001      	movcc	r0, #1
 810a5ec:	f7f6 f812 	bl	8100614 <__aeabi_ui2d>
 810a5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810a5f2:	4606      	mov	r6, r0
 810a5f4:	460f      	mov	r7, r1
 810a5f6:	b9fb      	cbnz	r3, 810a638 <_strtod_l+0xb80>
 810a5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810a5fc:	9014      	str	r0, [sp, #80]	@ 0x50
 810a5fe:	9315      	str	r3, [sp, #84]	@ 0x54
 810a600:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810a604:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810a608:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810a60a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810a60e:	1b5b      	subs	r3, r3, r5
 810a610:	9311      	str	r3, [sp, #68]	@ 0x44
 810a612:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810a616:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810a61a:	f7ff f8f1 	bl	8109800 <__ulp>
 810a61e:	4650      	mov	r0, sl
 810a620:	ec53 2b10 	vmov	r2, r3, d0
 810a624:	4659      	mov	r1, fp
 810a626:	f7f6 f86f 	bl	8100708 <__aeabi_dmul>
 810a62a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810a62e:	f7f5 feb5 	bl	810039c <__adddf3>
 810a632:	4682      	mov	sl, r0
 810a634:	468b      	mov	fp, r1
 810a636:	e770      	b.n	810a51a <_strtod_l+0xa62>
 810a638:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810a63c:	e7e0      	b.n	810a600 <_strtod_l+0xb48>
 810a63e:	a30e      	add	r3, pc, #56	@ (adr r3, 810a678 <_strtod_l+0xbc0>)
 810a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a644:	f7f6 fad2 	bl	8100bec <__aeabi_dcmplt>
 810a648:	e798      	b.n	810a57c <_strtod_l+0xac4>
 810a64a:	2300      	movs	r3, #0
 810a64c:	930e      	str	r3, [sp, #56]	@ 0x38
 810a64e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810a650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810a652:	6013      	str	r3, [r2, #0]
 810a654:	f7ff ba6d 	b.w	8109b32 <_strtod_l+0x7a>
 810a658:	2a65      	cmp	r2, #101	@ 0x65
 810a65a:	f43f ab68 	beq.w	8109d2e <_strtod_l+0x276>
 810a65e:	2a45      	cmp	r2, #69	@ 0x45
 810a660:	f43f ab65 	beq.w	8109d2e <_strtod_l+0x276>
 810a664:	2301      	movs	r3, #1
 810a666:	f7ff bba0 	b.w	8109daa <_strtod_l+0x2f2>
 810a66a:	bf00      	nop
 810a66c:	f3af 8000 	nop.w
 810a670:	ffc00000 	.word	0xffc00000
 810a674:	41dfffff 	.word	0x41dfffff
 810a678:	94a03595 	.word	0x94a03595
 810a67c:	3fcfffff 	.word	0x3fcfffff

0810a680 <_strtod_r>:
 810a680:	4b01      	ldr	r3, [pc, #4]	@ (810a688 <_strtod_r+0x8>)
 810a682:	f7ff ba19 	b.w	8109ab8 <_strtod_l>
 810a686:	bf00      	nop
 810a688:	1000006c 	.word	0x1000006c

0810a68c <_strtol_l.isra.0>:
 810a68c:	2b24      	cmp	r3, #36	@ 0x24
 810a68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a692:	4686      	mov	lr, r0
 810a694:	4690      	mov	r8, r2
 810a696:	d801      	bhi.n	810a69c <_strtol_l.isra.0+0x10>
 810a698:	2b01      	cmp	r3, #1
 810a69a:	d106      	bne.n	810a6aa <_strtol_l.isra.0+0x1e>
 810a69c:	f7fd fdb6 	bl	810820c <__errno>
 810a6a0:	2316      	movs	r3, #22
 810a6a2:	6003      	str	r3, [r0, #0]
 810a6a4:	2000      	movs	r0, #0
 810a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a6aa:	4834      	ldr	r0, [pc, #208]	@ (810a77c <_strtol_l.isra.0+0xf0>)
 810a6ac:	460d      	mov	r5, r1
 810a6ae:	462a      	mov	r2, r5
 810a6b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 810a6b4:	5d06      	ldrb	r6, [r0, r4]
 810a6b6:	f016 0608 	ands.w	r6, r6, #8
 810a6ba:	d1f8      	bne.n	810a6ae <_strtol_l.isra.0+0x22>
 810a6bc:	2c2d      	cmp	r4, #45	@ 0x2d
 810a6be:	d110      	bne.n	810a6e2 <_strtol_l.isra.0+0x56>
 810a6c0:	782c      	ldrb	r4, [r5, #0]
 810a6c2:	2601      	movs	r6, #1
 810a6c4:	1c95      	adds	r5, r2, #2
 810a6c6:	f033 0210 	bics.w	r2, r3, #16
 810a6ca:	d115      	bne.n	810a6f8 <_strtol_l.isra.0+0x6c>
 810a6cc:	2c30      	cmp	r4, #48	@ 0x30
 810a6ce:	d10d      	bne.n	810a6ec <_strtol_l.isra.0+0x60>
 810a6d0:	782a      	ldrb	r2, [r5, #0]
 810a6d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810a6d6:	2a58      	cmp	r2, #88	@ 0x58
 810a6d8:	d108      	bne.n	810a6ec <_strtol_l.isra.0+0x60>
 810a6da:	786c      	ldrb	r4, [r5, #1]
 810a6dc:	3502      	adds	r5, #2
 810a6de:	2310      	movs	r3, #16
 810a6e0:	e00a      	b.n	810a6f8 <_strtol_l.isra.0+0x6c>
 810a6e2:	2c2b      	cmp	r4, #43	@ 0x2b
 810a6e4:	bf04      	itt	eq
 810a6e6:	782c      	ldrbeq	r4, [r5, #0]
 810a6e8:	1c95      	addeq	r5, r2, #2
 810a6ea:	e7ec      	b.n	810a6c6 <_strtol_l.isra.0+0x3a>
 810a6ec:	2b00      	cmp	r3, #0
 810a6ee:	d1f6      	bne.n	810a6de <_strtol_l.isra.0+0x52>
 810a6f0:	2c30      	cmp	r4, #48	@ 0x30
 810a6f2:	bf14      	ite	ne
 810a6f4:	230a      	movne	r3, #10
 810a6f6:	2308      	moveq	r3, #8
 810a6f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810a6fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 810a700:	2200      	movs	r2, #0
 810a702:	fbbc f9f3 	udiv	r9, ip, r3
 810a706:	4610      	mov	r0, r2
 810a708:	fb03 ca19 	mls	sl, r3, r9, ip
 810a70c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810a710:	2f09      	cmp	r7, #9
 810a712:	d80f      	bhi.n	810a734 <_strtol_l.isra.0+0xa8>
 810a714:	463c      	mov	r4, r7
 810a716:	42a3      	cmp	r3, r4
 810a718:	dd1b      	ble.n	810a752 <_strtol_l.isra.0+0xc6>
 810a71a:	1c57      	adds	r7, r2, #1
 810a71c:	d007      	beq.n	810a72e <_strtol_l.isra.0+0xa2>
 810a71e:	4581      	cmp	r9, r0
 810a720:	d314      	bcc.n	810a74c <_strtol_l.isra.0+0xc0>
 810a722:	d101      	bne.n	810a728 <_strtol_l.isra.0+0x9c>
 810a724:	45a2      	cmp	sl, r4
 810a726:	db11      	blt.n	810a74c <_strtol_l.isra.0+0xc0>
 810a728:	fb00 4003 	mla	r0, r0, r3, r4
 810a72c:	2201      	movs	r2, #1
 810a72e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810a732:	e7eb      	b.n	810a70c <_strtol_l.isra.0+0x80>
 810a734:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810a738:	2f19      	cmp	r7, #25
 810a73a:	d801      	bhi.n	810a740 <_strtol_l.isra.0+0xb4>
 810a73c:	3c37      	subs	r4, #55	@ 0x37
 810a73e:	e7ea      	b.n	810a716 <_strtol_l.isra.0+0x8a>
 810a740:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810a744:	2f19      	cmp	r7, #25
 810a746:	d804      	bhi.n	810a752 <_strtol_l.isra.0+0xc6>
 810a748:	3c57      	subs	r4, #87	@ 0x57
 810a74a:	e7e4      	b.n	810a716 <_strtol_l.isra.0+0x8a>
 810a74c:	f04f 32ff 	mov.w	r2, #4294967295
 810a750:	e7ed      	b.n	810a72e <_strtol_l.isra.0+0xa2>
 810a752:	1c53      	adds	r3, r2, #1
 810a754:	d108      	bne.n	810a768 <_strtol_l.isra.0+0xdc>
 810a756:	2322      	movs	r3, #34	@ 0x22
 810a758:	f8ce 3000 	str.w	r3, [lr]
 810a75c:	4660      	mov	r0, ip
 810a75e:	f1b8 0f00 	cmp.w	r8, #0
 810a762:	d0a0      	beq.n	810a6a6 <_strtol_l.isra.0+0x1a>
 810a764:	1e69      	subs	r1, r5, #1
 810a766:	e006      	b.n	810a776 <_strtol_l.isra.0+0xea>
 810a768:	b106      	cbz	r6, 810a76c <_strtol_l.isra.0+0xe0>
 810a76a:	4240      	negs	r0, r0
 810a76c:	f1b8 0f00 	cmp.w	r8, #0
 810a770:	d099      	beq.n	810a6a6 <_strtol_l.isra.0+0x1a>
 810a772:	2a00      	cmp	r2, #0
 810a774:	d1f6      	bne.n	810a764 <_strtol_l.isra.0+0xd8>
 810a776:	f8c8 1000 	str.w	r1, [r8]
 810a77a:	e794      	b.n	810a6a6 <_strtol_l.isra.0+0x1a>
 810a77c:	0810bce1 	.word	0x0810bce1

0810a780 <_strtol_r>:
 810a780:	f7ff bf84 	b.w	810a68c <_strtol_l.isra.0>

0810a784 <__ssputs_r>:
 810a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a788:	688e      	ldr	r6, [r1, #8]
 810a78a:	461f      	mov	r7, r3
 810a78c:	42be      	cmp	r6, r7
 810a78e:	680b      	ldr	r3, [r1, #0]
 810a790:	4682      	mov	sl, r0
 810a792:	460c      	mov	r4, r1
 810a794:	4690      	mov	r8, r2
 810a796:	d82d      	bhi.n	810a7f4 <__ssputs_r+0x70>
 810a798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810a79c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810a7a0:	d026      	beq.n	810a7f0 <__ssputs_r+0x6c>
 810a7a2:	6965      	ldr	r5, [r4, #20]
 810a7a4:	6909      	ldr	r1, [r1, #16]
 810a7a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a7aa:	eba3 0901 	sub.w	r9, r3, r1
 810a7ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a7b2:	1c7b      	adds	r3, r7, #1
 810a7b4:	444b      	add	r3, r9
 810a7b6:	106d      	asrs	r5, r5, #1
 810a7b8:	429d      	cmp	r5, r3
 810a7ba:	bf38      	it	cc
 810a7bc:	461d      	movcc	r5, r3
 810a7be:	0553      	lsls	r3, r2, #21
 810a7c0:	d527      	bpl.n	810a812 <__ssputs_r+0x8e>
 810a7c2:	4629      	mov	r1, r5
 810a7c4:	f7fe fc24 	bl	8109010 <_malloc_r>
 810a7c8:	4606      	mov	r6, r0
 810a7ca:	b360      	cbz	r0, 810a826 <__ssputs_r+0xa2>
 810a7cc:	6921      	ldr	r1, [r4, #16]
 810a7ce:	464a      	mov	r2, r9
 810a7d0:	f000 fbee 	bl	810afb0 <memcpy>
 810a7d4:	89a3      	ldrh	r3, [r4, #12]
 810a7d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810a7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810a7de:	81a3      	strh	r3, [r4, #12]
 810a7e0:	6126      	str	r6, [r4, #16]
 810a7e2:	6165      	str	r5, [r4, #20]
 810a7e4:	444e      	add	r6, r9
 810a7e6:	eba5 0509 	sub.w	r5, r5, r9
 810a7ea:	6026      	str	r6, [r4, #0]
 810a7ec:	60a5      	str	r5, [r4, #8]
 810a7ee:	463e      	mov	r6, r7
 810a7f0:	42be      	cmp	r6, r7
 810a7f2:	d900      	bls.n	810a7f6 <__ssputs_r+0x72>
 810a7f4:	463e      	mov	r6, r7
 810a7f6:	6820      	ldr	r0, [r4, #0]
 810a7f8:	4632      	mov	r2, r6
 810a7fa:	4641      	mov	r1, r8
 810a7fc:	f000 fb9c 	bl	810af38 <memmove>
 810a800:	68a3      	ldr	r3, [r4, #8]
 810a802:	1b9b      	subs	r3, r3, r6
 810a804:	60a3      	str	r3, [r4, #8]
 810a806:	6823      	ldr	r3, [r4, #0]
 810a808:	4433      	add	r3, r6
 810a80a:	6023      	str	r3, [r4, #0]
 810a80c:	2000      	movs	r0, #0
 810a80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a812:	462a      	mov	r2, r5
 810a814:	f000 ff61 	bl	810b6da <_realloc_r>
 810a818:	4606      	mov	r6, r0
 810a81a:	2800      	cmp	r0, #0
 810a81c:	d1e0      	bne.n	810a7e0 <__ssputs_r+0x5c>
 810a81e:	6921      	ldr	r1, [r4, #16]
 810a820:	4650      	mov	r0, sl
 810a822:	f7fe fb81 	bl	8108f28 <_free_r>
 810a826:	230c      	movs	r3, #12
 810a828:	f8ca 3000 	str.w	r3, [sl]
 810a82c:	89a3      	ldrh	r3, [r4, #12]
 810a82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a832:	81a3      	strh	r3, [r4, #12]
 810a834:	f04f 30ff 	mov.w	r0, #4294967295
 810a838:	e7e9      	b.n	810a80e <__ssputs_r+0x8a>
	...

0810a83c <_svfiprintf_r>:
 810a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a840:	4698      	mov	r8, r3
 810a842:	898b      	ldrh	r3, [r1, #12]
 810a844:	061b      	lsls	r3, r3, #24
 810a846:	b09d      	sub	sp, #116	@ 0x74
 810a848:	4607      	mov	r7, r0
 810a84a:	460d      	mov	r5, r1
 810a84c:	4614      	mov	r4, r2
 810a84e:	d510      	bpl.n	810a872 <_svfiprintf_r+0x36>
 810a850:	690b      	ldr	r3, [r1, #16]
 810a852:	b973      	cbnz	r3, 810a872 <_svfiprintf_r+0x36>
 810a854:	2140      	movs	r1, #64	@ 0x40
 810a856:	f7fe fbdb 	bl	8109010 <_malloc_r>
 810a85a:	6028      	str	r0, [r5, #0]
 810a85c:	6128      	str	r0, [r5, #16]
 810a85e:	b930      	cbnz	r0, 810a86e <_svfiprintf_r+0x32>
 810a860:	230c      	movs	r3, #12
 810a862:	603b      	str	r3, [r7, #0]
 810a864:	f04f 30ff 	mov.w	r0, #4294967295
 810a868:	b01d      	add	sp, #116	@ 0x74
 810a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a86e:	2340      	movs	r3, #64	@ 0x40
 810a870:	616b      	str	r3, [r5, #20]
 810a872:	2300      	movs	r3, #0
 810a874:	9309      	str	r3, [sp, #36]	@ 0x24
 810a876:	2320      	movs	r3, #32
 810a878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810a87c:	f8cd 800c 	str.w	r8, [sp, #12]
 810a880:	2330      	movs	r3, #48	@ 0x30
 810a882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810aa20 <_svfiprintf_r+0x1e4>
 810a886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810a88a:	f04f 0901 	mov.w	r9, #1
 810a88e:	4623      	mov	r3, r4
 810a890:	469a      	mov	sl, r3
 810a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a896:	b10a      	cbz	r2, 810a89c <_svfiprintf_r+0x60>
 810a898:	2a25      	cmp	r2, #37	@ 0x25
 810a89a:	d1f9      	bne.n	810a890 <_svfiprintf_r+0x54>
 810a89c:	ebba 0b04 	subs.w	fp, sl, r4
 810a8a0:	d00b      	beq.n	810a8ba <_svfiprintf_r+0x7e>
 810a8a2:	465b      	mov	r3, fp
 810a8a4:	4622      	mov	r2, r4
 810a8a6:	4629      	mov	r1, r5
 810a8a8:	4638      	mov	r0, r7
 810a8aa:	f7ff ff6b 	bl	810a784 <__ssputs_r>
 810a8ae:	3001      	adds	r0, #1
 810a8b0:	f000 80a7 	beq.w	810aa02 <_svfiprintf_r+0x1c6>
 810a8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a8b6:	445a      	add	r2, fp
 810a8b8:	9209      	str	r2, [sp, #36]	@ 0x24
 810a8ba:	f89a 3000 	ldrb.w	r3, [sl]
 810a8be:	2b00      	cmp	r3, #0
 810a8c0:	f000 809f 	beq.w	810aa02 <_svfiprintf_r+0x1c6>
 810a8c4:	2300      	movs	r3, #0
 810a8c6:	f04f 32ff 	mov.w	r2, #4294967295
 810a8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a8ce:	f10a 0a01 	add.w	sl, sl, #1
 810a8d2:	9304      	str	r3, [sp, #16]
 810a8d4:	9307      	str	r3, [sp, #28]
 810a8d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810a8da:	931a      	str	r3, [sp, #104]	@ 0x68
 810a8dc:	4654      	mov	r4, sl
 810a8de:	2205      	movs	r2, #5
 810a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a8e4:	484e      	ldr	r0, [pc, #312]	@ (810aa20 <_svfiprintf_r+0x1e4>)
 810a8e6:	f7f5 fcfb 	bl	81002e0 <memchr>
 810a8ea:	9a04      	ldr	r2, [sp, #16]
 810a8ec:	b9d8      	cbnz	r0, 810a926 <_svfiprintf_r+0xea>
 810a8ee:	06d0      	lsls	r0, r2, #27
 810a8f0:	bf44      	itt	mi
 810a8f2:	2320      	movmi	r3, #32
 810a8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a8f8:	0711      	lsls	r1, r2, #28
 810a8fa:	bf44      	itt	mi
 810a8fc:	232b      	movmi	r3, #43	@ 0x2b
 810a8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a902:	f89a 3000 	ldrb.w	r3, [sl]
 810a906:	2b2a      	cmp	r3, #42	@ 0x2a
 810a908:	d015      	beq.n	810a936 <_svfiprintf_r+0xfa>
 810a90a:	9a07      	ldr	r2, [sp, #28]
 810a90c:	4654      	mov	r4, sl
 810a90e:	2000      	movs	r0, #0
 810a910:	f04f 0c0a 	mov.w	ip, #10
 810a914:	4621      	mov	r1, r4
 810a916:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a91a:	3b30      	subs	r3, #48	@ 0x30
 810a91c:	2b09      	cmp	r3, #9
 810a91e:	d94b      	bls.n	810a9b8 <_svfiprintf_r+0x17c>
 810a920:	b1b0      	cbz	r0, 810a950 <_svfiprintf_r+0x114>
 810a922:	9207      	str	r2, [sp, #28]
 810a924:	e014      	b.n	810a950 <_svfiprintf_r+0x114>
 810a926:	eba0 0308 	sub.w	r3, r0, r8
 810a92a:	fa09 f303 	lsl.w	r3, r9, r3
 810a92e:	4313      	orrs	r3, r2
 810a930:	9304      	str	r3, [sp, #16]
 810a932:	46a2      	mov	sl, r4
 810a934:	e7d2      	b.n	810a8dc <_svfiprintf_r+0xa0>
 810a936:	9b03      	ldr	r3, [sp, #12]
 810a938:	1d19      	adds	r1, r3, #4
 810a93a:	681b      	ldr	r3, [r3, #0]
 810a93c:	9103      	str	r1, [sp, #12]
 810a93e:	2b00      	cmp	r3, #0
 810a940:	bfbb      	ittet	lt
 810a942:	425b      	neglt	r3, r3
 810a944:	f042 0202 	orrlt.w	r2, r2, #2
 810a948:	9307      	strge	r3, [sp, #28]
 810a94a:	9307      	strlt	r3, [sp, #28]
 810a94c:	bfb8      	it	lt
 810a94e:	9204      	strlt	r2, [sp, #16]
 810a950:	7823      	ldrb	r3, [r4, #0]
 810a952:	2b2e      	cmp	r3, #46	@ 0x2e
 810a954:	d10a      	bne.n	810a96c <_svfiprintf_r+0x130>
 810a956:	7863      	ldrb	r3, [r4, #1]
 810a958:	2b2a      	cmp	r3, #42	@ 0x2a
 810a95a:	d132      	bne.n	810a9c2 <_svfiprintf_r+0x186>
 810a95c:	9b03      	ldr	r3, [sp, #12]
 810a95e:	1d1a      	adds	r2, r3, #4
 810a960:	681b      	ldr	r3, [r3, #0]
 810a962:	9203      	str	r2, [sp, #12]
 810a964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810a968:	3402      	adds	r4, #2
 810a96a:	9305      	str	r3, [sp, #20]
 810a96c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810aa30 <_svfiprintf_r+0x1f4>
 810a970:	7821      	ldrb	r1, [r4, #0]
 810a972:	2203      	movs	r2, #3
 810a974:	4650      	mov	r0, sl
 810a976:	f7f5 fcb3 	bl	81002e0 <memchr>
 810a97a:	b138      	cbz	r0, 810a98c <_svfiprintf_r+0x150>
 810a97c:	9b04      	ldr	r3, [sp, #16]
 810a97e:	eba0 000a 	sub.w	r0, r0, sl
 810a982:	2240      	movs	r2, #64	@ 0x40
 810a984:	4082      	lsls	r2, r0
 810a986:	4313      	orrs	r3, r2
 810a988:	3401      	adds	r4, #1
 810a98a:	9304      	str	r3, [sp, #16]
 810a98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a990:	4824      	ldr	r0, [pc, #144]	@ (810aa24 <_svfiprintf_r+0x1e8>)
 810a992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810a996:	2206      	movs	r2, #6
 810a998:	f7f5 fca2 	bl	81002e0 <memchr>
 810a99c:	2800      	cmp	r0, #0
 810a99e:	d036      	beq.n	810aa0e <_svfiprintf_r+0x1d2>
 810a9a0:	4b21      	ldr	r3, [pc, #132]	@ (810aa28 <_svfiprintf_r+0x1ec>)
 810a9a2:	bb1b      	cbnz	r3, 810a9ec <_svfiprintf_r+0x1b0>
 810a9a4:	9b03      	ldr	r3, [sp, #12]
 810a9a6:	3307      	adds	r3, #7
 810a9a8:	f023 0307 	bic.w	r3, r3, #7
 810a9ac:	3308      	adds	r3, #8
 810a9ae:	9303      	str	r3, [sp, #12]
 810a9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a9b2:	4433      	add	r3, r6
 810a9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 810a9b6:	e76a      	b.n	810a88e <_svfiprintf_r+0x52>
 810a9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 810a9bc:	460c      	mov	r4, r1
 810a9be:	2001      	movs	r0, #1
 810a9c0:	e7a8      	b.n	810a914 <_svfiprintf_r+0xd8>
 810a9c2:	2300      	movs	r3, #0
 810a9c4:	3401      	adds	r4, #1
 810a9c6:	9305      	str	r3, [sp, #20]
 810a9c8:	4619      	mov	r1, r3
 810a9ca:	f04f 0c0a 	mov.w	ip, #10
 810a9ce:	4620      	mov	r0, r4
 810a9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a9d4:	3a30      	subs	r2, #48	@ 0x30
 810a9d6:	2a09      	cmp	r2, #9
 810a9d8:	d903      	bls.n	810a9e2 <_svfiprintf_r+0x1a6>
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d0c6      	beq.n	810a96c <_svfiprintf_r+0x130>
 810a9de:	9105      	str	r1, [sp, #20]
 810a9e0:	e7c4      	b.n	810a96c <_svfiprintf_r+0x130>
 810a9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 810a9e6:	4604      	mov	r4, r0
 810a9e8:	2301      	movs	r3, #1
 810a9ea:	e7f0      	b.n	810a9ce <_svfiprintf_r+0x192>
 810a9ec:	ab03      	add	r3, sp, #12
 810a9ee:	9300      	str	r3, [sp, #0]
 810a9f0:	462a      	mov	r2, r5
 810a9f2:	4b0e      	ldr	r3, [pc, #56]	@ (810aa2c <_svfiprintf_r+0x1f0>)
 810a9f4:	a904      	add	r1, sp, #16
 810a9f6:	4638      	mov	r0, r7
 810a9f8:	f7fc fcb8 	bl	810736c <_printf_float>
 810a9fc:	1c42      	adds	r2, r0, #1
 810a9fe:	4606      	mov	r6, r0
 810aa00:	d1d6      	bne.n	810a9b0 <_svfiprintf_r+0x174>
 810aa02:	89ab      	ldrh	r3, [r5, #12]
 810aa04:	065b      	lsls	r3, r3, #25
 810aa06:	f53f af2d 	bmi.w	810a864 <_svfiprintf_r+0x28>
 810aa0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810aa0c:	e72c      	b.n	810a868 <_svfiprintf_r+0x2c>
 810aa0e:	ab03      	add	r3, sp, #12
 810aa10:	9300      	str	r3, [sp, #0]
 810aa12:	462a      	mov	r2, r5
 810aa14:	4b05      	ldr	r3, [pc, #20]	@ (810aa2c <_svfiprintf_r+0x1f0>)
 810aa16:	a904      	add	r1, sp, #16
 810aa18:	4638      	mov	r0, r7
 810aa1a:	f7fc ff3f 	bl	810789c <_printf_i>
 810aa1e:	e7ed      	b.n	810a9fc <_svfiprintf_r+0x1c0>
 810aa20:	0810bad9 	.word	0x0810bad9
 810aa24:	0810bae3 	.word	0x0810bae3
 810aa28:	0810736d 	.word	0x0810736d
 810aa2c:	0810a785 	.word	0x0810a785
 810aa30:	0810badf 	.word	0x0810badf

0810aa34 <__sfputc_r>:
 810aa34:	6893      	ldr	r3, [r2, #8]
 810aa36:	3b01      	subs	r3, #1
 810aa38:	2b00      	cmp	r3, #0
 810aa3a:	b410      	push	{r4}
 810aa3c:	6093      	str	r3, [r2, #8]
 810aa3e:	da08      	bge.n	810aa52 <__sfputc_r+0x1e>
 810aa40:	6994      	ldr	r4, [r2, #24]
 810aa42:	42a3      	cmp	r3, r4
 810aa44:	db01      	blt.n	810aa4a <__sfputc_r+0x16>
 810aa46:	290a      	cmp	r1, #10
 810aa48:	d103      	bne.n	810aa52 <__sfputc_r+0x1e>
 810aa4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810aa4e:	f000 b9df 	b.w	810ae10 <__swbuf_r>
 810aa52:	6813      	ldr	r3, [r2, #0]
 810aa54:	1c58      	adds	r0, r3, #1
 810aa56:	6010      	str	r0, [r2, #0]
 810aa58:	7019      	strb	r1, [r3, #0]
 810aa5a:	4608      	mov	r0, r1
 810aa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810aa60:	4770      	bx	lr

0810aa62 <__sfputs_r>:
 810aa62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aa64:	4606      	mov	r6, r0
 810aa66:	460f      	mov	r7, r1
 810aa68:	4614      	mov	r4, r2
 810aa6a:	18d5      	adds	r5, r2, r3
 810aa6c:	42ac      	cmp	r4, r5
 810aa6e:	d101      	bne.n	810aa74 <__sfputs_r+0x12>
 810aa70:	2000      	movs	r0, #0
 810aa72:	e007      	b.n	810aa84 <__sfputs_r+0x22>
 810aa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 810aa78:	463a      	mov	r2, r7
 810aa7a:	4630      	mov	r0, r6
 810aa7c:	f7ff ffda 	bl	810aa34 <__sfputc_r>
 810aa80:	1c43      	adds	r3, r0, #1
 810aa82:	d1f3      	bne.n	810aa6c <__sfputs_r+0xa>
 810aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810aa88 <_vfiprintf_r>:
 810aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa8c:	460d      	mov	r5, r1
 810aa8e:	b09d      	sub	sp, #116	@ 0x74
 810aa90:	4614      	mov	r4, r2
 810aa92:	4698      	mov	r8, r3
 810aa94:	4606      	mov	r6, r0
 810aa96:	b118      	cbz	r0, 810aaa0 <_vfiprintf_r+0x18>
 810aa98:	6a03      	ldr	r3, [r0, #32]
 810aa9a:	b90b      	cbnz	r3, 810aaa0 <_vfiprintf_r+0x18>
 810aa9c:	f7fd fab6 	bl	810800c <__sinit>
 810aaa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810aaa2:	07d9      	lsls	r1, r3, #31
 810aaa4:	d405      	bmi.n	810aab2 <_vfiprintf_r+0x2a>
 810aaa6:	89ab      	ldrh	r3, [r5, #12]
 810aaa8:	059a      	lsls	r2, r3, #22
 810aaaa:	d402      	bmi.n	810aab2 <_vfiprintf_r+0x2a>
 810aaac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810aaae:	f7fd fbd8 	bl	8108262 <__retarget_lock_acquire_recursive>
 810aab2:	89ab      	ldrh	r3, [r5, #12]
 810aab4:	071b      	lsls	r3, r3, #28
 810aab6:	d501      	bpl.n	810aabc <_vfiprintf_r+0x34>
 810aab8:	692b      	ldr	r3, [r5, #16]
 810aaba:	b99b      	cbnz	r3, 810aae4 <_vfiprintf_r+0x5c>
 810aabc:	4629      	mov	r1, r5
 810aabe:	4630      	mov	r0, r6
 810aac0:	f000 f9e4 	bl	810ae8c <__swsetup_r>
 810aac4:	b170      	cbz	r0, 810aae4 <_vfiprintf_r+0x5c>
 810aac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810aac8:	07dc      	lsls	r4, r3, #31
 810aaca:	d504      	bpl.n	810aad6 <_vfiprintf_r+0x4e>
 810aacc:	f04f 30ff 	mov.w	r0, #4294967295
 810aad0:	b01d      	add	sp, #116	@ 0x74
 810aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aad6:	89ab      	ldrh	r3, [r5, #12]
 810aad8:	0598      	lsls	r0, r3, #22
 810aada:	d4f7      	bmi.n	810aacc <_vfiprintf_r+0x44>
 810aadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810aade:	f7fd fbc1 	bl	8108264 <__retarget_lock_release_recursive>
 810aae2:	e7f3      	b.n	810aacc <_vfiprintf_r+0x44>
 810aae4:	2300      	movs	r3, #0
 810aae6:	9309      	str	r3, [sp, #36]	@ 0x24
 810aae8:	2320      	movs	r3, #32
 810aaea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810aaee:	f8cd 800c 	str.w	r8, [sp, #12]
 810aaf2:	2330      	movs	r3, #48	@ 0x30
 810aaf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810aca4 <_vfiprintf_r+0x21c>
 810aaf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810aafc:	f04f 0901 	mov.w	r9, #1
 810ab00:	4623      	mov	r3, r4
 810ab02:	469a      	mov	sl, r3
 810ab04:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ab08:	b10a      	cbz	r2, 810ab0e <_vfiprintf_r+0x86>
 810ab0a:	2a25      	cmp	r2, #37	@ 0x25
 810ab0c:	d1f9      	bne.n	810ab02 <_vfiprintf_r+0x7a>
 810ab0e:	ebba 0b04 	subs.w	fp, sl, r4
 810ab12:	d00b      	beq.n	810ab2c <_vfiprintf_r+0xa4>
 810ab14:	465b      	mov	r3, fp
 810ab16:	4622      	mov	r2, r4
 810ab18:	4629      	mov	r1, r5
 810ab1a:	4630      	mov	r0, r6
 810ab1c:	f7ff ffa1 	bl	810aa62 <__sfputs_r>
 810ab20:	3001      	adds	r0, #1
 810ab22:	f000 80a7 	beq.w	810ac74 <_vfiprintf_r+0x1ec>
 810ab26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ab28:	445a      	add	r2, fp
 810ab2a:	9209      	str	r2, [sp, #36]	@ 0x24
 810ab2c:	f89a 3000 	ldrb.w	r3, [sl]
 810ab30:	2b00      	cmp	r3, #0
 810ab32:	f000 809f 	beq.w	810ac74 <_vfiprintf_r+0x1ec>
 810ab36:	2300      	movs	r3, #0
 810ab38:	f04f 32ff 	mov.w	r2, #4294967295
 810ab3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ab40:	f10a 0a01 	add.w	sl, sl, #1
 810ab44:	9304      	str	r3, [sp, #16]
 810ab46:	9307      	str	r3, [sp, #28]
 810ab48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810ab4c:	931a      	str	r3, [sp, #104]	@ 0x68
 810ab4e:	4654      	mov	r4, sl
 810ab50:	2205      	movs	r2, #5
 810ab52:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ab56:	4853      	ldr	r0, [pc, #332]	@ (810aca4 <_vfiprintf_r+0x21c>)
 810ab58:	f7f5 fbc2 	bl	81002e0 <memchr>
 810ab5c:	9a04      	ldr	r2, [sp, #16]
 810ab5e:	b9d8      	cbnz	r0, 810ab98 <_vfiprintf_r+0x110>
 810ab60:	06d1      	lsls	r1, r2, #27
 810ab62:	bf44      	itt	mi
 810ab64:	2320      	movmi	r3, #32
 810ab66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ab6a:	0713      	lsls	r3, r2, #28
 810ab6c:	bf44      	itt	mi
 810ab6e:	232b      	movmi	r3, #43	@ 0x2b
 810ab70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ab74:	f89a 3000 	ldrb.w	r3, [sl]
 810ab78:	2b2a      	cmp	r3, #42	@ 0x2a
 810ab7a:	d015      	beq.n	810aba8 <_vfiprintf_r+0x120>
 810ab7c:	9a07      	ldr	r2, [sp, #28]
 810ab7e:	4654      	mov	r4, sl
 810ab80:	2000      	movs	r0, #0
 810ab82:	f04f 0c0a 	mov.w	ip, #10
 810ab86:	4621      	mov	r1, r4
 810ab88:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ab8c:	3b30      	subs	r3, #48	@ 0x30
 810ab8e:	2b09      	cmp	r3, #9
 810ab90:	d94b      	bls.n	810ac2a <_vfiprintf_r+0x1a2>
 810ab92:	b1b0      	cbz	r0, 810abc2 <_vfiprintf_r+0x13a>
 810ab94:	9207      	str	r2, [sp, #28]
 810ab96:	e014      	b.n	810abc2 <_vfiprintf_r+0x13a>
 810ab98:	eba0 0308 	sub.w	r3, r0, r8
 810ab9c:	fa09 f303 	lsl.w	r3, r9, r3
 810aba0:	4313      	orrs	r3, r2
 810aba2:	9304      	str	r3, [sp, #16]
 810aba4:	46a2      	mov	sl, r4
 810aba6:	e7d2      	b.n	810ab4e <_vfiprintf_r+0xc6>
 810aba8:	9b03      	ldr	r3, [sp, #12]
 810abaa:	1d19      	adds	r1, r3, #4
 810abac:	681b      	ldr	r3, [r3, #0]
 810abae:	9103      	str	r1, [sp, #12]
 810abb0:	2b00      	cmp	r3, #0
 810abb2:	bfbb      	ittet	lt
 810abb4:	425b      	neglt	r3, r3
 810abb6:	f042 0202 	orrlt.w	r2, r2, #2
 810abba:	9307      	strge	r3, [sp, #28]
 810abbc:	9307      	strlt	r3, [sp, #28]
 810abbe:	bfb8      	it	lt
 810abc0:	9204      	strlt	r2, [sp, #16]
 810abc2:	7823      	ldrb	r3, [r4, #0]
 810abc4:	2b2e      	cmp	r3, #46	@ 0x2e
 810abc6:	d10a      	bne.n	810abde <_vfiprintf_r+0x156>
 810abc8:	7863      	ldrb	r3, [r4, #1]
 810abca:	2b2a      	cmp	r3, #42	@ 0x2a
 810abcc:	d132      	bne.n	810ac34 <_vfiprintf_r+0x1ac>
 810abce:	9b03      	ldr	r3, [sp, #12]
 810abd0:	1d1a      	adds	r2, r3, #4
 810abd2:	681b      	ldr	r3, [r3, #0]
 810abd4:	9203      	str	r2, [sp, #12]
 810abd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810abda:	3402      	adds	r4, #2
 810abdc:	9305      	str	r3, [sp, #20]
 810abde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810acb4 <_vfiprintf_r+0x22c>
 810abe2:	7821      	ldrb	r1, [r4, #0]
 810abe4:	2203      	movs	r2, #3
 810abe6:	4650      	mov	r0, sl
 810abe8:	f7f5 fb7a 	bl	81002e0 <memchr>
 810abec:	b138      	cbz	r0, 810abfe <_vfiprintf_r+0x176>
 810abee:	9b04      	ldr	r3, [sp, #16]
 810abf0:	eba0 000a 	sub.w	r0, r0, sl
 810abf4:	2240      	movs	r2, #64	@ 0x40
 810abf6:	4082      	lsls	r2, r0
 810abf8:	4313      	orrs	r3, r2
 810abfa:	3401      	adds	r4, #1
 810abfc:	9304      	str	r3, [sp, #16]
 810abfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ac02:	4829      	ldr	r0, [pc, #164]	@ (810aca8 <_vfiprintf_r+0x220>)
 810ac04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810ac08:	2206      	movs	r2, #6
 810ac0a:	f7f5 fb69 	bl	81002e0 <memchr>
 810ac0e:	2800      	cmp	r0, #0
 810ac10:	d03f      	beq.n	810ac92 <_vfiprintf_r+0x20a>
 810ac12:	4b26      	ldr	r3, [pc, #152]	@ (810acac <_vfiprintf_r+0x224>)
 810ac14:	bb1b      	cbnz	r3, 810ac5e <_vfiprintf_r+0x1d6>
 810ac16:	9b03      	ldr	r3, [sp, #12]
 810ac18:	3307      	adds	r3, #7
 810ac1a:	f023 0307 	bic.w	r3, r3, #7
 810ac1e:	3308      	adds	r3, #8
 810ac20:	9303      	str	r3, [sp, #12]
 810ac22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ac24:	443b      	add	r3, r7
 810ac26:	9309      	str	r3, [sp, #36]	@ 0x24
 810ac28:	e76a      	b.n	810ab00 <_vfiprintf_r+0x78>
 810ac2a:	fb0c 3202 	mla	r2, ip, r2, r3
 810ac2e:	460c      	mov	r4, r1
 810ac30:	2001      	movs	r0, #1
 810ac32:	e7a8      	b.n	810ab86 <_vfiprintf_r+0xfe>
 810ac34:	2300      	movs	r3, #0
 810ac36:	3401      	adds	r4, #1
 810ac38:	9305      	str	r3, [sp, #20]
 810ac3a:	4619      	mov	r1, r3
 810ac3c:	f04f 0c0a 	mov.w	ip, #10
 810ac40:	4620      	mov	r0, r4
 810ac42:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ac46:	3a30      	subs	r2, #48	@ 0x30
 810ac48:	2a09      	cmp	r2, #9
 810ac4a:	d903      	bls.n	810ac54 <_vfiprintf_r+0x1cc>
 810ac4c:	2b00      	cmp	r3, #0
 810ac4e:	d0c6      	beq.n	810abde <_vfiprintf_r+0x156>
 810ac50:	9105      	str	r1, [sp, #20]
 810ac52:	e7c4      	b.n	810abde <_vfiprintf_r+0x156>
 810ac54:	fb0c 2101 	mla	r1, ip, r1, r2
 810ac58:	4604      	mov	r4, r0
 810ac5a:	2301      	movs	r3, #1
 810ac5c:	e7f0      	b.n	810ac40 <_vfiprintf_r+0x1b8>
 810ac5e:	ab03      	add	r3, sp, #12
 810ac60:	9300      	str	r3, [sp, #0]
 810ac62:	462a      	mov	r2, r5
 810ac64:	4b12      	ldr	r3, [pc, #72]	@ (810acb0 <_vfiprintf_r+0x228>)
 810ac66:	a904      	add	r1, sp, #16
 810ac68:	4630      	mov	r0, r6
 810ac6a:	f7fc fb7f 	bl	810736c <_printf_float>
 810ac6e:	4607      	mov	r7, r0
 810ac70:	1c78      	adds	r0, r7, #1
 810ac72:	d1d6      	bne.n	810ac22 <_vfiprintf_r+0x19a>
 810ac74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ac76:	07d9      	lsls	r1, r3, #31
 810ac78:	d405      	bmi.n	810ac86 <_vfiprintf_r+0x1fe>
 810ac7a:	89ab      	ldrh	r3, [r5, #12]
 810ac7c:	059a      	lsls	r2, r3, #22
 810ac7e:	d402      	bmi.n	810ac86 <_vfiprintf_r+0x1fe>
 810ac80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ac82:	f7fd faef 	bl	8108264 <__retarget_lock_release_recursive>
 810ac86:	89ab      	ldrh	r3, [r5, #12]
 810ac88:	065b      	lsls	r3, r3, #25
 810ac8a:	f53f af1f 	bmi.w	810aacc <_vfiprintf_r+0x44>
 810ac8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810ac90:	e71e      	b.n	810aad0 <_vfiprintf_r+0x48>
 810ac92:	ab03      	add	r3, sp, #12
 810ac94:	9300      	str	r3, [sp, #0]
 810ac96:	462a      	mov	r2, r5
 810ac98:	4b05      	ldr	r3, [pc, #20]	@ (810acb0 <_vfiprintf_r+0x228>)
 810ac9a:	a904      	add	r1, sp, #16
 810ac9c:	4630      	mov	r0, r6
 810ac9e:	f7fc fdfd 	bl	810789c <_printf_i>
 810aca2:	e7e4      	b.n	810ac6e <_vfiprintf_r+0x1e6>
 810aca4:	0810bad9 	.word	0x0810bad9
 810aca8:	0810bae3 	.word	0x0810bae3
 810acac:	0810736d 	.word	0x0810736d
 810acb0:	0810aa63 	.word	0x0810aa63
 810acb4:	0810badf 	.word	0x0810badf

0810acb8 <__sflush_r>:
 810acb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810acc0:	0716      	lsls	r6, r2, #28
 810acc2:	4605      	mov	r5, r0
 810acc4:	460c      	mov	r4, r1
 810acc6:	d454      	bmi.n	810ad72 <__sflush_r+0xba>
 810acc8:	684b      	ldr	r3, [r1, #4]
 810acca:	2b00      	cmp	r3, #0
 810accc:	dc02      	bgt.n	810acd4 <__sflush_r+0x1c>
 810acce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810acd0:	2b00      	cmp	r3, #0
 810acd2:	dd48      	ble.n	810ad66 <__sflush_r+0xae>
 810acd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810acd6:	2e00      	cmp	r6, #0
 810acd8:	d045      	beq.n	810ad66 <__sflush_r+0xae>
 810acda:	2300      	movs	r3, #0
 810acdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810ace0:	682f      	ldr	r7, [r5, #0]
 810ace2:	6a21      	ldr	r1, [r4, #32]
 810ace4:	602b      	str	r3, [r5, #0]
 810ace6:	d030      	beq.n	810ad4a <__sflush_r+0x92>
 810ace8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810acea:	89a3      	ldrh	r3, [r4, #12]
 810acec:	0759      	lsls	r1, r3, #29
 810acee:	d505      	bpl.n	810acfc <__sflush_r+0x44>
 810acf0:	6863      	ldr	r3, [r4, #4]
 810acf2:	1ad2      	subs	r2, r2, r3
 810acf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810acf6:	b10b      	cbz	r3, 810acfc <__sflush_r+0x44>
 810acf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810acfa:	1ad2      	subs	r2, r2, r3
 810acfc:	2300      	movs	r3, #0
 810acfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810ad00:	6a21      	ldr	r1, [r4, #32]
 810ad02:	4628      	mov	r0, r5
 810ad04:	47b0      	blx	r6
 810ad06:	1c43      	adds	r3, r0, #1
 810ad08:	89a3      	ldrh	r3, [r4, #12]
 810ad0a:	d106      	bne.n	810ad1a <__sflush_r+0x62>
 810ad0c:	6829      	ldr	r1, [r5, #0]
 810ad0e:	291d      	cmp	r1, #29
 810ad10:	d82b      	bhi.n	810ad6a <__sflush_r+0xb2>
 810ad12:	4a2a      	ldr	r2, [pc, #168]	@ (810adbc <__sflush_r+0x104>)
 810ad14:	40ca      	lsrs	r2, r1
 810ad16:	07d6      	lsls	r6, r2, #31
 810ad18:	d527      	bpl.n	810ad6a <__sflush_r+0xb2>
 810ad1a:	2200      	movs	r2, #0
 810ad1c:	6062      	str	r2, [r4, #4]
 810ad1e:	04d9      	lsls	r1, r3, #19
 810ad20:	6922      	ldr	r2, [r4, #16]
 810ad22:	6022      	str	r2, [r4, #0]
 810ad24:	d504      	bpl.n	810ad30 <__sflush_r+0x78>
 810ad26:	1c42      	adds	r2, r0, #1
 810ad28:	d101      	bne.n	810ad2e <__sflush_r+0x76>
 810ad2a:	682b      	ldr	r3, [r5, #0]
 810ad2c:	b903      	cbnz	r3, 810ad30 <__sflush_r+0x78>
 810ad2e:	6560      	str	r0, [r4, #84]	@ 0x54
 810ad30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810ad32:	602f      	str	r7, [r5, #0]
 810ad34:	b1b9      	cbz	r1, 810ad66 <__sflush_r+0xae>
 810ad36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810ad3a:	4299      	cmp	r1, r3
 810ad3c:	d002      	beq.n	810ad44 <__sflush_r+0x8c>
 810ad3e:	4628      	mov	r0, r5
 810ad40:	f7fe f8f2 	bl	8108f28 <_free_r>
 810ad44:	2300      	movs	r3, #0
 810ad46:	6363      	str	r3, [r4, #52]	@ 0x34
 810ad48:	e00d      	b.n	810ad66 <__sflush_r+0xae>
 810ad4a:	2301      	movs	r3, #1
 810ad4c:	4628      	mov	r0, r5
 810ad4e:	47b0      	blx	r6
 810ad50:	4602      	mov	r2, r0
 810ad52:	1c50      	adds	r0, r2, #1
 810ad54:	d1c9      	bne.n	810acea <__sflush_r+0x32>
 810ad56:	682b      	ldr	r3, [r5, #0]
 810ad58:	2b00      	cmp	r3, #0
 810ad5a:	d0c6      	beq.n	810acea <__sflush_r+0x32>
 810ad5c:	2b1d      	cmp	r3, #29
 810ad5e:	d001      	beq.n	810ad64 <__sflush_r+0xac>
 810ad60:	2b16      	cmp	r3, #22
 810ad62:	d11e      	bne.n	810ada2 <__sflush_r+0xea>
 810ad64:	602f      	str	r7, [r5, #0]
 810ad66:	2000      	movs	r0, #0
 810ad68:	e022      	b.n	810adb0 <__sflush_r+0xf8>
 810ad6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ad6e:	b21b      	sxth	r3, r3
 810ad70:	e01b      	b.n	810adaa <__sflush_r+0xf2>
 810ad72:	690f      	ldr	r7, [r1, #16]
 810ad74:	2f00      	cmp	r7, #0
 810ad76:	d0f6      	beq.n	810ad66 <__sflush_r+0xae>
 810ad78:	0793      	lsls	r3, r2, #30
 810ad7a:	680e      	ldr	r6, [r1, #0]
 810ad7c:	bf08      	it	eq
 810ad7e:	694b      	ldreq	r3, [r1, #20]
 810ad80:	600f      	str	r7, [r1, #0]
 810ad82:	bf18      	it	ne
 810ad84:	2300      	movne	r3, #0
 810ad86:	eba6 0807 	sub.w	r8, r6, r7
 810ad8a:	608b      	str	r3, [r1, #8]
 810ad8c:	f1b8 0f00 	cmp.w	r8, #0
 810ad90:	dde9      	ble.n	810ad66 <__sflush_r+0xae>
 810ad92:	6a21      	ldr	r1, [r4, #32]
 810ad94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810ad96:	4643      	mov	r3, r8
 810ad98:	463a      	mov	r2, r7
 810ad9a:	4628      	mov	r0, r5
 810ad9c:	47b0      	blx	r6
 810ad9e:	2800      	cmp	r0, #0
 810ada0:	dc08      	bgt.n	810adb4 <__sflush_r+0xfc>
 810ada2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ada6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810adaa:	81a3      	strh	r3, [r4, #12]
 810adac:	f04f 30ff 	mov.w	r0, #4294967295
 810adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810adb4:	4407      	add	r7, r0
 810adb6:	eba8 0800 	sub.w	r8, r8, r0
 810adba:	e7e7      	b.n	810ad8c <__sflush_r+0xd4>
 810adbc:	20400001 	.word	0x20400001

0810adc0 <_fflush_r>:
 810adc0:	b538      	push	{r3, r4, r5, lr}
 810adc2:	690b      	ldr	r3, [r1, #16]
 810adc4:	4605      	mov	r5, r0
 810adc6:	460c      	mov	r4, r1
 810adc8:	b913      	cbnz	r3, 810add0 <_fflush_r+0x10>
 810adca:	2500      	movs	r5, #0
 810adcc:	4628      	mov	r0, r5
 810adce:	bd38      	pop	{r3, r4, r5, pc}
 810add0:	b118      	cbz	r0, 810adda <_fflush_r+0x1a>
 810add2:	6a03      	ldr	r3, [r0, #32]
 810add4:	b90b      	cbnz	r3, 810adda <_fflush_r+0x1a>
 810add6:	f7fd f919 	bl	810800c <__sinit>
 810adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810adde:	2b00      	cmp	r3, #0
 810ade0:	d0f3      	beq.n	810adca <_fflush_r+0xa>
 810ade2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810ade4:	07d0      	lsls	r0, r2, #31
 810ade6:	d404      	bmi.n	810adf2 <_fflush_r+0x32>
 810ade8:	0599      	lsls	r1, r3, #22
 810adea:	d402      	bmi.n	810adf2 <_fflush_r+0x32>
 810adec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810adee:	f7fd fa38 	bl	8108262 <__retarget_lock_acquire_recursive>
 810adf2:	4628      	mov	r0, r5
 810adf4:	4621      	mov	r1, r4
 810adf6:	f7ff ff5f 	bl	810acb8 <__sflush_r>
 810adfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810adfc:	07da      	lsls	r2, r3, #31
 810adfe:	4605      	mov	r5, r0
 810ae00:	d4e4      	bmi.n	810adcc <_fflush_r+0xc>
 810ae02:	89a3      	ldrh	r3, [r4, #12]
 810ae04:	059b      	lsls	r3, r3, #22
 810ae06:	d4e1      	bmi.n	810adcc <_fflush_r+0xc>
 810ae08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ae0a:	f7fd fa2b 	bl	8108264 <__retarget_lock_release_recursive>
 810ae0e:	e7dd      	b.n	810adcc <_fflush_r+0xc>

0810ae10 <__swbuf_r>:
 810ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ae12:	460e      	mov	r6, r1
 810ae14:	4614      	mov	r4, r2
 810ae16:	4605      	mov	r5, r0
 810ae18:	b118      	cbz	r0, 810ae22 <__swbuf_r+0x12>
 810ae1a:	6a03      	ldr	r3, [r0, #32]
 810ae1c:	b90b      	cbnz	r3, 810ae22 <__swbuf_r+0x12>
 810ae1e:	f7fd f8f5 	bl	810800c <__sinit>
 810ae22:	69a3      	ldr	r3, [r4, #24]
 810ae24:	60a3      	str	r3, [r4, #8]
 810ae26:	89a3      	ldrh	r3, [r4, #12]
 810ae28:	071a      	lsls	r2, r3, #28
 810ae2a:	d501      	bpl.n	810ae30 <__swbuf_r+0x20>
 810ae2c:	6923      	ldr	r3, [r4, #16]
 810ae2e:	b943      	cbnz	r3, 810ae42 <__swbuf_r+0x32>
 810ae30:	4621      	mov	r1, r4
 810ae32:	4628      	mov	r0, r5
 810ae34:	f000 f82a 	bl	810ae8c <__swsetup_r>
 810ae38:	b118      	cbz	r0, 810ae42 <__swbuf_r+0x32>
 810ae3a:	f04f 37ff 	mov.w	r7, #4294967295
 810ae3e:	4638      	mov	r0, r7
 810ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ae42:	6823      	ldr	r3, [r4, #0]
 810ae44:	6922      	ldr	r2, [r4, #16]
 810ae46:	1a98      	subs	r0, r3, r2
 810ae48:	6963      	ldr	r3, [r4, #20]
 810ae4a:	b2f6      	uxtb	r6, r6
 810ae4c:	4283      	cmp	r3, r0
 810ae4e:	4637      	mov	r7, r6
 810ae50:	dc05      	bgt.n	810ae5e <__swbuf_r+0x4e>
 810ae52:	4621      	mov	r1, r4
 810ae54:	4628      	mov	r0, r5
 810ae56:	f7ff ffb3 	bl	810adc0 <_fflush_r>
 810ae5a:	2800      	cmp	r0, #0
 810ae5c:	d1ed      	bne.n	810ae3a <__swbuf_r+0x2a>
 810ae5e:	68a3      	ldr	r3, [r4, #8]
 810ae60:	3b01      	subs	r3, #1
 810ae62:	60a3      	str	r3, [r4, #8]
 810ae64:	6823      	ldr	r3, [r4, #0]
 810ae66:	1c5a      	adds	r2, r3, #1
 810ae68:	6022      	str	r2, [r4, #0]
 810ae6a:	701e      	strb	r6, [r3, #0]
 810ae6c:	6962      	ldr	r2, [r4, #20]
 810ae6e:	1c43      	adds	r3, r0, #1
 810ae70:	429a      	cmp	r2, r3
 810ae72:	d004      	beq.n	810ae7e <__swbuf_r+0x6e>
 810ae74:	89a3      	ldrh	r3, [r4, #12]
 810ae76:	07db      	lsls	r3, r3, #31
 810ae78:	d5e1      	bpl.n	810ae3e <__swbuf_r+0x2e>
 810ae7a:	2e0a      	cmp	r6, #10
 810ae7c:	d1df      	bne.n	810ae3e <__swbuf_r+0x2e>
 810ae7e:	4621      	mov	r1, r4
 810ae80:	4628      	mov	r0, r5
 810ae82:	f7ff ff9d 	bl	810adc0 <_fflush_r>
 810ae86:	2800      	cmp	r0, #0
 810ae88:	d0d9      	beq.n	810ae3e <__swbuf_r+0x2e>
 810ae8a:	e7d6      	b.n	810ae3a <__swbuf_r+0x2a>

0810ae8c <__swsetup_r>:
 810ae8c:	b538      	push	{r3, r4, r5, lr}
 810ae8e:	4b29      	ldr	r3, [pc, #164]	@ (810af34 <__swsetup_r+0xa8>)
 810ae90:	4605      	mov	r5, r0
 810ae92:	6818      	ldr	r0, [r3, #0]
 810ae94:	460c      	mov	r4, r1
 810ae96:	b118      	cbz	r0, 810aea0 <__swsetup_r+0x14>
 810ae98:	6a03      	ldr	r3, [r0, #32]
 810ae9a:	b90b      	cbnz	r3, 810aea0 <__swsetup_r+0x14>
 810ae9c:	f7fd f8b6 	bl	810800c <__sinit>
 810aea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aea4:	0719      	lsls	r1, r3, #28
 810aea6:	d422      	bmi.n	810aeee <__swsetup_r+0x62>
 810aea8:	06da      	lsls	r2, r3, #27
 810aeaa:	d407      	bmi.n	810aebc <__swsetup_r+0x30>
 810aeac:	2209      	movs	r2, #9
 810aeae:	602a      	str	r2, [r5, #0]
 810aeb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810aeb4:	81a3      	strh	r3, [r4, #12]
 810aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 810aeba:	e033      	b.n	810af24 <__swsetup_r+0x98>
 810aebc:	0758      	lsls	r0, r3, #29
 810aebe:	d512      	bpl.n	810aee6 <__swsetup_r+0x5a>
 810aec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810aec2:	b141      	cbz	r1, 810aed6 <__swsetup_r+0x4a>
 810aec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810aec8:	4299      	cmp	r1, r3
 810aeca:	d002      	beq.n	810aed2 <__swsetup_r+0x46>
 810aecc:	4628      	mov	r0, r5
 810aece:	f7fe f82b 	bl	8108f28 <_free_r>
 810aed2:	2300      	movs	r3, #0
 810aed4:	6363      	str	r3, [r4, #52]	@ 0x34
 810aed6:	89a3      	ldrh	r3, [r4, #12]
 810aed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810aedc:	81a3      	strh	r3, [r4, #12]
 810aede:	2300      	movs	r3, #0
 810aee0:	6063      	str	r3, [r4, #4]
 810aee2:	6923      	ldr	r3, [r4, #16]
 810aee4:	6023      	str	r3, [r4, #0]
 810aee6:	89a3      	ldrh	r3, [r4, #12]
 810aee8:	f043 0308 	orr.w	r3, r3, #8
 810aeec:	81a3      	strh	r3, [r4, #12]
 810aeee:	6923      	ldr	r3, [r4, #16]
 810aef0:	b94b      	cbnz	r3, 810af06 <__swsetup_r+0x7a>
 810aef2:	89a3      	ldrh	r3, [r4, #12]
 810aef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810aef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810aefc:	d003      	beq.n	810af06 <__swsetup_r+0x7a>
 810aefe:	4621      	mov	r1, r4
 810af00:	4628      	mov	r0, r5
 810af02:	f000 fc5d 	bl	810b7c0 <__smakebuf_r>
 810af06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810af0a:	f013 0201 	ands.w	r2, r3, #1
 810af0e:	d00a      	beq.n	810af26 <__swsetup_r+0x9a>
 810af10:	2200      	movs	r2, #0
 810af12:	60a2      	str	r2, [r4, #8]
 810af14:	6962      	ldr	r2, [r4, #20]
 810af16:	4252      	negs	r2, r2
 810af18:	61a2      	str	r2, [r4, #24]
 810af1a:	6922      	ldr	r2, [r4, #16]
 810af1c:	b942      	cbnz	r2, 810af30 <__swsetup_r+0xa4>
 810af1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810af22:	d1c5      	bne.n	810aeb0 <__swsetup_r+0x24>
 810af24:	bd38      	pop	{r3, r4, r5, pc}
 810af26:	0799      	lsls	r1, r3, #30
 810af28:	bf58      	it	pl
 810af2a:	6962      	ldrpl	r2, [r4, #20]
 810af2c:	60a2      	str	r2, [r4, #8]
 810af2e:	e7f4      	b.n	810af1a <__swsetup_r+0x8e>
 810af30:	2000      	movs	r0, #0
 810af32:	e7f7      	b.n	810af24 <__swsetup_r+0x98>
 810af34:	1000001c 	.word	0x1000001c

0810af38 <memmove>:
 810af38:	4288      	cmp	r0, r1
 810af3a:	b510      	push	{r4, lr}
 810af3c:	eb01 0402 	add.w	r4, r1, r2
 810af40:	d902      	bls.n	810af48 <memmove+0x10>
 810af42:	4284      	cmp	r4, r0
 810af44:	4623      	mov	r3, r4
 810af46:	d807      	bhi.n	810af58 <memmove+0x20>
 810af48:	1e43      	subs	r3, r0, #1
 810af4a:	42a1      	cmp	r1, r4
 810af4c:	d008      	beq.n	810af60 <memmove+0x28>
 810af4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810af52:	f803 2f01 	strb.w	r2, [r3, #1]!
 810af56:	e7f8      	b.n	810af4a <memmove+0x12>
 810af58:	4402      	add	r2, r0
 810af5a:	4601      	mov	r1, r0
 810af5c:	428a      	cmp	r2, r1
 810af5e:	d100      	bne.n	810af62 <memmove+0x2a>
 810af60:	bd10      	pop	{r4, pc}
 810af62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810af66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810af6a:	e7f7      	b.n	810af5c <memmove+0x24>

0810af6c <strncmp>:
 810af6c:	b510      	push	{r4, lr}
 810af6e:	b16a      	cbz	r2, 810af8c <strncmp+0x20>
 810af70:	3901      	subs	r1, #1
 810af72:	1884      	adds	r4, r0, r2
 810af74:	f810 2b01 	ldrb.w	r2, [r0], #1
 810af78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810af7c:	429a      	cmp	r2, r3
 810af7e:	d103      	bne.n	810af88 <strncmp+0x1c>
 810af80:	42a0      	cmp	r0, r4
 810af82:	d001      	beq.n	810af88 <strncmp+0x1c>
 810af84:	2a00      	cmp	r2, #0
 810af86:	d1f5      	bne.n	810af74 <strncmp+0x8>
 810af88:	1ad0      	subs	r0, r2, r3
 810af8a:	bd10      	pop	{r4, pc}
 810af8c:	4610      	mov	r0, r2
 810af8e:	e7fc      	b.n	810af8a <strncmp+0x1e>

0810af90 <_sbrk_r>:
 810af90:	b538      	push	{r3, r4, r5, lr}
 810af92:	4d06      	ldr	r5, [pc, #24]	@ (810afac <_sbrk_r+0x1c>)
 810af94:	2300      	movs	r3, #0
 810af96:	4604      	mov	r4, r0
 810af98:	4608      	mov	r0, r1
 810af9a:	602b      	str	r3, [r5, #0]
 810af9c:	f7f6 fed4 	bl	8101d48 <_sbrk>
 810afa0:	1c43      	adds	r3, r0, #1
 810afa2:	d102      	bne.n	810afaa <_sbrk_r+0x1a>
 810afa4:	682b      	ldr	r3, [r5, #0]
 810afa6:	b103      	cbz	r3, 810afaa <_sbrk_r+0x1a>
 810afa8:	6023      	str	r3, [r4, #0]
 810afaa:	bd38      	pop	{r3, r4, r5, pc}
 810afac:	100004ec 	.word	0x100004ec

0810afb0 <memcpy>:
 810afb0:	440a      	add	r2, r1
 810afb2:	4291      	cmp	r1, r2
 810afb4:	f100 33ff 	add.w	r3, r0, #4294967295
 810afb8:	d100      	bne.n	810afbc <memcpy+0xc>
 810afba:	4770      	bx	lr
 810afbc:	b510      	push	{r4, lr}
 810afbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 810afc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 810afc6:	4291      	cmp	r1, r2
 810afc8:	d1f9      	bne.n	810afbe <memcpy+0xe>
 810afca:	bd10      	pop	{r4, pc}
 810afcc:	0000      	movs	r0, r0
	...

0810afd0 <nan>:
 810afd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810afd8 <nan+0x8>
 810afd4:	4770      	bx	lr
 810afd6:	bf00      	nop
 810afd8:	00000000 	.word	0x00000000
 810afdc:	7ff80000 	.word	0x7ff80000

0810afe0 <__assert_func>:
 810afe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810afe2:	4614      	mov	r4, r2
 810afe4:	461a      	mov	r2, r3
 810afe6:	4b09      	ldr	r3, [pc, #36]	@ (810b00c <__assert_func+0x2c>)
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	4605      	mov	r5, r0
 810afec:	68d8      	ldr	r0, [r3, #12]
 810afee:	b14c      	cbz	r4, 810b004 <__assert_func+0x24>
 810aff0:	4b07      	ldr	r3, [pc, #28]	@ (810b010 <__assert_func+0x30>)
 810aff2:	9100      	str	r1, [sp, #0]
 810aff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810aff8:	4906      	ldr	r1, [pc, #24]	@ (810b014 <__assert_func+0x34>)
 810affa:	462b      	mov	r3, r5
 810affc:	f000 fba8 	bl	810b750 <fiprintf>
 810b000:	f000 fc3c 	bl	810b87c <abort>
 810b004:	4b04      	ldr	r3, [pc, #16]	@ (810b018 <__assert_func+0x38>)
 810b006:	461c      	mov	r4, r3
 810b008:	e7f3      	b.n	810aff2 <__assert_func+0x12>
 810b00a:	bf00      	nop
 810b00c:	1000001c 	.word	0x1000001c
 810b010:	0810baf2 	.word	0x0810baf2
 810b014:	0810baff 	.word	0x0810baff
 810b018:	0810bb2d 	.word	0x0810bb2d

0810b01c <_calloc_r>:
 810b01c:	b570      	push	{r4, r5, r6, lr}
 810b01e:	fba1 5402 	umull	r5, r4, r1, r2
 810b022:	b934      	cbnz	r4, 810b032 <_calloc_r+0x16>
 810b024:	4629      	mov	r1, r5
 810b026:	f7fd fff3 	bl	8109010 <_malloc_r>
 810b02a:	4606      	mov	r6, r0
 810b02c:	b928      	cbnz	r0, 810b03a <_calloc_r+0x1e>
 810b02e:	4630      	mov	r0, r6
 810b030:	bd70      	pop	{r4, r5, r6, pc}
 810b032:	220c      	movs	r2, #12
 810b034:	6002      	str	r2, [r0, #0]
 810b036:	2600      	movs	r6, #0
 810b038:	e7f9      	b.n	810b02e <_calloc_r+0x12>
 810b03a:	462a      	mov	r2, r5
 810b03c:	4621      	mov	r1, r4
 810b03e:	f7fd f892 	bl	8108166 <memset>
 810b042:	e7f4      	b.n	810b02e <_calloc_r+0x12>

0810b044 <rshift>:
 810b044:	6903      	ldr	r3, [r0, #16]
 810b046:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b04a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b04e:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b052:	f100 0414 	add.w	r4, r0, #20
 810b056:	dd45      	ble.n	810b0e4 <rshift+0xa0>
 810b058:	f011 011f 	ands.w	r1, r1, #31
 810b05c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b060:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b064:	d10c      	bne.n	810b080 <rshift+0x3c>
 810b066:	f100 0710 	add.w	r7, r0, #16
 810b06a:	4629      	mov	r1, r5
 810b06c:	42b1      	cmp	r1, r6
 810b06e:	d334      	bcc.n	810b0da <rshift+0x96>
 810b070:	1a9b      	subs	r3, r3, r2
 810b072:	009b      	lsls	r3, r3, #2
 810b074:	1eea      	subs	r2, r5, #3
 810b076:	4296      	cmp	r6, r2
 810b078:	bf38      	it	cc
 810b07a:	2300      	movcc	r3, #0
 810b07c:	4423      	add	r3, r4
 810b07e:	e015      	b.n	810b0ac <rshift+0x68>
 810b080:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810b084:	f1c1 0820 	rsb	r8, r1, #32
 810b088:	40cf      	lsrs	r7, r1
 810b08a:	f105 0e04 	add.w	lr, r5, #4
 810b08e:	46a1      	mov	r9, r4
 810b090:	4576      	cmp	r6, lr
 810b092:	46f4      	mov	ip, lr
 810b094:	d815      	bhi.n	810b0c2 <rshift+0x7e>
 810b096:	1a9a      	subs	r2, r3, r2
 810b098:	0092      	lsls	r2, r2, #2
 810b09a:	3a04      	subs	r2, #4
 810b09c:	3501      	adds	r5, #1
 810b09e:	42ae      	cmp	r6, r5
 810b0a0:	bf38      	it	cc
 810b0a2:	2200      	movcc	r2, #0
 810b0a4:	18a3      	adds	r3, r4, r2
 810b0a6:	50a7      	str	r7, [r4, r2]
 810b0a8:	b107      	cbz	r7, 810b0ac <rshift+0x68>
 810b0aa:	3304      	adds	r3, #4
 810b0ac:	1b1a      	subs	r2, r3, r4
 810b0ae:	42a3      	cmp	r3, r4
 810b0b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810b0b4:	bf08      	it	eq
 810b0b6:	2300      	moveq	r3, #0
 810b0b8:	6102      	str	r2, [r0, #16]
 810b0ba:	bf08      	it	eq
 810b0bc:	6143      	streq	r3, [r0, #20]
 810b0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b0c2:	f8dc c000 	ldr.w	ip, [ip]
 810b0c6:	fa0c fc08 	lsl.w	ip, ip, r8
 810b0ca:	ea4c 0707 	orr.w	r7, ip, r7
 810b0ce:	f849 7b04 	str.w	r7, [r9], #4
 810b0d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 810b0d6:	40cf      	lsrs	r7, r1
 810b0d8:	e7da      	b.n	810b090 <rshift+0x4c>
 810b0da:	f851 cb04 	ldr.w	ip, [r1], #4
 810b0de:	f847 cf04 	str.w	ip, [r7, #4]!
 810b0e2:	e7c3      	b.n	810b06c <rshift+0x28>
 810b0e4:	4623      	mov	r3, r4
 810b0e6:	e7e1      	b.n	810b0ac <rshift+0x68>

0810b0e8 <__hexdig_fun>:
 810b0e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810b0ec:	2b09      	cmp	r3, #9
 810b0ee:	d802      	bhi.n	810b0f6 <__hexdig_fun+0xe>
 810b0f0:	3820      	subs	r0, #32
 810b0f2:	b2c0      	uxtb	r0, r0
 810b0f4:	4770      	bx	lr
 810b0f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810b0fa:	2b05      	cmp	r3, #5
 810b0fc:	d801      	bhi.n	810b102 <__hexdig_fun+0x1a>
 810b0fe:	3847      	subs	r0, #71	@ 0x47
 810b100:	e7f7      	b.n	810b0f2 <__hexdig_fun+0xa>
 810b102:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810b106:	2b05      	cmp	r3, #5
 810b108:	d801      	bhi.n	810b10e <__hexdig_fun+0x26>
 810b10a:	3827      	subs	r0, #39	@ 0x27
 810b10c:	e7f1      	b.n	810b0f2 <__hexdig_fun+0xa>
 810b10e:	2000      	movs	r0, #0
 810b110:	4770      	bx	lr
	...

0810b114 <__gethex>:
 810b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b118:	b085      	sub	sp, #20
 810b11a:	468a      	mov	sl, r1
 810b11c:	9302      	str	r3, [sp, #8]
 810b11e:	680b      	ldr	r3, [r1, #0]
 810b120:	9001      	str	r0, [sp, #4]
 810b122:	4690      	mov	r8, r2
 810b124:	1c9c      	adds	r4, r3, #2
 810b126:	46a1      	mov	r9, r4
 810b128:	f814 0b01 	ldrb.w	r0, [r4], #1
 810b12c:	2830      	cmp	r0, #48	@ 0x30
 810b12e:	d0fa      	beq.n	810b126 <__gethex+0x12>
 810b130:	eba9 0303 	sub.w	r3, r9, r3
 810b134:	f1a3 0b02 	sub.w	fp, r3, #2
 810b138:	f7ff ffd6 	bl	810b0e8 <__hexdig_fun>
 810b13c:	4605      	mov	r5, r0
 810b13e:	2800      	cmp	r0, #0
 810b140:	d168      	bne.n	810b214 <__gethex+0x100>
 810b142:	49a0      	ldr	r1, [pc, #640]	@ (810b3c4 <__gethex+0x2b0>)
 810b144:	2201      	movs	r2, #1
 810b146:	4648      	mov	r0, r9
 810b148:	f7ff ff10 	bl	810af6c <strncmp>
 810b14c:	4607      	mov	r7, r0
 810b14e:	2800      	cmp	r0, #0
 810b150:	d167      	bne.n	810b222 <__gethex+0x10e>
 810b152:	f899 0001 	ldrb.w	r0, [r9, #1]
 810b156:	4626      	mov	r6, r4
 810b158:	f7ff ffc6 	bl	810b0e8 <__hexdig_fun>
 810b15c:	2800      	cmp	r0, #0
 810b15e:	d062      	beq.n	810b226 <__gethex+0x112>
 810b160:	4623      	mov	r3, r4
 810b162:	7818      	ldrb	r0, [r3, #0]
 810b164:	2830      	cmp	r0, #48	@ 0x30
 810b166:	4699      	mov	r9, r3
 810b168:	f103 0301 	add.w	r3, r3, #1
 810b16c:	d0f9      	beq.n	810b162 <__gethex+0x4e>
 810b16e:	f7ff ffbb 	bl	810b0e8 <__hexdig_fun>
 810b172:	fab0 f580 	clz	r5, r0
 810b176:	096d      	lsrs	r5, r5, #5
 810b178:	f04f 0b01 	mov.w	fp, #1
 810b17c:	464a      	mov	r2, r9
 810b17e:	4616      	mov	r6, r2
 810b180:	3201      	adds	r2, #1
 810b182:	7830      	ldrb	r0, [r6, #0]
 810b184:	f7ff ffb0 	bl	810b0e8 <__hexdig_fun>
 810b188:	2800      	cmp	r0, #0
 810b18a:	d1f8      	bne.n	810b17e <__gethex+0x6a>
 810b18c:	498d      	ldr	r1, [pc, #564]	@ (810b3c4 <__gethex+0x2b0>)
 810b18e:	2201      	movs	r2, #1
 810b190:	4630      	mov	r0, r6
 810b192:	f7ff feeb 	bl	810af6c <strncmp>
 810b196:	2800      	cmp	r0, #0
 810b198:	d13f      	bne.n	810b21a <__gethex+0x106>
 810b19a:	b944      	cbnz	r4, 810b1ae <__gethex+0x9a>
 810b19c:	1c74      	adds	r4, r6, #1
 810b19e:	4622      	mov	r2, r4
 810b1a0:	4616      	mov	r6, r2
 810b1a2:	3201      	adds	r2, #1
 810b1a4:	7830      	ldrb	r0, [r6, #0]
 810b1a6:	f7ff ff9f 	bl	810b0e8 <__hexdig_fun>
 810b1aa:	2800      	cmp	r0, #0
 810b1ac:	d1f8      	bne.n	810b1a0 <__gethex+0x8c>
 810b1ae:	1ba4      	subs	r4, r4, r6
 810b1b0:	00a7      	lsls	r7, r4, #2
 810b1b2:	7833      	ldrb	r3, [r6, #0]
 810b1b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810b1b8:	2b50      	cmp	r3, #80	@ 0x50
 810b1ba:	d13e      	bne.n	810b23a <__gethex+0x126>
 810b1bc:	7873      	ldrb	r3, [r6, #1]
 810b1be:	2b2b      	cmp	r3, #43	@ 0x2b
 810b1c0:	d033      	beq.n	810b22a <__gethex+0x116>
 810b1c2:	2b2d      	cmp	r3, #45	@ 0x2d
 810b1c4:	d034      	beq.n	810b230 <__gethex+0x11c>
 810b1c6:	1c71      	adds	r1, r6, #1
 810b1c8:	2400      	movs	r4, #0
 810b1ca:	7808      	ldrb	r0, [r1, #0]
 810b1cc:	f7ff ff8c 	bl	810b0e8 <__hexdig_fun>
 810b1d0:	1e43      	subs	r3, r0, #1
 810b1d2:	b2db      	uxtb	r3, r3
 810b1d4:	2b18      	cmp	r3, #24
 810b1d6:	d830      	bhi.n	810b23a <__gethex+0x126>
 810b1d8:	f1a0 0210 	sub.w	r2, r0, #16
 810b1dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810b1e0:	f7ff ff82 	bl	810b0e8 <__hexdig_fun>
 810b1e4:	f100 3cff 	add.w	ip, r0, #4294967295
 810b1e8:	fa5f fc8c 	uxtb.w	ip, ip
 810b1ec:	f1bc 0f18 	cmp.w	ip, #24
 810b1f0:	f04f 030a 	mov.w	r3, #10
 810b1f4:	d91e      	bls.n	810b234 <__gethex+0x120>
 810b1f6:	b104      	cbz	r4, 810b1fa <__gethex+0xe6>
 810b1f8:	4252      	negs	r2, r2
 810b1fa:	4417      	add	r7, r2
 810b1fc:	f8ca 1000 	str.w	r1, [sl]
 810b200:	b1ed      	cbz	r5, 810b23e <__gethex+0x12a>
 810b202:	f1bb 0f00 	cmp.w	fp, #0
 810b206:	bf0c      	ite	eq
 810b208:	2506      	moveq	r5, #6
 810b20a:	2500      	movne	r5, #0
 810b20c:	4628      	mov	r0, r5
 810b20e:	b005      	add	sp, #20
 810b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b214:	2500      	movs	r5, #0
 810b216:	462c      	mov	r4, r5
 810b218:	e7b0      	b.n	810b17c <__gethex+0x68>
 810b21a:	2c00      	cmp	r4, #0
 810b21c:	d1c7      	bne.n	810b1ae <__gethex+0x9a>
 810b21e:	4627      	mov	r7, r4
 810b220:	e7c7      	b.n	810b1b2 <__gethex+0x9e>
 810b222:	464e      	mov	r6, r9
 810b224:	462f      	mov	r7, r5
 810b226:	2501      	movs	r5, #1
 810b228:	e7c3      	b.n	810b1b2 <__gethex+0x9e>
 810b22a:	2400      	movs	r4, #0
 810b22c:	1cb1      	adds	r1, r6, #2
 810b22e:	e7cc      	b.n	810b1ca <__gethex+0xb6>
 810b230:	2401      	movs	r4, #1
 810b232:	e7fb      	b.n	810b22c <__gethex+0x118>
 810b234:	fb03 0002 	mla	r0, r3, r2, r0
 810b238:	e7ce      	b.n	810b1d8 <__gethex+0xc4>
 810b23a:	4631      	mov	r1, r6
 810b23c:	e7de      	b.n	810b1fc <__gethex+0xe8>
 810b23e:	eba6 0309 	sub.w	r3, r6, r9
 810b242:	3b01      	subs	r3, #1
 810b244:	4629      	mov	r1, r5
 810b246:	2b07      	cmp	r3, #7
 810b248:	dc0a      	bgt.n	810b260 <__gethex+0x14c>
 810b24a:	9801      	ldr	r0, [sp, #4]
 810b24c:	f7fd ff6c 	bl	8109128 <_Balloc>
 810b250:	4604      	mov	r4, r0
 810b252:	b940      	cbnz	r0, 810b266 <__gethex+0x152>
 810b254:	4b5c      	ldr	r3, [pc, #368]	@ (810b3c8 <__gethex+0x2b4>)
 810b256:	4602      	mov	r2, r0
 810b258:	21e4      	movs	r1, #228	@ 0xe4
 810b25a:	485c      	ldr	r0, [pc, #368]	@ (810b3cc <__gethex+0x2b8>)
 810b25c:	f7ff fec0 	bl	810afe0 <__assert_func>
 810b260:	3101      	adds	r1, #1
 810b262:	105b      	asrs	r3, r3, #1
 810b264:	e7ef      	b.n	810b246 <__gethex+0x132>
 810b266:	f100 0a14 	add.w	sl, r0, #20
 810b26a:	2300      	movs	r3, #0
 810b26c:	4655      	mov	r5, sl
 810b26e:	469b      	mov	fp, r3
 810b270:	45b1      	cmp	r9, r6
 810b272:	d337      	bcc.n	810b2e4 <__gethex+0x1d0>
 810b274:	f845 bb04 	str.w	fp, [r5], #4
 810b278:	eba5 050a 	sub.w	r5, r5, sl
 810b27c:	10ad      	asrs	r5, r5, #2
 810b27e:	6125      	str	r5, [r4, #16]
 810b280:	4658      	mov	r0, fp
 810b282:	f7fe f843 	bl	810930c <__hi0bits>
 810b286:	016d      	lsls	r5, r5, #5
 810b288:	f8d8 6000 	ldr.w	r6, [r8]
 810b28c:	1a2d      	subs	r5, r5, r0
 810b28e:	42b5      	cmp	r5, r6
 810b290:	dd54      	ble.n	810b33c <__gethex+0x228>
 810b292:	1bad      	subs	r5, r5, r6
 810b294:	4629      	mov	r1, r5
 810b296:	4620      	mov	r0, r4
 810b298:	f7fe fbcf 	bl	8109a3a <__any_on>
 810b29c:	4681      	mov	r9, r0
 810b29e:	b178      	cbz	r0, 810b2c0 <__gethex+0x1ac>
 810b2a0:	1e6b      	subs	r3, r5, #1
 810b2a2:	1159      	asrs	r1, r3, #5
 810b2a4:	f003 021f 	and.w	r2, r3, #31
 810b2a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810b2ac:	f04f 0901 	mov.w	r9, #1
 810b2b0:	fa09 f202 	lsl.w	r2, r9, r2
 810b2b4:	420a      	tst	r2, r1
 810b2b6:	d003      	beq.n	810b2c0 <__gethex+0x1ac>
 810b2b8:	454b      	cmp	r3, r9
 810b2ba:	dc36      	bgt.n	810b32a <__gethex+0x216>
 810b2bc:	f04f 0902 	mov.w	r9, #2
 810b2c0:	4629      	mov	r1, r5
 810b2c2:	4620      	mov	r0, r4
 810b2c4:	f7ff febe 	bl	810b044 <rshift>
 810b2c8:	442f      	add	r7, r5
 810b2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b2ce:	42bb      	cmp	r3, r7
 810b2d0:	da42      	bge.n	810b358 <__gethex+0x244>
 810b2d2:	9801      	ldr	r0, [sp, #4]
 810b2d4:	4621      	mov	r1, r4
 810b2d6:	f7fd ff67 	bl	81091a8 <_Bfree>
 810b2da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b2dc:	2300      	movs	r3, #0
 810b2de:	6013      	str	r3, [r2, #0]
 810b2e0:	25a3      	movs	r5, #163	@ 0xa3
 810b2e2:	e793      	b.n	810b20c <__gethex+0xf8>
 810b2e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810b2e8:	2a2e      	cmp	r2, #46	@ 0x2e
 810b2ea:	d012      	beq.n	810b312 <__gethex+0x1fe>
 810b2ec:	2b20      	cmp	r3, #32
 810b2ee:	d104      	bne.n	810b2fa <__gethex+0x1e6>
 810b2f0:	f845 bb04 	str.w	fp, [r5], #4
 810b2f4:	f04f 0b00 	mov.w	fp, #0
 810b2f8:	465b      	mov	r3, fp
 810b2fa:	7830      	ldrb	r0, [r6, #0]
 810b2fc:	9303      	str	r3, [sp, #12]
 810b2fe:	f7ff fef3 	bl	810b0e8 <__hexdig_fun>
 810b302:	9b03      	ldr	r3, [sp, #12]
 810b304:	f000 000f 	and.w	r0, r0, #15
 810b308:	4098      	lsls	r0, r3
 810b30a:	ea4b 0b00 	orr.w	fp, fp, r0
 810b30e:	3304      	adds	r3, #4
 810b310:	e7ae      	b.n	810b270 <__gethex+0x15c>
 810b312:	45b1      	cmp	r9, r6
 810b314:	d8ea      	bhi.n	810b2ec <__gethex+0x1d8>
 810b316:	492b      	ldr	r1, [pc, #172]	@ (810b3c4 <__gethex+0x2b0>)
 810b318:	9303      	str	r3, [sp, #12]
 810b31a:	2201      	movs	r2, #1
 810b31c:	4630      	mov	r0, r6
 810b31e:	f7ff fe25 	bl	810af6c <strncmp>
 810b322:	9b03      	ldr	r3, [sp, #12]
 810b324:	2800      	cmp	r0, #0
 810b326:	d1e1      	bne.n	810b2ec <__gethex+0x1d8>
 810b328:	e7a2      	b.n	810b270 <__gethex+0x15c>
 810b32a:	1ea9      	subs	r1, r5, #2
 810b32c:	4620      	mov	r0, r4
 810b32e:	f7fe fb84 	bl	8109a3a <__any_on>
 810b332:	2800      	cmp	r0, #0
 810b334:	d0c2      	beq.n	810b2bc <__gethex+0x1a8>
 810b336:	f04f 0903 	mov.w	r9, #3
 810b33a:	e7c1      	b.n	810b2c0 <__gethex+0x1ac>
 810b33c:	da09      	bge.n	810b352 <__gethex+0x23e>
 810b33e:	1b75      	subs	r5, r6, r5
 810b340:	4621      	mov	r1, r4
 810b342:	9801      	ldr	r0, [sp, #4]
 810b344:	462a      	mov	r2, r5
 810b346:	f7fe f93f 	bl	81095c8 <__lshift>
 810b34a:	1b7f      	subs	r7, r7, r5
 810b34c:	4604      	mov	r4, r0
 810b34e:	f100 0a14 	add.w	sl, r0, #20
 810b352:	f04f 0900 	mov.w	r9, #0
 810b356:	e7b8      	b.n	810b2ca <__gethex+0x1b6>
 810b358:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810b35c:	42bd      	cmp	r5, r7
 810b35e:	dd6f      	ble.n	810b440 <__gethex+0x32c>
 810b360:	1bed      	subs	r5, r5, r7
 810b362:	42ae      	cmp	r6, r5
 810b364:	dc34      	bgt.n	810b3d0 <__gethex+0x2bc>
 810b366:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b36a:	2b02      	cmp	r3, #2
 810b36c:	d022      	beq.n	810b3b4 <__gethex+0x2a0>
 810b36e:	2b03      	cmp	r3, #3
 810b370:	d024      	beq.n	810b3bc <__gethex+0x2a8>
 810b372:	2b01      	cmp	r3, #1
 810b374:	d115      	bne.n	810b3a2 <__gethex+0x28e>
 810b376:	42ae      	cmp	r6, r5
 810b378:	d113      	bne.n	810b3a2 <__gethex+0x28e>
 810b37a:	2e01      	cmp	r6, #1
 810b37c:	d10b      	bne.n	810b396 <__gethex+0x282>
 810b37e:	9a02      	ldr	r2, [sp, #8]
 810b380:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810b384:	6013      	str	r3, [r2, #0]
 810b386:	2301      	movs	r3, #1
 810b388:	6123      	str	r3, [r4, #16]
 810b38a:	f8ca 3000 	str.w	r3, [sl]
 810b38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b390:	2562      	movs	r5, #98	@ 0x62
 810b392:	601c      	str	r4, [r3, #0]
 810b394:	e73a      	b.n	810b20c <__gethex+0xf8>
 810b396:	1e71      	subs	r1, r6, #1
 810b398:	4620      	mov	r0, r4
 810b39a:	f7fe fb4e 	bl	8109a3a <__any_on>
 810b39e:	2800      	cmp	r0, #0
 810b3a0:	d1ed      	bne.n	810b37e <__gethex+0x26a>
 810b3a2:	9801      	ldr	r0, [sp, #4]
 810b3a4:	4621      	mov	r1, r4
 810b3a6:	f7fd feff 	bl	81091a8 <_Bfree>
 810b3aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b3ac:	2300      	movs	r3, #0
 810b3ae:	6013      	str	r3, [r2, #0]
 810b3b0:	2550      	movs	r5, #80	@ 0x50
 810b3b2:	e72b      	b.n	810b20c <__gethex+0xf8>
 810b3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b3b6:	2b00      	cmp	r3, #0
 810b3b8:	d1f3      	bne.n	810b3a2 <__gethex+0x28e>
 810b3ba:	e7e0      	b.n	810b37e <__gethex+0x26a>
 810b3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b3be:	2b00      	cmp	r3, #0
 810b3c0:	d1dd      	bne.n	810b37e <__gethex+0x26a>
 810b3c2:	e7ee      	b.n	810b3a2 <__gethex+0x28e>
 810b3c4:	0810bad7 	.word	0x0810bad7
 810b3c8:	0810ba6d 	.word	0x0810ba6d
 810b3cc:	0810bb2e 	.word	0x0810bb2e
 810b3d0:	1e6f      	subs	r7, r5, #1
 810b3d2:	f1b9 0f00 	cmp.w	r9, #0
 810b3d6:	d130      	bne.n	810b43a <__gethex+0x326>
 810b3d8:	b127      	cbz	r7, 810b3e4 <__gethex+0x2d0>
 810b3da:	4639      	mov	r1, r7
 810b3dc:	4620      	mov	r0, r4
 810b3de:	f7fe fb2c 	bl	8109a3a <__any_on>
 810b3e2:	4681      	mov	r9, r0
 810b3e4:	117a      	asrs	r2, r7, #5
 810b3e6:	2301      	movs	r3, #1
 810b3e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810b3ec:	f007 071f 	and.w	r7, r7, #31
 810b3f0:	40bb      	lsls	r3, r7
 810b3f2:	4213      	tst	r3, r2
 810b3f4:	4629      	mov	r1, r5
 810b3f6:	4620      	mov	r0, r4
 810b3f8:	bf18      	it	ne
 810b3fa:	f049 0902 	orrne.w	r9, r9, #2
 810b3fe:	f7ff fe21 	bl	810b044 <rshift>
 810b402:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810b406:	1b76      	subs	r6, r6, r5
 810b408:	2502      	movs	r5, #2
 810b40a:	f1b9 0f00 	cmp.w	r9, #0
 810b40e:	d047      	beq.n	810b4a0 <__gethex+0x38c>
 810b410:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b414:	2b02      	cmp	r3, #2
 810b416:	d015      	beq.n	810b444 <__gethex+0x330>
 810b418:	2b03      	cmp	r3, #3
 810b41a:	d017      	beq.n	810b44c <__gethex+0x338>
 810b41c:	2b01      	cmp	r3, #1
 810b41e:	d109      	bne.n	810b434 <__gethex+0x320>
 810b420:	f019 0f02 	tst.w	r9, #2
 810b424:	d006      	beq.n	810b434 <__gethex+0x320>
 810b426:	f8da 3000 	ldr.w	r3, [sl]
 810b42a:	ea49 0903 	orr.w	r9, r9, r3
 810b42e:	f019 0f01 	tst.w	r9, #1
 810b432:	d10e      	bne.n	810b452 <__gethex+0x33e>
 810b434:	f045 0510 	orr.w	r5, r5, #16
 810b438:	e032      	b.n	810b4a0 <__gethex+0x38c>
 810b43a:	f04f 0901 	mov.w	r9, #1
 810b43e:	e7d1      	b.n	810b3e4 <__gethex+0x2d0>
 810b440:	2501      	movs	r5, #1
 810b442:	e7e2      	b.n	810b40a <__gethex+0x2f6>
 810b444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b446:	f1c3 0301 	rsb	r3, r3, #1
 810b44a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810b44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b44e:	2b00      	cmp	r3, #0
 810b450:	d0f0      	beq.n	810b434 <__gethex+0x320>
 810b452:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810b456:	f104 0314 	add.w	r3, r4, #20
 810b45a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810b45e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810b462:	f04f 0c00 	mov.w	ip, #0
 810b466:	4618      	mov	r0, r3
 810b468:	f853 2b04 	ldr.w	r2, [r3], #4
 810b46c:	f1b2 3fff 	cmp.w	r2, #4294967295
 810b470:	d01b      	beq.n	810b4aa <__gethex+0x396>
 810b472:	3201      	adds	r2, #1
 810b474:	6002      	str	r2, [r0, #0]
 810b476:	2d02      	cmp	r5, #2
 810b478:	f104 0314 	add.w	r3, r4, #20
 810b47c:	d13c      	bne.n	810b4f8 <__gethex+0x3e4>
 810b47e:	f8d8 2000 	ldr.w	r2, [r8]
 810b482:	3a01      	subs	r2, #1
 810b484:	42b2      	cmp	r2, r6
 810b486:	d109      	bne.n	810b49c <__gethex+0x388>
 810b488:	1171      	asrs	r1, r6, #5
 810b48a:	2201      	movs	r2, #1
 810b48c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810b490:	f006 061f 	and.w	r6, r6, #31
 810b494:	fa02 f606 	lsl.w	r6, r2, r6
 810b498:	421e      	tst	r6, r3
 810b49a:	d13a      	bne.n	810b512 <__gethex+0x3fe>
 810b49c:	f045 0520 	orr.w	r5, r5, #32
 810b4a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b4a2:	601c      	str	r4, [r3, #0]
 810b4a4:	9b02      	ldr	r3, [sp, #8]
 810b4a6:	601f      	str	r7, [r3, #0]
 810b4a8:	e6b0      	b.n	810b20c <__gethex+0xf8>
 810b4aa:	4299      	cmp	r1, r3
 810b4ac:	f843 cc04 	str.w	ip, [r3, #-4]
 810b4b0:	d8d9      	bhi.n	810b466 <__gethex+0x352>
 810b4b2:	68a3      	ldr	r3, [r4, #8]
 810b4b4:	459b      	cmp	fp, r3
 810b4b6:	db17      	blt.n	810b4e8 <__gethex+0x3d4>
 810b4b8:	6861      	ldr	r1, [r4, #4]
 810b4ba:	9801      	ldr	r0, [sp, #4]
 810b4bc:	3101      	adds	r1, #1
 810b4be:	f7fd fe33 	bl	8109128 <_Balloc>
 810b4c2:	4681      	mov	r9, r0
 810b4c4:	b918      	cbnz	r0, 810b4ce <__gethex+0x3ba>
 810b4c6:	4b1a      	ldr	r3, [pc, #104]	@ (810b530 <__gethex+0x41c>)
 810b4c8:	4602      	mov	r2, r0
 810b4ca:	2184      	movs	r1, #132	@ 0x84
 810b4cc:	e6c5      	b.n	810b25a <__gethex+0x146>
 810b4ce:	6922      	ldr	r2, [r4, #16]
 810b4d0:	3202      	adds	r2, #2
 810b4d2:	f104 010c 	add.w	r1, r4, #12
 810b4d6:	0092      	lsls	r2, r2, #2
 810b4d8:	300c      	adds	r0, #12
 810b4da:	f7ff fd69 	bl	810afb0 <memcpy>
 810b4de:	4621      	mov	r1, r4
 810b4e0:	9801      	ldr	r0, [sp, #4]
 810b4e2:	f7fd fe61 	bl	81091a8 <_Bfree>
 810b4e6:	464c      	mov	r4, r9
 810b4e8:	6923      	ldr	r3, [r4, #16]
 810b4ea:	1c5a      	adds	r2, r3, #1
 810b4ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b4f0:	6122      	str	r2, [r4, #16]
 810b4f2:	2201      	movs	r2, #1
 810b4f4:	615a      	str	r2, [r3, #20]
 810b4f6:	e7be      	b.n	810b476 <__gethex+0x362>
 810b4f8:	6922      	ldr	r2, [r4, #16]
 810b4fa:	455a      	cmp	r2, fp
 810b4fc:	dd0b      	ble.n	810b516 <__gethex+0x402>
 810b4fe:	2101      	movs	r1, #1
 810b500:	4620      	mov	r0, r4
 810b502:	f7ff fd9f 	bl	810b044 <rshift>
 810b506:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b50a:	3701      	adds	r7, #1
 810b50c:	42bb      	cmp	r3, r7
 810b50e:	f6ff aee0 	blt.w	810b2d2 <__gethex+0x1be>
 810b512:	2501      	movs	r5, #1
 810b514:	e7c2      	b.n	810b49c <__gethex+0x388>
 810b516:	f016 061f 	ands.w	r6, r6, #31
 810b51a:	d0fa      	beq.n	810b512 <__gethex+0x3fe>
 810b51c:	4453      	add	r3, sl
 810b51e:	f1c6 0620 	rsb	r6, r6, #32
 810b522:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810b526:	f7fd fef1 	bl	810930c <__hi0bits>
 810b52a:	42b0      	cmp	r0, r6
 810b52c:	dbe7      	blt.n	810b4fe <__gethex+0x3ea>
 810b52e:	e7f0      	b.n	810b512 <__gethex+0x3fe>
 810b530:	0810ba6d 	.word	0x0810ba6d

0810b534 <L_shift>:
 810b534:	f1c2 0208 	rsb	r2, r2, #8
 810b538:	0092      	lsls	r2, r2, #2
 810b53a:	b570      	push	{r4, r5, r6, lr}
 810b53c:	f1c2 0620 	rsb	r6, r2, #32
 810b540:	6843      	ldr	r3, [r0, #4]
 810b542:	6804      	ldr	r4, [r0, #0]
 810b544:	fa03 f506 	lsl.w	r5, r3, r6
 810b548:	432c      	orrs	r4, r5
 810b54a:	40d3      	lsrs	r3, r2
 810b54c:	6004      	str	r4, [r0, #0]
 810b54e:	f840 3f04 	str.w	r3, [r0, #4]!
 810b552:	4288      	cmp	r0, r1
 810b554:	d3f4      	bcc.n	810b540 <L_shift+0xc>
 810b556:	bd70      	pop	{r4, r5, r6, pc}

0810b558 <__match>:
 810b558:	b530      	push	{r4, r5, lr}
 810b55a:	6803      	ldr	r3, [r0, #0]
 810b55c:	3301      	adds	r3, #1
 810b55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b562:	b914      	cbnz	r4, 810b56a <__match+0x12>
 810b564:	6003      	str	r3, [r0, #0]
 810b566:	2001      	movs	r0, #1
 810b568:	bd30      	pop	{r4, r5, pc}
 810b56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b56e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810b572:	2d19      	cmp	r5, #25
 810b574:	bf98      	it	ls
 810b576:	3220      	addls	r2, #32
 810b578:	42a2      	cmp	r2, r4
 810b57a:	d0f0      	beq.n	810b55e <__match+0x6>
 810b57c:	2000      	movs	r0, #0
 810b57e:	e7f3      	b.n	810b568 <__match+0x10>

0810b580 <__hexnan>:
 810b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b584:	680b      	ldr	r3, [r1, #0]
 810b586:	6801      	ldr	r1, [r0, #0]
 810b588:	115e      	asrs	r6, r3, #5
 810b58a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810b58e:	f013 031f 	ands.w	r3, r3, #31
 810b592:	b087      	sub	sp, #28
 810b594:	bf18      	it	ne
 810b596:	3604      	addne	r6, #4
 810b598:	2500      	movs	r5, #0
 810b59a:	1f37      	subs	r7, r6, #4
 810b59c:	4682      	mov	sl, r0
 810b59e:	4690      	mov	r8, r2
 810b5a0:	9301      	str	r3, [sp, #4]
 810b5a2:	f846 5c04 	str.w	r5, [r6, #-4]
 810b5a6:	46b9      	mov	r9, r7
 810b5a8:	463c      	mov	r4, r7
 810b5aa:	9502      	str	r5, [sp, #8]
 810b5ac:	46ab      	mov	fp, r5
 810b5ae:	784a      	ldrb	r2, [r1, #1]
 810b5b0:	1c4b      	adds	r3, r1, #1
 810b5b2:	9303      	str	r3, [sp, #12]
 810b5b4:	b342      	cbz	r2, 810b608 <__hexnan+0x88>
 810b5b6:	4610      	mov	r0, r2
 810b5b8:	9105      	str	r1, [sp, #20]
 810b5ba:	9204      	str	r2, [sp, #16]
 810b5bc:	f7ff fd94 	bl	810b0e8 <__hexdig_fun>
 810b5c0:	2800      	cmp	r0, #0
 810b5c2:	d151      	bne.n	810b668 <__hexnan+0xe8>
 810b5c4:	9a04      	ldr	r2, [sp, #16]
 810b5c6:	9905      	ldr	r1, [sp, #20]
 810b5c8:	2a20      	cmp	r2, #32
 810b5ca:	d818      	bhi.n	810b5fe <__hexnan+0x7e>
 810b5cc:	9b02      	ldr	r3, [sp, #8]
 810b5ce:	459b      	cmp	fp, r3
 810b5d0:	dd13      	ble.n	810b5fa <__hexnan+0x7a>
 810b5d2:	454c      	cmp	r4, r9
 810b5d4:	d206      	bcs.n	810b5e4 <__hexnan+0x64>
 810b5d6:	2d07      	cmp	r5, #7
 810b5d8:	dc04      	bgt.n	810b5e4 <__hexnan+0x64>
 810b5da:	462a      	mov	r2, r5
 810b5dc:	4649      	mov	r1, r9
 810b5de:	4620      	mov	r0, r4
 810b5e0:	f7ff ffa8 	bl	810b534 <L_shift>
 810b5e4:	4544      	cmp	r4, r8
 810b5e6:	d952      	bls.n	810b68e <__hexnan+0x10e>
 810b5e8:	2300      	movs	r3, #0
 810b5ea:	f1a4 0904 	sub.w	r9, r4, #4
 810b5ee:	f844 3c04 	str.w	r3, [r4, #-4]
 810b5f2:	f8cd b008 	str.w	fp, [sp, #8]
 810b5f6:	464c      	mov	r4, r9
 810b5f8:	461d      	mov	r5, r3
 810b5fa:	9903      	ldr	r1, [sp, #12]
 810b5fc:	e7d7      	b.n	810b5ae <__hexnan+0x2e>
 810b5fe:	2a29      	cmp	r2, #41	@ 0x29
 810b600:	d157      	bne.n	810b6b2 <__hexnan+0x132>
 810b602:	3102      	adds	r1, #2
 810b604:	f8ca 1000 	str.w	r1, [sl]
 810b608:	f1bb 0f00 	cmp.w	fp, #0
 810b60c:	d051      	beq.n	810b6b2 <__hexnan+0x132>
 810b60e:	454c      	cmp	r4, r9
 810b610:	d206      	bcs.n	810b620 <__hexnan+0xa0>
 810b612:	2d07      	cmp	r5, #7
 810b614:	dc04      	bgt.n	810b620 <__hexnan+0xa0>
 810b616:	462a      	mov	r2, r5
 810b618:	4649      	mov	r1, r9
 810b61a:	4620      	mov	r0, r4
 810b61c:	f7ff ff8a 	bl	810b534 <L_shift>
 810b620:	4544      	cmp	r4, r8
 810b622:	d936      	bls.n	810b692 <__hexnan+0x112>
 810b624:	f1a8 0204 	sub.w	r2, r8, #4
 810b628:	4623      	mov	r3, r4
 810b62a:	f853 1b04 	ldr.w	r1, [r3], #4
 810b62e:	f842 1f04 	str.w	r1, [r2, #4]!
 810b632:	429f      	cmp	r7, r3
 810b634:	d2f9      	bcs.n	810b62a <__hexnan+0xaa>
 810b636:	1b3b      	subs	r3, r7, r4
 810b638:	f023 0303 	bic.w	r3, r3, #3
 810b63c:	3304      	adds	r3, #4
 810b63e:	3401      	adds	r4, #1
 810b640:	3e03      	subs	r6, #3
 810b642:	42b4      	cmp	r4, r6
 810b644:	bf88      	it	hi
 810b646:	2304      	movhi	r3, #4
 810b648:	4443      	add	r3, r8
 810b64a:	2200      	movs	r2, #0
 810b64c:	f843 2b04 	str.w	r2, [r3], #4
 810b650:	429f      	cmp	r7, r3
 810b652:	d2fb      	bcs.n	810b64c <__hexnan+0xcc>
 810b654:	683b      	ldr	r3, [r7, #0]
 810b656:	b91b      	cbnz	r3, 810b660 <__hexnan+0xe0>
 810b658:	4547      	cmp	r7, r8
 810b65a:	d128      	bne.n	810b6ae <__hexnan+0x12e>
 810b65c:	2301      	movs	r3, #1
 810b65e:	603b      	str	r3, [r7, #0]
 810b660:	2005      	movs	r0, #5
 810b662:	b007      	add	sp, #28
 810b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b668:	3501      	adds	r5, #1
 810b66a:	2d08      	cmp	r5, #8
 810b66c:	f10b 0b01 	add.w	fp, fp, #1
 810b670:	dd06      	ble.n	810b680 <__hexnan+0x100>
 810b672:	4544      	cmp	r4, r8
 810b674:	d9c1      	bls.n	810b5fa <__hexnan+0x7a>
 810b676:	2300      	movs	r3, #0
 810b678:	f844 3c04 	str.w	r3, [r4, #-4]
 810b67c:	2501      	movs	r5, #1
 810b67e:	3c04      	subs	r4, #4
 810b680:	6822      	ldr	r2, [r4, #0]
 810b682:	f000 000f 	and.w	r0, r0, #15
 810b686:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810b68a:	6020      	str	r0, [r4, #0]
 810b68c:	e7b5      	b.n	810b5fa <__hexnan+0x7a>
 810b68e:	2508      	movs	r5, #8
 810b690:	e7b3      	b.n	810b5fa <__hexnan+0x7a>
 810b692:	9b01      	ldr	r3, [sp, #4]
 810b694:	2b00      	cmp	r3, #0
 810b696:	d0dd      	beq.n	810b654 <__hexnan+0xd4>
 810b698:	f1c3 0320 	rsb	r3, r3, #32
 810b69c:	f04f 32ff 	mov.w	r2, #4294967295
 810b6a0:	40da      	lsrs	r2, r3
 810b6a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810b6a6:	4013      	ands	r3, r2
 810b6a8:	f846 3c04 	str.w	r3, [r6, #-4]
 810b6ac:	e7d2      	b.n	810b654 <__hexnan+0xd4>
 810b6ae:	3f04      	subs	r7, #4
 810b6b0:	e7d0      	b.n	810b654 <__hexnan+0xd4>
 810b6b2:	2004      	movs	r0, #4
 810b6b4:	e7d5      	b.n	810b662 <__hexnan+0xe2>

0810b6b6 <__ascii_mbtowc>:
 810b6b6:	b082      	sub	sp, #8
 810b6b8:	b901      	cbnz	r1, 810b6bc <__ascii_mbtowc+0x6>
 810b6ba:	a901      	add	r1, sp, #4
 810b6bc:	b142      	cbz	r2, 810b6d0 <__ascii_mbtowc+0x1a>
 810b6be:	b14b      	cbz	r3, 810b6d4 <__ascii_mbtowc+0x1e>
 810b6c0:	7813      	ldrb	r3, [r2, #0]
 810b6c2:	600b      	str	r3, [r1, #0]
 810b6c4:	7812      	ldrb	r2, [r2, #0]
 810b6c6:	1e10      	subs	r0, r2, #0
 810b6c8:	bf18      	it	ne
 810b6ca:	2001      	movne	r0, #1
 810b6cc:	b002      	add	sp, #8
 810b6ce:	4770      	bx	lr
 810b6d0:	4610      	mov	r0, r2
 810b6d2:	e7fb      	b.n	810b6cc <__ascii_mbtowc+0x16>
 810b6d4:	f06f 0001 	mvn.w	r0, #1
 810b6d8:	e7f8      	b.n	810b6cc <__ascii_mbtowc+0x16>

0810b6da <_realloc_r>:
 810b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b6de:	4607      	mov	r7, r0
 810b6e0:	4614      	mov	r4, r2
 810b6e2:	460d      	mov	r5, r1
 810b6e4:	b921      	cbnz	r1, 810b6f0 <_realloc_r+0x16>
 810b6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b6ea:	4611      	mov	r1, r2
 810b6ec:	f7fd bc90 	b.w	8109010 <_malloc_r>
 810b6f0:	b92a      	cbnz	r2, 810b6fe <_realloc_r+0x24>
 810b6f2:	f7fd fc19 	bl	8108f28 <_free_r>
 810b6f6:	4625      	mov	r5, r4
 810b6f8:	4628      	mov	r0, r5
 810b6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b6fe:	f000 f8c4 	bl	810b88a <_malloc_usable_size_r>
 810b702:	4284      	cmp	r4, r0
 810b704:	4606      	mov	r6, r0
 810b706:	d802      	bhi.n	810b70e <_realloc_r+0x34>
 810b708:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810b70c:	d8f4      	bhi.n	810b6f8 <_realloc_r+0x1e>
 810b70e:	4621      	mov	r1, r4
 810b710:	4638      	mov	r0, r7
 810b712:	f7fd fc7d 	bl	8109010 <_malloc_r>
 810b716:	4680      	mov	r8, r0
 810b718:	b908      	cbnz	r0, 810b71e <_realloc_r+0x44>
 810b71a:	4645      	mov	r5, r8
 810b71c:	e7ec      	b.n	810b6f8 <_realloc_r+0x1e>
 810b71e:	42b4      	cmp	r4, r6
 810b720:	4622      	mov	r2, r4
 810b722:	4629      	mov	r1, r5
 810b724:	bf28      	it	cs
 810b726:	4632      	movcs	r2, r6
 810b728:	f7ff fc42 	bl	810afb0 <memcpy>
 810b72c:	4629      	mov	r1, r5
 810b72e:	4638      	mov	r0, r7
 810b730:	f7fd fbfa 	bl	8108f28 <_free_r>
 810b734:	e7f1      	b.n	810b71a <_realloc_r+0x40>

0810b736 <__ascii_wctomb>:
 810b736:	4603      	mov	r3, r0
 810b738:	4608      	mov	r0, r1
 810b73a:	b141      	cbz	r1, 810b74e <__ascii_wctomb+0x18>
 810b73c:	2aff      	cmp	r2, #255	@ 0xff
 810b73e:	d904      	bls.n	810b74a <__ascii_wctomb+0x14>
 810b740:	228a      	movs	r2, #138	@ 0x8a
 810b742:	601a      	str	r2, [r3, #0]
 810b744:	f04f 30ff 	mov.w	r0, #4294967295
 810b748:	4770      	bx	lr
 810b74a:	700a      	strb	r2, [r1, #0]
 810b74c:	2001      	movs	r0, #1
 810b74e:	4770      	bx	lr

0810b750 <fiprintf>:
 810b750:	b40e      	push	{r1, r2, r3}
 810b752:	b503      	push	{r0, r1, lr}
 810b754:	4601      	mov	r1, r0
 810b756:	ab03      	add	r3, sp, #12
 810b758:	4805      	ldr	r0, [pc, #20]	@ (810b770 <fiprintf+0x20>)
 810b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 810b75e:	6800      	ldr	r0, [r0, #0]
 810b760:	9301      	str	r3, [sp, #4]
 810b762:	f7ff f991 	bl	810aa88 <_vfiprintf_r>
 810b766:	b002      	add	sp, #8
 810b768:	f85d eb04 	ldr.w	lr, [sp], #4
 810b76c:	b003      	add	sp, #12
 810b76e:	4770      	bx	lr
 810b770:	1000001c 	.word	0x1000001c

0810b774 <__swhatbuf_r>:
 810b774:	b570      	push	{r4, r5, r6, lr}
 810b776:	460c      	mov	r4, r1
 810b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b77c:	2900      	cmp	r1, #0
 810b77e:	b096      	sub	sp, #88	@ 0x58
 810b780:	4615      	mov	r5, r2
 810b782:	461e      	mov	r6, r3
 810b784:	da0d      	bge.n	810b7a2 <__swhatbuf_r+0x2e>
 810b786:	89a3      	ldrh	r3, [r4, #12]
 810b788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810b78c:	f04f 0100 	mov.w	r1, #0
 810b790:	bf14      	ite	ne
 810b792:	2340      	movne	r3, #64	@ 0x40
 810b794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810b798:	2000      	movs	r0, #0
 810b79a:	6031      	str	r1, [r6, #0]
 810b79c:	602b      	str	r3, [r5, #0]
 810b79e:	b016      	add	sp, #88	@ 0x58
 810b7a0:	bd70      	pop	{r4, r5, r6, pc}
 810b7a2:	466a      	mov	r2, sp
 810b7a4:	f000 f848 	bl	810b838 <_fstat_r>
 810b7a8:	2800      	cmp	r0, #0
 810b7aa:	dbec      	blt.n	810b786 <__swhatbuf_r+0x12>
 810b7ac:	9901      	ldr	r1, [sp, #4]
 810b7ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810b7b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810b7b6:	4259      	negs	r1, r3
 810b7b8:	4159      	adcs	r1, r3
 810b7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810b7be:	e7eb      	b.n	810b798 <__swhatbuf_r+0x24>

0810b7c0 <__smakebuf_r>:
 810b7c0:	898b      	ldrh	r3, [r1, #12]
 810b7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b7c4:	079d      	lsls	r5, r3, #30
 810b7c6:	4606      	mov	r6, r0
 810b7c8:	460c      	mov	r4, r1
 810b7ca:	d507      	bpl.n	810b7dc <__smakebuf_r+0x1c>
 810b7cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810b7d0:	6023      	str	r3, [r4, #0]
 810b7d2:	6123      	str	r3, [r4, #16]
 810b7d4:	2301      	movs	r3, #1
 810b7d6:	6163      	str	r3, [r4, #20]
 810b7d8:	b003      	add	sp, #12
 810b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b7dc:	ab01      	add	r3, sp, #4
 810b7de:	466a      	mov	r2, sp
 810b7e0:	f7ff ffc8 	bl	810b774 <__swhatbuf_r>
 810b7e4:	9f00      	ldr	r7, [sp, #0]
 810b7e6:	4605      	mov	r5, r0
 810b7e8:	4639      	mov	r1, r7
 810b7ea:	4630      	mov	r0, r6
 810b7ec:	f7fd fc10 	bl	8109010 <_malloc_r>
 810b7f0:	b948      	cbnz	r0, 810b806 <__smakebuf_r+0x46>
 810b7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b7f6:	059a      	lsls	r2, r3, #22
 810b7f8:	d4ee      	bmi.n	810b7d8 <__smakebuf_r+0x18>
 810b7fa:	f023 0303 	bic.w	r3, r3, #3
 810b7fe:	f043 0302 	orr.w	r3, r3, #2
 810b802:	81a3      	strh	r3, [r4, #12]
 810b804:	e7e2      	b.n	810b7cc <__smakebuf_r+0xc>
 810b806:	89a3      	ldrh	r3, [r4, #12]
 810b808:	6020      	str	r0, [r4, #0]
 810b80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810b80e:	81a3      	strh	r3, [r4, #12]
 810b810:	9b01      	ldr	r3, [sp, #4]
 810b812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810b816:	b15b      	cbz	r3, 810b830 <__smakebuf_r+0x70>
 810b818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b81c:	4630      	mov	r0, r6
 810b81e:	f000 f81d 	bl	810b85c <_isatty_r>
 810b822:	b128      	cbz	r0, 810b830 <__smakebuf_r+0x70>
 810b824:	89a3      	ldrh	r3, [r4, #12]
 810b826:	f023 0303 	bic.w	r3, r3, #3
 810b82a:	f043 0301 	orr.w	r3, r3, #1
 810b82e:	81a3      	strh	r3, [r4, #12]
 810b830:	89a3      	ldrh	r3, [r4, #12]
 810b832:	431d      	orrs	r5, r3
 810b834:	81a5      	strh	r5, [r4, #12]
 810b836:	e7cf      	b.n	810b7d8 <__smakebuf_r+0x18>

0810b838 <_fstat_r>:
 810b838:	b538      	push	{r3, r4, r5, lr}
 810b83a:	4d07      	ldr	r5, [pc, #28]	@ (810b858 <_fstat_r+0x20>)
 810b83c:	2300      	movs	r3, #0
 810b83e:	4604      	mov	r4, r0
 810b840:	4608      	mov	r0, r1
 810b842:	4611      	mov	r1, r2
 810b844:	602b      	str	r3, [r5, #0]
 810b846:	f7f6 fa57 	bl	8101cf8 <_fstat>
 810b84a:	1c43      	adds	r3, r0, #1
 810b84c:	d102      	bne.n	810b854 <_fstat_r+0x1c>
 810b84e:	682b      	ldr	r3, [r5, #0]
 810b850:	b103      	cbz	r3, 810b854 <_fstat_r+0x1c>
 810b852:	6023      	str	r3, [r4, #0]
 810b854:	bd38      	pop	{r3, r4, r5, pc}
 810b856:	bf00      	nop
 810b858:	100004ec 	.word	0x100004ec

0810b85c <_isatty_r>:
 810b85c:	b538      	push	{r3, r4, r5, lr}
 810b85e:	4d06      	ldr	r5, [pc, #24]	@ (810b878 <_isatty_r+0x1c>)
 810b860:	2300      	movs	r3, #0
 810b862:	4604      	mov	r4, r0
 810b864:	4608      	mov	r0, r1
 810b866:	602b      	str	r3, [r5, #0]
 810b868:	f7f6 fa56 	bl	8101d18 <_isatty>
 810b86c:	1c43      	adds	r3, r0, #1
 810b86e:	d102      	bne.n	810b876 <_isatty_r+0x1a>
 810b870:	682b      	ldr	r3, [r5, #0]
 810b872:	b103      	cbz	r3, 810b876 <_isatty_r+0x1a>
 810b874:	6023      	str	r3, [r4, #0]
 810b876:	bd38      	pop	{r3, r4, r5, pc}
 810b878:	100004ec 	.word	0x100004ec

0810b87c <abort>:
 810b87c:	b508      	push	{r3, lr}
 810b87e:	2006      	movs	r0, #6
 810b880:	f000 f834 	bl	810b8ec <raise>
 810b884:	2001      	movs	r0, #1
 810b886:	f7f6 f9e7 	bl	8101c58 <_exit>

0810b88a <_malloc_usable_size_r>:
 810b88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b88e:	1f18      	subs	r0, r3, #4
 810b890:	2b00      	cmp	r3, #0
 810b892:	bfbc      	itt	lt
 810b894:	580b      	ldrlt	r3, [r1, r0]
 810b896:	18c0      	addlt	r0, r0, r3
 810b898:	4770      	bx	lr

0810b89a <_raise_r>:
 810b89a:	291f      	cmp	r1, #31
 810b89c:	b538      	push	{r3, r4, r5, lr}
 810b89e:	4605      	mov	r5, r0
 810b8a0:	460c      	mov	r4, r1
 810b8a2:	d904      	bls.n	810b8ae <_raise_r+0x14>
 810b8a4:	2316      	movs	r3, #22
 810b8a6:	6003      	str	r3, [r0, #0]
 810b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 810b8ac:	bd38      	pop	{r3, r4, r5, pc}
 810b8ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810b8b0:	b112      	cbz	r2, 810b8b8 <_raise_r+0x1e>
 810b8b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b8b6:	b94b      	cbnz	r3, 810b8cc <_raise_r+0x32>
 810b8b8:	4628      	mov	r0, r5
 810b8ba:	f000 f831 	bl	810b920 <_getpid_r>
 810b8be:	4622      	mov	r2, r4
 810b8c0:	4601      	mov	r1, r0
 810b8c2:	4628      	mov	r0, r5
 810b8c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b8c8:	f000 b818 	b.w	810b8fc <_kill_r>
 810b8cc:	2b01      	cmp	r3, #1
 810b8ce:	d00a      	beq.n	810b8e6 <_raise_r+0x4c>
 810b8d0:	1c59      	adds	r1, r3, #1
 810b8d2:	d103      	bne.n	810b8dc <_raise_r+0x42>
 810b8d4:	2316      	movs	r3, #22
 810b8d6:	6003      	str	r3, [r0, #0]
 810b8d8:	2001      	movs	r0, #1
 810b8da:	e7e7      	b.n	810b8ac <_raise_r+0x12>
 810b8dc:	2100      	movs	r1, #0
 810b8de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810b8e2:	4620      	mov	r0, r4
 810b8e4:	4798      	blx	r3
 810b8e6:	2000      	movs	r0, #0
 810b8e8:	e7e0      	b.n	810b8ac <_raise_r+0x12>
	...

0810b8ec <raise>:
 810b8ec:	4b02      	ldr	r3, [pc, #8]	@ (810b8f8 <raise+0xc>)
 810b8ee:	4601      	mov	r1, r0
 810b8f0:	6818      	ldr	r0, [r3, #0]
 810b8f2:	f7ff bfd2 	b.w	810b89a <_raise_r>
 810b8f6:	bf00      	nop
 810b8f8:	1000001c 	.word	0x1000001c

0810b8fc <_kill_r>:
 810b8fc:	b538      	push	{r3, r4, r5, lr}
 810b8fe:	4d07      	ldr	r5, [pc, #28]	@ (810b91c <_kill_r+0x20>)
 810b900:	2300      	movs	r3, #0
 810b902:	4604      	mov	r4, r0
 810b904:	4608      	mov	r0, r1
 810b906:	4611      	mov	r1, r2
 810b908:	602b      	str	r3, [r5, #0]
 810b90a:	f7f6 f995 	bl	8101c38 <_kill>
 810b90e:	1c43      	adds	r3, r0, #1
 810b910:	d102      	bne.n	810b918 <_kill_r+0x1c>
 810b912:	682b      	ldr	r3, [r5, #0]
 810b914:	b103      	cbz	r3, 810b918 <_kill_r+0x1c>
 810b916:	6023      	str	r3, [r4, #0]
 810b918:	bd38      	pop	{r3, r4, r5, pc}
 810b91a:	bf00      	nop
 810b91c:	100004ec 	.word	0x100004ec

0810b920 <_getpid_r>:
 810b920:	f7f6 b982 	b.w	8101c28 <_getpid>

0810b924 <_init>:
 810b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b926:	bf00      	nop
 810b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b92a:	bc08      	pop	{r3}
 810b92c:	469e      	mov	lr, r3
 810b92e:	4770      	bx	lr

0810b930 <_fini>:
 810b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b932:	bf00      	nop
 810b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b936:	bc08      	pop	{r3}
 810b938:	469e      	mov	lr, r3
 810b93a:	4770      	bx	lr
